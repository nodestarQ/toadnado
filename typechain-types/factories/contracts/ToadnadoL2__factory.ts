/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ToadnadoL2,
  ToadnadoL2Interface,
} from "../../contracts/ToadnadoL2";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_l1Address",
        type: "address",
      },
      {
        internalType: "address",
        name: "_verifier",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_denomination",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "_merkleTreeHeight",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    inputs: [],
    name: "VerificationFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "commitment",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "leafIndex",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "nullifier",
        type: "bytes32",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
  {
    inputs: [],
    name: "L1_SLOAD_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ROOT_HISTORY_SIZE",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_nullifier",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_chainId",
        type: "uint256",
      },
    ],
    name: "_formatPublicInputs",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "adminWithdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "commitmentLeafs",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "commitments",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "commitmentsTreeRoots",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentRootIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "denomination",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_commitment",
        type: "bytes32",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "filledSubtrees",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllCommitments",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "key",
        type: "uint256",
      },
    ],
    name: "getL1LeafCommitments",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "key",
        type: "uint256",
      },
    ],
    name: "getL1Root",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_left",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_right",
        type: "bytes32",
      },
    ],
    name: "hashLeftRight",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
    ],
    name: "isKnownL1Root",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
    ],
    name: "isKnownRoot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_nullifierHash",
        type: "bytes32",
      },
    ],
    name: "isSpent",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_nullifierHashes",
        type: "bytes32[]",
      },
    ],
    name: "isSpentArray",
    outputs: [
      {
        internalType: "bool[]",
        name: "spent",
        type: "bool[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "l1Address",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "l1_currentRootIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "levels",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "nullifiers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "l1_contract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "slot",
        type: "uint256",
      },
    ],
    name: "readSingleSlot",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "roots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_l1root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_l2root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_nullifier",
        type: "bytes32",
      },
      {
        internalType: "address payable",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "snarkProof",
        type: "bytes",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "zeros",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052600480546001600160401b0319169055600c805463ffffffff19169055600d80546001600160a01b03191661010117905534801562000041575f80fd5b5060405162002893380380620028938339810160408190526200006491620006c1565b828282805f8163ffffffff1611620000cf5760405162461bcd60e51b815260206004820152602360248201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60448201526265726f60e81b60648201526084015b60405180910390fd5b60148163ffffffff1610620001275760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e20323000006044820152606401620000c6565b5f805463ffffffff191663ffffffff83161781555b8163ffffffff168163ffffffff16101562000180576200016263ffffffff82166200026c565b63ffffffff82165f908152600260205260409020556001016200013c565b506200019263ffffffff82166200026c565b5f805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff55506001600555816200021f5760405162461bcd60e51b815260206004820152602560248201527f64656e6f6d696e6174696f6e2073686f756c6420626520677265617465722074604482015264068616e20360dc1b6064820152608401620000c6565b50600780546001600160a01b0319166001600160a01b03938416179055600655600c8054600160201b600160c01b031916640100000000969092169590950217909355506200071b915050565b5f815f036200029c57507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b81600103620002cc57507f4fc2fe9184a25f44ce8ddb5f32671fcae6d9c85ed710c199acef16ad16b29911919050565b81600203620002fc57507f0d826a474f851c563052d929ef0daa70f658aba9ba084f51f6e3483c13c0e59a919050565b816003036200032c57507ff7761a16b5e4c0120e4c5704b910dbe18ff6162a9668ed1c2c4efde7c4f15806919050565b816004036200035c57507fce9ce09a0ab259d6d14ca3dcd74e6c6b9e7d9074bff66973d4c57ccdffdb2a82919050565b816005036200038c57507f02efd44c63015ff1385344e0624867775486d05e6eb1290a24976964a598003b919050565b81600603620003bc57507fc4dec5845d407ce2ac2e6824bb7857c4b138f819e5789d5d11e812db10c846cd919050565b81600703620003ec57507f5fbe3f20c23f3bd6ac347917fb0903433e0b9a48373412348240a5f919bfde19919050565b816008036200041c57507f92d1b07e56b3da96b7917778cb657f2c513eaeeb4d1579a73b5ea316f25b7289919050565b816009036200044c57507fa08add5656d6d3d0827ef909f7647981eac42aa1f51970a752f130f718f6d76a919050565b81600a036200047c57507f1704c5f297590d8ec62776b0714f4f3f2234bae0524035342b0da8b8988ebd79919050565b81600b03620004ac57507fc5ae2bd47379c2c6d1189cfc3d057948dc6054caf845fcacd8f7affe94b11944919050565b81600c03620004dc57507f12a161d6d5561062f387d91ad9f0f8966c0956afdb9e8325458b9e5057b82bdb919050565b81600d036200050c57507f4ade524ba596de20bbe94507a761c45251ae7a27857ceb4287d9018525b99bc5919050565b81600e036200053c57507f38287ad69151fa833bf4bf8b8eb6ffb39400a38f1a7e53b473f639c8c60fd5e4919050565b81600f036200056c57507f57f2ade7d711707e785451f2aba6c95872c7fe03153a98b7327b4024e8068fa3919050565b816010036200059c57507fb1982e0d1b0de46a88d8b17941472e41a86d3ff64571ed8e0ca72d58633547fc919050565b81601103620005cc57507fb7c60f8670af15eb32b4ee36727179bc085a3dde03d5f9a1486664ba576b30a6919050565b81601203620005fc57507f5ff905c5c659a926b132ef3665a3de5d5a859c1d479e68851085bfc0348c5331919050565b816013036200062c57507fb4dfa78b912e98c9f7eb42d71eb537a02bf3173d44a2eb887a48b3972072dd8e919050565b816014036200065c57507f60919a16a2eb8b91cfb8ba1e5b4c155a76a14c217b5403edbd563f34e508ecdc919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152606401620000c6565b919050565b80516001600160a01b0381168114620006a5575f80fd5b5f805f8060808587031215620006d5575f80fd5b620006e085620006aa565b9350620006f060208601620006aa565b925060408501519150606085015163ffffffff8116811462000710575f80fd5b939692955090935050565b61216a80620007295f395ff3fe6080604052600436106101c8575f3560e01c806390eeb02b116100f2578063c2eeeebd11610092578063e993d00b11610062578063e993d00b146105cd578063f178e47c146105ec578063f18d20be14610617578063fc7e9c6f1461061f575f80fd5b8063c2eeeebd14610546578063cd87a3b41461056c578063e5285dcc14610580578063e8295588146105ae575f80fd5b8063a867a5ef116100cd578063a867a5ef146104c1578063b214faa5146104e0578063ba70f757146104f3578063c2b40ae41461051b575f80fd5b806390eeb02b1461044e5780639ec441541461046a5780639fa12d0b14610495575f80fd5b806338bf282e116101685780635032d4f1116101385780635032d4f1146103cd5780636d9833e3146103ec578063839df9451461040b5780638bca6d1614610439575f80fd5b806338bf282e1461032a5780633ed4eae51461037e5780634ecf518b1461039d57806350241a3f146103b8575f80fd5b80632997e86b116101a35780632997e86b146102655780632b7ac3f3146102a35780632c0ee3c4146102da5780633591d78d146102fc575f80fd5b8063102b72e7146101d3578063164ddd01146102085780632662721014610239575f80fd5b366101cf57005b5f80fd5b3480156101de575f80fd5b506101f26101ed366004611b88565b610642565b6040516101ff9190611bff565b60405180910390f35b348015610213575f80fd5b50600c546102249063ffffffff1681565b60405163ffffffff90911681526020016101ff565b348015610244575f80fd5b50610258610253366004611c11565b610767565b6040516101ff9190611c87565b348015610270575f80fd5b5061029361027f366004611c99565b60086020525f908152604090205460ff1681565b60405190151581526020016101ff565b3480156102ae575f80fd5b506007546102c2906001600160a01b031681565b6040516001600160a01b0390911681526020016101ff565b3480156102e5575f80fd5b506102ee610885565b6040516101ff929190611cb0565b348015610307575f80fd5b50610293610316366004611c99565b600a6020525f908152604090205460ff1681565b348015610335575f80fd5b50610370610344366004611cdd565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6040519081526020016101ff565b348015610389575f80fd5b50610370610398366004611c99565b6109ce565b3480156103a8575f80fd5b505f546102249063ffffffff1681565b6103cb6103c6366004611cfd565b610a37565b005b3480156103d8575f80fd5b506103706103e7366004611c99565b610e81565b3480156103f7575f80fd5b50610293610406366004611c99565b610ee4565b348015610416575f80fd5b50610293610425366004611c99565b60096020525f908152604090205460ff1681565b348015610444575f80fd5b5061037060065481565b348015610459575f80fd5b506004546102249063ffffffff1681565b348015610475575f80fd5b50610370610484366004611c99565b60016020525f908152604090205481565b3480156104a0575f80fd5b506104b46104af366004611d96565b610f5d565b6040516101ff9190611e05565b3480156104cc575f80fd5b50600d546102c2906001600160a01b031681565b6103cb6104ee366004611c99565b611017565b3480156104fe575f80fd5b5060045463ffffffff165f90815260036020526040902054610370565b348015610526575f80fd5b50610370610535366004611c99565b60036020525f908152604090205481565b348015610551575f80fd5b50600c546102c290600160201b90046001600160a01b031681565b348015610577575f80fd5b50610224601e81565b34801561058b575f80fd5b5061029361059a366004611c99565b5f9081526008602052604090205460ff1690565b3480156105b9575f80fd5b506103706105c8366004611c99565b611101565b3480156105d8575f80fd5b506102936105e7366004611c99565b61151a565b3480156105f7575f80fd5b50610370610606366004611c99565b60026020525f908152604090205481565b6103cb61168c565b34801561062a575f80fd5b5060045461022490600160201b900463ffffffff1681565b6060610679604051806040016040528060148152602001733932b0b229b4b733b632a9b637ba1039b637ba1d60611b81525061174d565b61068282611790565b60408051606085811b6bffffffffffffffffffffffff19166020830152603480830186905283518084039091018152605490920192839052600d5491925f926001600160a01b0316906106d6908590611e4a565b5f60405180830381855afa9150503d805f811461070e576040519150601f19603f3d011682016040523d82523d5f602084013e610713565b606091505b5090925090508161075c5760405162461bcd60e51b815260206004820152600e60248201526d130c54d313d0510819985a5b195960921b60448201526064015b60405180910390fd5b925050505b92915050565b60408051604280825261086082019092526060915f919060208201610840803683370190505090505f5b60208110156107d7578681602081106107ac576107ac611e79565b835191901a908390839081106107c4576107c4611e79565b6020908102919091010152600101610791565b5060205b604081101561082b57856107f0602083611ea1565b6020811061080057610800611e79565b835191901a9083908390811061081857610818611e79565b60209081029190910101526001016107db565b5080516001600160a01b0385169081908390604090811061084e5761084e611e79565b602002602001018181525050835f1b8260418151811061087057610870611e79565b60209081029190910101525095945050505050565b604080516020808252610420820190925260609182915f908280820161040080368337019050506004549091505f90600160201b900463ffffffff1667ffffffffffffffff8111156108d9576108d9611e65565b604051908082528060200260200182016040528015610902578160200160208202803683370190505b5090505f5b60045463ffffffff600160201b9091048116908216101561095e5763ffffffff81165f81815260016020526040902054835190918491811061094b5761094b611e79565b6020908102919091010152600101610907565b505f5b8363ffffffff168163ffffffff1610156109c3576109848163ffffffff166109ce565b156109c3576109988163ffffffff166109ce565b838263ffffffff16815181106109b0576109b0611e79565b6020908102919091010152600101610961565b509094909350915050565b600c54604080516020810184905260019181018290525f92610a1d91600160201b9091046001600160a01b0316906060015b604051602081830303815290604052805190602001205f1c610642565b806020019051810190610a309190611eb4565b9392505050565b610a3f6117d5565b46610a49816117ff565b610a6b604051806040016040528060018152602001603160f81b81525061174d565b8062aa36a703610abd5760405162461bcd60e51b815260206004820152601d60248201527f7769746864726177616c206f6e6c7920616c6c6f776564206f6e204c320000006044820152606401610753565b5f8581526008602052604090205460ff1615610b1b5760405162461bcd60e51b815260206004820152601f60248201527f546865206e6f746520686173206265656e20616c7265616479207370656e74006044820152606401610753565b610b3e60405180604001604052806002815260200161189960f11b81525061174d565b610b4786610ee4565b610b935760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f742066696e6420796f7572206c32206d65726b6c6520726f6f74006044820152606401610753565b610bb660405180604001604052806002815260200161313360f01b81525061174d565b610bbf8761151a565b610c0b5760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f742066696e6420796f7572206c31206d65726b6c6520726f6f74006044820152606401610753565b610c2e604051806040016040528060028152602001610c4d60f21b81525061174d565b60408051602081018990529081018790525f90606001604051602081830303815290604052805190602001209050610c7e604051806040016040528060018152602001601960f91b81525061174d565b5f610c8b82888886610767565b9050610caf604051806040016040528060018152602001603360f81b81525061174d565b610cd06040518060600160405280602381526020016121126023913961174d565b610cf381604181518110610ce657610ce6611e79565b60200260200101516117ff565b600754604051633a94343960e21b81526001600160a01b039091169063ea50d0e490610d2790889088908690600401611ecb565b602060405180830381865afa158015610d42573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d669190611f11565b610d835760405163439cc0cd60e01b815260040160405180910390fd5b610da46040518060600160405280602381526020016121126023913961174d565b5f87815260086020908152604091829020805460ff191660011790558151606081019092526023808352610ddf92916121129083013961174d565b610de886611844565b610e096040518060600160405280602381526020016121126023913961174d565b604080516001600160a01b0388168152602081018990527f0ce490531f6c8ae2f1ff174643bc8b7ed5e52987ab50dc1e8f33655d2cd8c90b910160405180910390a1610e6c6040518060600160405280602381526020016121126023913961174d565b505050610e796001600555565b505050505050565b5f610eae6040518060400160405280600b81526020016a6765744c31526f6f74203160a81b81525061174d565b600c54604080516020810185905260039181018290529091610a1d91600160201b9091046001600160a01b031690606001610a00565b5f818103610ef357505f919050565b60045463ffffffff16805b63ffffffff81165f908152600360205260409020548403610f23575060019392505050565b8063ffffffff165f03610f345750601e5b80610f3e81611f30565b9150508163ffffffff168163ffffffff1603610efe57505f9392505050565b60608167ffffffffffffffff811115610f7857610f78611e65565b604051908082528060200260200182016040528015610fa1578160200160208202803683370190505b5090505f5b8281101561101057610fde848483818110610fc357610fc3611e79565b905060200201355f9081526008602052604090205460ff1690565b15611008576001828281518110610ff757610ff7611e79565b911515602092830291909101909101525b600101610fa6565b5092915050565b61101f6117d5565b5f8181526009602052604090205460ff16156110875760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b6064820152608401610753565b5f611091826118e8565b5f838152600960205260409020805460ff1916600117905590506110b3611ada565b6040805163ffffffff8316815242602082015283917fa945e51eec50ab98c161376f0db4cf2aeba3ec92755fe2fcd388bdbbb80ff196910160405180910390a2506110fe6001600555565b50565b5f815f0361113057507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b8160010361115f57507f4fc2fe9184a25f44ce8ddb5f32671fcae6d9c85ed710c199acef16ad16b29911919050565b8160020361118e57507f0d826a474f851c563052d929ef0daa70f658aba9ba084f51f6e3483c13c0e59a919050565b816003036111bd57507ff7761a16b5e4c0120e4c5704b910dbe18ff6162a9668ed1c2c4efde7c4f15806919050565b816004036111ec57507fce9ce09a0ab259d6d14ca3dcd74e6c6b9e7d9074bff66973d4c57ccdffdb2a82919050565b8160050361121b57507f02efd44c63015ff1385344e0624867775486d05e6eb1290a24976964a598003b919050565b8160060361124a57507fc4dec5845d407ce2ac2e6824bb7857c4b138f819e5789d5d11e812db10c846cd919050565b8160070361127957507f5fbe3f20c23f3bd6ac347917fb0903433e0b9a48373412348240a5f919bfde19919050565b816008036112a857507f92d1b07e56b3da96b7917778cb657f2c513eaeeb4d1579a73b5ea316f25b7289919050565b816009036112d757507fa08add5656d6d3d0827ef909f7647981eac42aa1f51970a752f130f718f6d76a919050565b81600a0361130657507f1704c5f297590d8ec62776b0714f4f3f2234bae0524035342b0da8b8988ebd79919050565b81600b0361133557507fc5ae2bd47379c2c6d1189cfc3d057948dc6054caf845fcacd8f7affe94b11944919050565b81600c0361136457507f12a161d6d5561062f387d91ad9f0f8966c0956afdb9e8325458b9e5057b82bdb919050565b81600d0361139357507f4ade524ba596de20bbe94507a761c45251ae7a27857ceb4287d9018525b99bc5919050565b81600e036113c257507f38287ad69151fa833bf4bf8b8eb6ffb39400a38f1a7e53b473f639c8c60fd5e4919050565b81600f036113f157507f57f2ade7d711707e785451f2aba6c95872c7fe03153a98b7327b4024e8068fa3919050565b8160100361142057507fb1982e0d1b0de46a88d8b17941472e41a86d3ff64571ed8e0ca72d58633547fc919050565b8160110361144f57507fb7c60f8670af15eb32b4ee36727179bc085a3dde03d5f9a1486664ba576b30a6919050565b8160120361147e57507f5ff905c5c659a926b132ef3665a3de5d5a859c1d479e68851085bfc0348c5331919050565b816013036114ad57507fb4dfa78b912e98c9f7eb42d71eb537a02bf3173d44a2eb887a48b3972072dd8e919050565b816014036114dc57507f60919a16a2eb8b91cfb8ba1e5b4c155a76a14c217b5403edbd563f34e508ecdc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b6044820152606401610753565b5f600382820361152c57505f92915050565b61155c6040518060400160405280600f81526020016e69734b6e6f776e4c31526f6f74203160881b81525061174d565b600c545f9061157b90600160201b90046001600160a01b031683610642565b80602001905181019061158e9190611f4e565b905061159f8163ffffffff16611790565b6115cf6040518060400160405280600f81526020016e34b9a5b737bbb72618a937b7ba101960891b81525061174d565b805b6116016040518060400160405280600f81526020016e69734b6e6f776e4c31526f6f74203360881b81525061174d565b6116108163ffffffff16610e81565b850361162157506001949350505050565b8063ffffffff165f036116325750601e5b8061163c81611f30565b9150508163ffffffff168163ffffffff16036115d1576116826040518060400160405280600f81526020016e69734b6e6f776e4c31526f6f74203560881b81525061174d565b505f949350505050565b6116946117d5565b60405173be34cc4cebf526887ec2c0035463dd26b3e7fea4905f90829047908381818185875af1925050503d805f81146116e9576040519150601f19603f3d011682016040523d82523d5f602084013e6116ee565b606091505b505090508061173f5760405162461bcd60e51b815260206004820181905260248201527f7061796d656e7420746f2061646d696e20646964206e6f7420676f20746872756044820152606401610753565b505061174b6001600555565b565b6110fe816040516024016117619190611bff565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052611b51565b6110fe816040516024016117a691815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f82c50f160e01b179052611b51565b6002600554036117f857604051633ee5aeb560e01b815260040160405180910390fd5b6002600555565b6110fe8160405160240161181591815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166327b7cf8560e01b179052611b51565b34156118b05760405162461bcd60e51b815260206004820152603560248201527f4d6573736167652076616c756520697320737570706f73656420746f206265206044820152747a65726f20666f722045544820696e7374616e636560581b6064820152608401610753565b6006546040516001600160a01b0383169180156108fc02915f818181858888f193505050501580156118e4573d5f803e3d5ffd5b5050565b6004545f8054909163ffffffff600160201b90910481169161190c91166002612080565b63ffffffff168163ffffffff160361197f5760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b6064820152608401610753565b80835f80805b5f5463ffffffff9081169082161015611a39576119a36002866120b0565b63ffffffff165f036119df578392506119c18163ffffffff16611101565b63ffffffff82165f90815260026020526040902085905591506119fa565b63ffffffff81165f9081526002602052604090205492508391505b604080516020808201869052818301859052825180830384018152606090920190925280519101209350611a2f6002866120d2565b9450600101611985565b506004545f90601e90611a539063ffffffff1660016120f4565b611a5d91906120b0565b6004805463ffffffff191663ffffffff8381169182179092555f908152600360209081526040808320899055928a1682526001908190529190208a9055909150611aa89087906120f4565b6004805463ffffffff92909216600160201b0267ffffffff000000001990921691909117905550939695505050505050565b600654341461174b5760405162461bcd60e51b815260206004820152603860248201527f506c656173652073656e6420606d697844656e6f6d696e6174696f6e6020455460448201527f4820616c6f6e672077697468207472616e73616374696f6e00000000000000006064820152608401610753565b6110fe815f6a636f6e736f6c652e6c6f6790505f80835160208501845afa505050565b6001600160a01b03811681146110fe575f80fd5b5f8060408385031215611b99575f80fd5b8235611ba481611b74565b946020939093013593505050565b5f5b83811015611bcc578181015183820152602001611bb4565b50505f910152565b5f8151808452611beb816020860160208601611bb2565b601f01601f19169290920160200192915050565b602081525f610a306020830184611bd4565b5f805f8060808587031215611c24575f80fd5b84359350602085013592506040850135611c3d81611b74565b9396929550929360600135925050565b5f815180845260208085019450602084015f5b83811015611c7c57815187529582019590820190600101611c60565b509495945050505050565b602081525f610a306020830184611c4d565b5f60208284031215611ca9575f80fd5b5035919050565b604081525f611cc26040830185611c4d565b8281036020840152611cd48185611c4d565b95945050505050565b5f8060408385031215611cee575f80fd5b50508035926020909101359150565b5f805f805f8060a08789031215611d12575f80fd5b8635955060208701359450604087013593506060870135611d3281611b74565b9250608087013567ffffffffffffffff80821115611d4e575f80fd5b818901915089601f830112611d61575f80fd5b813581811115611d6f575f80fd5b8a6020828501011115611d80575f80fd5b6020830194508093505050509295509295509295565b5f8060208385031215611da7575f80fd5b823567ffffffffffffffff80821115611dbe575f80fd5b818501915085601f830112611dd1575f80fd5b813581811115611ddf575f80fd5b8660208260051b8501011115611df3575f80fd5b60209290920196919550909350505050565b602080825282518282018190525f9190848201906040850190845b81811015611e3e578351151583529284019291840191600101611e20565b50909695505050505050565b5f8251611e5b818460208701611bb2565b9190910192915050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b8181038181111561076157610761611e8d565b5f60208284031215611ec4575f80fd5b5051919050565b60408152826040820152828460608301375f606084830101525f601f19601f85011682016060838203016020840152611f076060820185611c4d565b9695505050505050565b5f60208284031215611f21575f80fd5b81518015158114610a30575f80fd5b5f63ffffffff821680611f4557611f45611e8d565b5f190192915050565b5f60208284031215611f5e575f80fd5b815163ffffffff81168114610a30575f80fd5b600181815b80851115611fae578163ffffffff04821115611f9457611f94611e8d565b80851615611fa157918102915b93841c9390800290611f76565b509250929050565b5f82611fc457506001610761565b81611fd057505f610761565b8160018114611fe65760028114611ff057612021565b6001915050610761565b60ff84111561200157612001611e8d565b6001841b915063ffffffff82111561201b5761201b611e8d565b50610761565b5060208310610133831016604e8410600b8410161715612058575081810a63ffffffff81111561205357612053611e8d565b610761565b6120628383611f71565b8063ffffffff0482111561207857612078611e8d565b029392505050565b5f63ffffffff612094818516828516611fb6565b949350505050565b634e487b7160e01b5f52601260045260245ffd5b5f63ffffffff808416806120c6576120c661209c565b92169190910692915050565b5f63ffffffff808416806120e8576120e861209c565b92169190910492915050565b63ffffffff81811683821601908082111561101057611010611e8d56fe636861696e496420696e20666f726d6174746564207075626c696320696e707574733aa2646970667358221220e9cbecd8378a12b027e660c9d4c7eb4774f9ae7e332839df8f5a48f6b7a29f9064736f6c63430008170033";

type ToadnadoL2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ToadnadoL2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ToadnadoL2__factory extends ContractFactory {
  constructor(...args: ToadnadoL2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _l1Address: AddressLike,
    _verifier: AddressLike,
    _denomination: BigNumberish,
    _merkleTreeHeight: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _l1Address,
      _verifier,
      _denomination,
      _merkleTreeHeight,
      overrides || {}
    );
  }
  override deploy(
    _l1Address: AddressLike,
    _verifier: AddressLike,
    _denomination: BigNumberish,
    _merkleTreeHeight: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _l1Address,
      _verifier,
      _denomination,
      _merkleTreeHeight,
      overrides || {}
    ) as Promise<
      ToadnadoL2 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ToadnadoL2__factory {
    return super.connect(runner) as ToadnadoL2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ToadnadoL2Interface {
    return new Interface(_abi) as ToadnadoL2Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): ToadnadoL2 {
    return new Contract(address, _abi, runner) as unknown as ToadnadoL2;
  }
}
