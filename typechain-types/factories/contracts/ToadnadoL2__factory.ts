/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ToadnadoL2,
  ToadnadoL2Interface,
} from "../../contracts/ToadnadoL2";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_l1Address",
        type: "address",
      },
      {
        internalType: "address",
        name: "_verifier",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_denomination",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "_merkleTreeHeight",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    inputs: [],
    name: "VerificationFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "commitment",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "leafIndex",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "nullifier",
        type: "bytes32",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
  {
    inputs: [],
    name: "ROOT_HISTORY_SIZE",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "adminWithdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "commitmentLeafs",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "commitments",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "commitmentsTreeRoots",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentRootIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "denomination",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_commitment",
        type: "bytes32",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "filledSubtrees",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "key",
        type: "uint256",
      },
    ],
    name: "getL1Root",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_left",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_right",
        type: "bytes32",
      },
    ],
    name: "hashLeftRight",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
    ],
    name: "isKnownL1Root",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
    ],
    name: "isKnownL2Root",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_nullifierHash",
        type: "bytes32",
      },
    ],
    name: "isSpent",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_nullifierHashes",
        type: "bytes32[]",
      },
    ],
    name: "isSpentArray",
    outputs: [
      {
        internalType: "bool[]",
        name: "spent",
        type: "bool[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "l1Address",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "levels",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "nullifiers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "l1_contract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "slot",
        type: "uint256",
      },
    ],
    name: "readSingleSlot",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "roots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_l1root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_l2root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_nullifier",
        type: "bytes32",
      },
      {
        internalType: "address payable",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "snarkProof",
        type: "bytes",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "zeros",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052600480546001600160401b031916905534801562000020575f80fd5b506040516200210938038062002109833981016040819052620000439162000694565b828282805f8163ffffffff1611620000ae5760405162461bcd60e51b815260206004820152602360248201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60448201526265726f60e81b60648201526084015b60405180910390fd5b60148163ffffffff1610620001065760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e20323000006044820152606401620000a5565b5f805463ffffffff191663ffffffff83161781555b8163ffffffff168163ffffffff1610156200015f576200014163ffffffff82166200023f565b63ffffffff82165f908152600260205260409020556001016200011b565b506200017163ffffffff82166200023f565b5f805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff5550600160055581620001fe5760405162461bcd60e51b815260206004820152602560248201527f64656e6f6d696e6174696f6e2073686f756c6420626520677265617465722074604482015264068616e20360dc1b6064820152608401620000a5565b50600780546001600160a01b039384166001600160a01b031991821617909155600691909155600b80549690921695169490941790935550620006ee915050565b5f815f036200026f57507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b816001036200029f57507f4fc2fe9184a25f44ce8ddb5f32671fcae6d9c85ed710c199acef16ad16b29911919050565b81600203620002cf57507f0d826a474f851c563052d929ef0daa70f658aba9ba084f51f6e3483c13c0e59a919050565b81600303620002ff57507ff7761a16b5e4c0120e4c5704b910dbe18ff6162a9668ed1c2c4efde7c4f15806919050565b816004036200032f57507fce9ce09a0ab259d6d14ca3dcd74e6c6b9e7d9074bff66973d4c57ccdffdb2a82919050565b816005036200035f57507f02efd44c63015ff1385344e0624867775486d05e6eb1290a24976964a598003b919050565b816006036200038f57507fc4dec5845d407ce2ac2e6824bb7857c4b138f819e5789d5d11e812db10c846cd919050565b81600703620003bf57507f5fbe3f20c23f3bd6ac347917fb0903433e0b9a48373412348240a5f919bfde19919050565b81600803620003ef57507f92d1b07e56b3da96b7917778cb657f2c513eaeeb4d1579a73b5ea316f25b7289919050565b816009036200041f57507fa08add5656d6d3d0827ef909f7647981eac42aa1f51970a752f130f718f6d76a919050565b81600a036200044f57507f1704c5f297590d8ec62776b0714f4f3f2234bae0524035342b0da8b8988ebd79919050565b81600b036200047f57507fc5ae2bd47379c2c6d1189cfc3d057948dc6054caf845fcacd8f7affe94b11944919050565b81600c03620004af57507f12a161d6d5561062f387d91ad9f0f8966c0956afdb9e8325458b9e5057b82bdb919050565b81600d03620004df57507f4ade524ba596de20bbe94507a761c45251ae7a27857ceb4287d9018525b99bc5919050565b81600e036200050f57507f38287ad69151fa833bf4bf8b8eb6ffb39400a38f1a7e53b473f639c8c60fd5e4919050565b81600f036200053f57507f57f2ade7d711707e785451f2aba6c95872c7fe03153a98b7327b4024e8068fa3919050565b816010036200056f57507fb1982e0d1b0de46a88d8b17941472e41a86d3ff64571ed8e0ca72d58633547fc919050565b816011036200059f57507fb7c60f8670af15eb32b4ee36727179bc085a3dde03d5f9a1486664ba576b30a6919050565b81601203620005cf57507f5ff905c5c659a926b132ef3665a3de5d5a859c1d479e68851085bfc0348c5331919050565b81601303620005ff57507fb4dfa78b912e98c9f7eb42d71eb537a02bf3173d44a2eb887a48b3972072dd8e919050565b816014036200062f57507f60919a16a2eb8b91cfb8ba1e5b4c155a76a14c217b5403edbd563f34e508ecdc919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152606401620000a5565b919050565b80516001600160a01b038116811462000678575f80fd5b5f805f8060808587031215620006a8575f80fd5b620006b3856200067d565b9350620006c3602086016200067d565b925060408501519150606085015163ffffffff81168114620006e3575f80fd5b939692955090935050565b611a0d80620006fc5f395ff3fe608060405260043610610164575f3560e01c80639fa12d0b116100cd578063d0f94b5511610087578063e993d00b11610062578063e993d00b146104ba578063f178e47c146104d9578063f18d20be14610504578063fc7e9c6f1461050c575f80fd5b8063d0f94b551461044e578063e5285dcc1461046d578063e82955881461049b575f80fd5b80639fa12d0b14610389578063b214faa5146103b5578063ba70f757146103c8578063c2b40ae4146103f0578063c2eeeebd1461041b578063cd87a3b41461043a575f80fd5b806350241a3f1161011e57806350241a3f146102cb5780635032d4f1146102e0578063839df945146102ff5780638bca6d161461032d57806390eeb02b146103425780639ec441541461035e575f80fd5b8063102b72e71461016f5780632997e86b146101a45780632b7ac3f3146101e25780633591d78d1461021957806338bf282e146102475780634ecf518b1461029b575f80fd5b3661016b57005b5f80fd5b34801561017a575f80fd5b5061018e6101893660046114d5565b610530565b60405161019b9190611521565b60405180910390f35b3480156101af575f80fd5b506101d26101be366004611553565b60086020525f908152604090205460ff1681565b604051901515815260200161019b565b3480156101ed575f80fd5b50600754610201906001600160a01b031681565b6040516001600160a01b03909116815260200161019b565b348015610224575f80fd5b506101d2610233366004611553565b600a6020525f908152604090205460ff1681565b348015610252575f80fd5b5061028d61026136600461156a565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b60405190815260200161019b565b3480156102a6575f80fd5b505f546102b69063ffffffff1681565b60405163ffffffff909116815260200161019b565b6102de6102d936600461158a565b610618565b005b3480156102eb575f80fd5b5061028d6102fa366004611553565b610867565b34801561030a575f80fd5b506101d2610319366004611553565b60096020525f908152604090205460ff1681565b348015610338575f80fd5b5061028d60065481565b34801561034d575f80fd5b506004546102b69063ffffffff1681565b348015610369575f80fd5b5061028d610378366004611553565b60016020525f908152604090205481565b348015610394575f80fd5b506103a86103a3366004611623565b6108c9565b60405161019b9190611692565b6102de6103c3366004611553565b610983565b3480156103d3575f80fd5b5060045463ffffffff165f9081526003602052604090205461028d565b3480156103fb575f80fd5b5061028d61040a366004611553565b60036020525f908152604090205481565b348015610426575f80fd5b50600b54610201906001600160a01b031681565b348015610445575f80fd5b506102b6601e81565b348015610459575f80fd5b506101d2610468366004611553565b610a75565b348015610478575f80fd5b506101d2610487366004611553565b5f9081526008602052604090205460ff1690565b3480156104a6575f80fd5b5061028d6104b5366004611553565b610a7f565b3480156104c5575f80fd5b506101d26104d4366004611553565b610e98565b3480156104e4575f80fd5b5061028d6104f3366004611553565b60026020525f908152604090205481565b6102de610f30565b348015610517575f80fd5b506004546102b690640100000000900463ffffffff1681565b604051606083811b6bffffffffffffffffffffffff1916602083015260348201839052905f9060540160405160208183030381529060405290505f60606101016001600160a01b03168360405161058791906116d7565b5f60405180830381855afa9150503d805f81146105bf576040519150601f19603f3d011682016040523d82523d5f602084013e6105c4565b606091505b5090925090508161060d5760405162461bcd60e51b815260206004820152600e60248201526d130c54d313d0510819985a5b195960921b60448201526064015b60405180910390fd5b925050505b92915050565b610620610ff1565b5f8481526008602052604090205460ff161561067e5760405162461bcd60e51b815260206004820152601f60248201527f546865206e6f746520686173206265656e20616c7265616479207370656e74006044820152606401610604565b61068785610a75565b6106d35760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f742066696e6420796f7572206c32206d65726b6c6520726f6f74006044820152606401610604565b6106dc86610e98565b6107285760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f742066696e6420796f7572206c31206d65726b6c6520726f6f74006044820152606401610604565b60408051602080820189905281830188905282518083038401815260609092019092528051910120465f61075e8388888561101b565b600754604051633a94343960e21b81529192506001600160a01b03169063ea50d0e490610793908890889086906004016116f2565b602060405180830381865afa1580156107ae573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107d2919061176a565b6107ef5760405163439cc0cd60e01b815260040160405180910390fd5b5f878152600860205260409020805460ff1916600117905561081086611139565b604080516001600160a01b0388168152602081018990527f0ce490531f6c8ae2f1ff174643bc8b7ed5e52987ab50dc1e8f33655d2cd8c90b910160405180910390a150505061085f6001600555565b505050505050565b600b546040515f916108b6916001600160a01b0390911690610899908590600390602001918252602082015260400190565b604051602081830303815290604052805190602001205f1c610530565b8060200190518101906106129190611790565b60608167ffffffffffffffff8111156108e4576108e46117a7565b60405190808252806020026020018201604052801561090d578160200160208202803683370190505b5090505f5b8281101561097c5761094a84848381811061092f5761092f6117bb565b905060200201355f9081526008602052604090205460ff1690565b15610974576001828281518110610963576109636117bb565b911515602092830291909101909101525b600101610912565b5092915050565b61098b610ff1565b5f8181526009602052604090205460ff16156109fb5760405162461bcd60e51b815260206004820152602960248201527f54686520636f6d6d69746d656e742068617320616c7265616479206265656e206044820152681cdd589b5a5d1d195960ba1b6064820152608401610604565b5f610a05826111dd565b5f838152600960205260409020805460ff191660011790559050610a276113d1565b6040805163ffffffff8316815242602082015283917fa945e51eec50ab98c161376f0db4cf2aeba3ec92755fe2fcd388bdbbb80ff196910160405180910390a250610a726001600555565b50565b5f61061282611448565b5f815f03610aae57507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b81600103610add57507f4fc2fe9184a25f44ce8ddb5f32671fcae6d9c85ed710c199acef16ad16b29911919050565b81600203610b0c57507f0d826a474f851c563052d929ef0daa70f658aba9ba084f51f6e3483c13c0e59a919050565b81600303610b3b57507ff7761a16b5e4c0120e4c5704b910dbe18ff6162a9668ed1c2c4efde7c4f15806919050565b81600403610b6a57507fce9ce09a0ab259d6d14ca3dcd74e6c6b9e7d9074bff66973d4c57ccdffdb2a82919050565b81600503610b9957507f02efd44c63015ff1385344e0624867775486d05e6eb1290a24976964a598003b919050565b81600603610bc857507fc4dec5845d407ce2ac2e6824bb7857c4b138f819e5789d5d11e812db10c846cd919050565b81600703610bf757507f5fbe3f20c23f3bd6ac347917fb0903433e0b9a48373412348240a5f919bfde19919050565b81600803610c2657507f92d1b07e56b3da96b7917778cb657f2c513eaeeb4d1579a73b5ea316f25b7289919050565b81600903610c5557507fa08add5656d6d3d0827ef909f7647981eac42aa1f51970a752f130f718f6d76a919050565b81600a03610c8457507f1704c5f297590d8ec62776b0714f4f3f2234bae0524035342b0da8b8988ebd79919050565b81600b03610cb357507fc5ae2bd47379c2c6d1189cfc3d057948dc6054caf845fcacd8f7affe94b11944919050565b81600c03610ce257507f12a161d6d5561062f387d91ad9f0f8966c0956afdb9e8325458b9e5057b82bdb919050565b81600d03610d1157507f4ade524ba596de20bbe94507a761c45251ae7a27857ceb4287d9018525b99bc5919050565b81600e03610d4057507f38287ad69151fa833bf4bf8b8eb6ffb39400a38f1a7e53b473f639c8c60fd5e4919050565b81600f03610d6f57507f57f2ade7d711707e785451f2aba6c95872c7fe03153a98b7327b4024e8068fa3919050565b81601003610d9e57507fb1982e0d1b0de46a88d8b17941472e41a86d3ff64571ed8e0ca72d58633547fc919050565b81601103610dcd57507fb7c60f8670af15eb32b4ee36727179bc085a3dde03d5f9a1486664ba576b30a6919050565b81601203610dfc57507f5ff905c5c659a926b132ef3665a3de5d5a859c1d479e68851085bfc0348c5331919050565b81601303610e2b57507fb4dfa78b912e98c9f7eb42d71eb537a02bf3173d44a2eb887a48b3972072dd8e919050565b81601403610e5a57507f60919a16a2eb8b91cfb8ba1e5b4c155a76a14c217b5403edbd563f34e508ecdc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b6044820152606401610604565b5f818103610ea757505f919050565b600b545f90610ec0906001600160a01b03166003610530565b806020019051810190610ed391906117cf565b9050805b610ee68163ffffffff16610867565b8403610ef6575060019392505050565b8063ffffffff165f03610f075750601e5b80610f1181611806565b9150508163ffffffff168163ffffffff1603610ed757505f9392505050565b610f38610ff1565b60405173be34cc4cebf526887ec2c0035463dd26b3e7fea4905f90829047908381818185875af1925050503d805f8114610f8d576040519150601f19603f3d011682016040523d82523d5f602084013e610f92565b606091505b5050905080610fe35760405162461bcd60e51b815260206004820181905260248201527f7061796d656e7420746f2061646d696e20646964206e6f7420676f20746872756044820152606401610604565b5050610fef6001600555565b565b60026005540361101457604051633ee5aeb560e01b815260040160405180910390fd5b6002600555565b60408051604280825261086082019092526060915f919060208201610840803683370190505090505f5b602081101561108b57868160208110611060576110606117bb565b835191901a90839083908110611078576110786117bb565b6020908102919091010152600101611045565b5060205b60408110156110df57856110a4602083611824565b602081106110b4576110b46117bb565b835191901a908390839081106110cc576110cc6117bb565b602090810291909101015260010161108f565b5080516001600160a01b03851690819083906040908110611102576111026117bb565b602002602001018181525050835f1b82604181518110611124576111246117bb565b60209081029190910101525095945050505050565b34156111a55760405162461bcd60e51b815260206004820152603560248201527f4d6573736167652076616c756520697320737570706f73656420746f206265206044820152747a65726f20666f722045544820696e7374616e636560581b6064820152608401610604565b6006546040516001600160a01b0383169180156108fc02915f818181858888f193505050501580156111d9573d5f803e3d5ffd5b5050565b6004545f8054909163ffffffff64010000000090910481169161120291166002611946565b63ffffffff168163ffffffff16036112755760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b6064820152608401610604565b80835f80805b5f5463ffffffff908116908216101561132f57611299600286611976565b63ffffffff165f036112d5578392506112b78163ffffffff16610a7f565b63ffffffff82165f90815260026020526040902085905591506112f0565b63ffffffff81165f9081526002602052604090205492508391505b604080516020808201869052818301859052825180830384018152606090920190925280519101209350611325600286611998565b945060010161127b565b506004545f90601e906113499063ffffffff1660016119ba565b6113539190611976565b6004805463ffffffff191663ffffffff8381169182179092555f908152600360209081526040808320899055928a1682526001908190529190208a905590915061139e9087906119ba565b6004805463ffffffff929092166401000000000267ffffffff000000001990921691909117905550939695505050505050565b6006543414610fef5760405162461bcd60e51b815260206004820152603860248201527f506c656173652073656e6420606d697844656e6f6d696e6174696f6e6020455460448201527f4820616c6f6e672077697468207472616e73616374696f6e00000000000000006064820152608401610604565b5f81810361145757505f919050565b60045463ffffffff16805b63ffffffff81165f908152600360205260409020548403611487575060019392505050565b8063ffffffff165f036114985750601e5b806114a281611806565b9150508163ffffffff168163ffffffff160361146257505f9392505050565b6001600160a01b0381168114610a72575f80fd5b5f80604083850312156114e6575f80fd5b82356114f1816114c1565b946020939093013593505050565b5f5b83811015611519578181015183820152602001611501565b50505f910152565b602081525f825180602084015261153f8160408501602087016114ff565b601f01601f19169190910160400192915050565b5f60208284031215611563575f80fd5b5035919050565b5f806040838503121561157b575f80fd5b50508035926020909101359150565b5f805f805f8060a0878903121561159f575f80fd5b86359550602087013594506040870135935060608701356115bf816114c1565b9250608087013567ffffffffffffffff808211156115db575f80fd5b818901915089601f8301126115ee575f80fd5b8135818111156115fc575f80fd5b8a602082850101111561160d575f80fd5b6020830194508093505050509295509295509295565b5f8060208385031215611634575f80fd5b823567ffffffffffffffff8082111561164b575f80fd5b818501915085601f83011261165e575f80fd5b81358181111561166c575f80fd5b8660208260051b8501011115611680575f80fd5b60209290920196919550909350505050565b602080825282518282018190525f9190848201906040850190845b818110156116cb5783511515835292840192918401916001016116ad565b50909695505050505050565b5f82516116e88184602087016114ff565b9190910192915050565b60408152826040820152828460608301375f606084830101525f601f19601f850116820160608101602060608584030160208601528186518084526080850191506020880194505f93505b8084101561175d578451825293820193600193909301929082019061173d565b5098975050505050505050565b5f6020828403121561177a575f80fd5b81518015158114611789575f80fd5b9392505050565b5f602082840312156117a0575f80fd5b5051919050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f602082840312156117df575f80fd5b815163ffffffff81168114611789575f80fd5b634e487b7160e01b5f52601160045260245ffd5b5f63ffffffff82168061181b5761181b6117f2565b5f190192915050565b81810381811115610612576106126117f2565b600181815b80851115611874578163ffffffff0482111561185a5761185a6117f2565b8085161561186757918102915b93841c939080029061183c565b509250929050565b5f8261188a57506001610612565b8161189657505f610612565b81600181146118ac57600281146118b6576118e7565b6001915050610612565b60ff8411156118c7576118c76117f2565b6001841b915063ffffffff8211156118e1576118e16117f2565b50610612565b5060208310610133831016604e8410600b841016171561191e575081810a63ffffffff811115611919576119196117f2565b610612565b6119288383611837565b8063ffffffff0482111561193e5761193e6117f2565b029392505050565b5f63ffffffff61195a81851682851661187c565b949350505050565b634e487b7160e01b5f52601260045260245ffd5b5f63ffffffff8084168061198c5761198c611962565b92169190910692915050565b5f63ffffffff808416806119ae576119ae611962565b92169190910492915050565b63ffffffff81811683821601908082111561097c5761097c6117f256fea26469706673582212209fb0634942f758a9bb9e01526310e451d9c42751f5f9da823456ccf52664e7cf64736f6c63430008170033";

type ToadnadoL2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ToadnadoL2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ToadnadoL2__factory extends ContractFactory {
  constructor(...args: ToadnadoL2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _l1Address: AddressLike,
    _verifier: AddressLike,
    _denomination: BigNumberish,
    _merkleTreeHeight: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _l1Address,
      _verifier,
      _denomination,
      _merkleTreeHeight,
      overrides || {}
    );
  }
  override deploy(
    _l1Address: AddressLike,
    _verifier: AddressLike,
    _denomination: BigNumberish,
    _merkleTreeHeight: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _l1Address,
      _verifier,
      _denomination,
      _merkleTreeHeight,
      overrides || {}
    ) as Promise<
      ToadnadoL2 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ToadnadoL2__factory {
    return super.connect(runner) as ToadnadoL2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ToadnadoL2Interface {
    return new Interface(_abi) as ToadnadoL2Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): ToadnadoL2 {
    return new Contract(address, _abi, runner) as unknown as ToadnadoL2;
  }
}
