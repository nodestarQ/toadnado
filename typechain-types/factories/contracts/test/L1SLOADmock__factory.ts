/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  L1SLOADmock,
  L1SLOADmockInterface,
} from "../../../contracts/test/L1SLOADmock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "decodeInput",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "mockedSlots",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_l1ContactAddr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_slot",
        type: "uint256",
      },
    ],
    name: "readMockedSlot",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "l1ContactAddr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "slot",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "setMockedSlot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b506106bd8061001d5f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c80632e065ae514610117578063540811ed1461014e578063734756331461016e5780637693efb614610183575b5f3660605f8061005a8585610196565b6001600160a01b0382165f90815260208181526040808320848452909152902080549294509092509061008c9061035d565b80601f01602080910402602001604051908101604052809291908181526020018280546100b89061035d565b80156101035780601f106100da57610100808354040283529160200191610103565b820191905f5260205f20905b8154815290600101906020018083116100e657829003601f168201915b505050505092505050915050805190602001f35b61012a6101253660046103d3565b610196565b604080516001600160a01b0390931683526020830191909152015b60405180910390f35b61016161015c36600461042d565b6101d5565b6040516101459190610455565b61018161017c3660046104a1565b61028c565b005b61016161019136600461042d565b6102be565b5f806101a560148285876104f7565b6101ae9161051e565b60601c6101bf6034601486886104f7565b6101c891610553565b90925090505b9250929050565b6001600160a01b0382165f908152602081815260408083208484529091528120805460609291906102059061035d565b80601f01602080910402602001604051908101604052809291908181526020018280546102319061035d565b801561027c5780601f106102535761010080835404028352916020019161027c565b820191905f5260205f20905b81548152906001019060200180831161025f57829003601f168201915b5093955050505050505b92915050565b6001600160a01b0384165f9081526020818152604080832086845290915290206102b78284836105cd565b5050505050565b5f602081815292815260408082209093529081522080546102de9061035d565b80601f016020809104026020016040519081016040528092919081815260200182805461030a9061035d565b80156103555780601f1061032c57610100808354040283529160200191610355565b820191905f5260205f20905b81548152906001019060200180831161033857829003601f168201915b505050505081565b600181811c9082168061037157607f821691505b60208210810361038f57634e487b7160e01b5f52602260045260245ffd5b50919050565b5f8083601f8401126103a5575f80fd5b50813567ffffffffffffffff8111156103bc575f80fd5b6020830191508360208285010111156101ce575f80fd5b5f80602083850312156103e4575f80fd5b823567ffffffffffffffff8111156103fa575f80fd5b61040685828601610395565b90969095509350505050565b80356001600160a01b0381168114610428575f80fd5b919050565b5f806040838503121561043e575f80fd5b61044783610412565b946020939093013593505050565b5f602080835283518060208501525f5b8181101561048157858101830151858201604001528201610465565b505f604082860101526040601f19601f8301168501019250505092915050565b5f805f80606085870312156104b4575f80fd5b6104bd85610412565b935060208501359250604085013567ffffffffffffffff8111156104df575f80fd5b6104eb87828801610395565b95989497509550505050565b5f8085851115610505575f80fd5b83861115610511575f80fd5b5050820193919092039150565b6bffffffffffffffffffffffff19813581811691601485101561054b5780818660140360031b1b83161692505b505092915050565b80356020831015610286575f19602084900360031b1b1692915050565b634e487b7160e01b5f52604160045260245ffd5b601f8211156105c857805f5260205f20601f840160051c810160208510156105a95750805b601f840160051c820191505b818110156102b7575f81556001016105b5565b505050565b67ffffffffffffffff8311156105e5576105e5610570565b6105f9836105f3835461035d565b83610584565b5f601f84116001811461062a575f85156106135750838201355b5f19600387901b1c1916600186901b1783556102b7565b5f83815260208120601f198716915b828110156106595786850135825560209485019460019092019101610639565b5086821015610675575f1960f88860031b161c19848701351681555b505060018560011b018355505050505056fea264697066735822122071562603020f02958c9eb3dc6862ab4845dd9891adde8253ac1584e8e66a804964736f6c63430008170033";

type L1SLOADmockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: L1SLOADmockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class L1SLOADmock__factory extends ContractFactory {
  constructor(...args: L1SLOADmockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      L1SLOADmock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): L1SLOADmock__factory {
    return super.connect(runner) as L1SLOADmock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): L1SLOADmockInterface {
    return new Interface(_abi) as L1SLOADmockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): L1SLOADmock {
    return new Contract(address, _abi, runner) as unknown as L1SLOADmock;
  }
}
