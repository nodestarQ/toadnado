/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ScrollMessengerMock {
  export type MessageStruct = {
    _to: AddressLike;
    _value: BigNumberish;
    _message: BytesLike;
    _gasLimit: BigNumberish;
  };

  export type MessageStructOutput = [
    _to: string,
    _value: bigint,
    _message: string,
    _gasLimit: bigint
  ] & { _to: string; _value: bigint; _message: string; _gasLimit: bigint };

  export type L2MessageProofStruct = {
    batchIndex: BigNumberish;
    merkleProof: BytesLike;
  };

  export type L2MessageProofStructOutput = [
    batchIndex: bigint,
    merkleProof: string
  ] & { batchIndex: bigint; merkleProof: string };
}

export interface ScrollMessengerMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getLastMessage"
      | "otherMessenger"
      | "relayMessageWithProof"
      | "sendMessage"
      | "setOtherMessenger"
      | "xDomainMessageSender"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "FailedRelayedMessage" | "RelayedMessage"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getLastMessage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "otherMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayMessageWithProof",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      ScrollMessengerMock.L2MessageProofStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOtherMessenger",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "xDomainMessageSender",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getLastMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "otherMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayMessageWithProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOtherMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xDomainMessageSender",
    data: BytesLike
  ): Result;
}

export namespace FailedRelayedMessageEvent {
  export type InputTuple = [messageHash: BytesLike];
  export type OutputTuple = [messageHash: string];
  export interface OutputObject {
    messageHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayedMessageEvent {
  export type InputTuple = [messageHash: BytesLike];
  export type OutputTuple = [messageHash: string];
  export interface OutputObject {
    messageHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ScrollMessengerMock extends BaseContract {
  connect(runner?: ContractRunner | null): ScrollMessengerMock;
  waitForDeployment(): Promise<this>;

  interface: ScrollMessengerMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getLastMessage: TypedContractMethod<
    [],
    [ScrollMessengerMock.MessageStructOutput],
    "view"
  >;

  otherMessenger: TypedContractMethod<[], [string], "view">;

  relayMessageWithProof: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _nonce: BigNumberish,
      _message: BytesLike,
      _proof: ScrollMessengerMock.L2MessageProofStruct
    ],
    [void],
    "nonpayable"
  >;

  sendMessage: TypedContractMethod<
    [
      _to: AddressLike,
      _value: BigNumberish,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      _refundAddress: AddressLike
    ],
    [void],
    "payable"
  >;

  setOtherMessenger: TypedContractMethod<
    [_otherMessenger: AddressLike],
    [void],
    "nonpayable"
  >;

  xDomainMessageSender: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getLastMessage"
  ): TypedContractMethod<[], [ScrollMessengerMock.MessageStructOutput], "view">;
  getFunction(
    nameOrSignature: "otherMessenger"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "relayMessageWithProof"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _nonce: BigNumberish,
      _message: BytesLike,
      _proof: ScrollMessengerMock.L2MessageProofStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _value: BigNumberish,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      _refundAddress: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setOtherMessenger"
  ): TypedContractMethod<[_otherMessenger: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "xDomainMessageSender"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "FailedRelayedMessage"
  ): TypedContractEvent<
    FailedRelayedMessageEvent.InputTuple,
    FailedRelayedMessageEvent.OutputTuple,
    FailedRelayedMessageEvent.OutputObject
  >;
  getEvent(
    key: "RelayedMessage"
  ): TypedContractEvent<
    RelayedMessageEvent.InputTuple,
    RelayedMessageEvent.OutputTuple,
    RelayedMessageEvent.OutputObject
  >;

  filters: {
    "FailedRelayedMessage(bytes32)": TypedContractEvent<
      FailedRelayedMessageEvent.InputTuple,
      FailedRelayedMessageEvent.OutputTuple,
      FailedRelayedMessageEvent.OutputObject
    >;
    FailedRelayedMessage: TypedContractEvent<
      FailedRelayedMessageEvent.InputTuple,
      FailedRelayedMessageEvent.OutputTuple,
      FailedRelayedMessageEvent.OutputObject
    >;

    "RelayedMessage(bytes32)": TypedContractEvent<
      RelayedMessageEvent.InputTuple,
      RelayedMessageEvent.OutputTuple,
      RelayedMessageEvent.OutputObject
    >;
    RelayedMessage: TypedContractEvent<
      RelayedMessageEvent.InputTuple,
      RelayedMessageEvent.OutputTuple,
      RelayedMessageEvent.OutputObject
    >;
  };
}
