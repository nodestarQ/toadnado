/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ToadnadoL2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "ROOT_HISTORY_SIZE"
      | "bridgeDebt"
      | "bridgeEth"
      | "commitmentLeafs"
      | "commitments"
      | "commitmentsTreeRoots"
      | "currentRootIndex"
      | "denomination"
      | "deposit"
      | "ethPendingWithdrawals"
      | "filledSubtrees"
      | "getL1Root"
      | "getLastRoot"
      | "hashLeftRight"
      | "isKnownL1Root"
      | "isKnownL2Root"
      | "isSpent"
      | "isSpentArray"
      | "l1ToadnadoAddress"
      | "l2ScrollMessenger"
      | "levels"
      | "nextIndex"
      | "nullifiers"
      | "readSingleSlot"
      | "recieveBridgedEth"
      | "requestEthBridge"
      | "roots"
      | "sendLatestRootToL1"
      | "verifier"
      | "withdraw"
      | "withdrawPending"
      | "zeros"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Deposit" | "PendingWithdrawal" | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ROOT_HISTORY_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeEth",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitmentLeafs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commitmentsTreeRoots",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRootIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "denomination",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deposit", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "ethPendingWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "filledSubtrees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getL1Root",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashLeftRight",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownL1Root",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownL2Root",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isSpent", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "isSpentArray",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "l1ToadnadoAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2ScrollMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "levels", values?: undefined): string;
  encodeFunctionData(functionFragment: "nextIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nullifiers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "readSingleSlot",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recieveBridgedEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestEthBridge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "roots", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "sendLatestRootToL1",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BytesLike, BytesLike, BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPending",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "zeros", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "ROOT_HISTORY_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridgeDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridgeEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitmentLeafs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitmentsTreeRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRootIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "denomination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethPendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filledSubtrees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getL1Root", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashLeftRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownL1Root",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownL2Root",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSpent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSpentArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1ToadnadoAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2ScrollMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "levels", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nullifiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readSingleSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recieveBridgedEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestEthBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendLatestRootToL1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zeros", data: BytesLike): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    commitment: BytesLike,
    leafIndex: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    commitment: string,
    leafIndex: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    commitment: string;
    leafIndex: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PendingWithdrawalEvent {
  export type InputTuple = [recipient: AddressLike, nullifier: BytesLike];
  export type OutputTuple = [recipient: string, nullifier: string];
  export interface OutputObject {
    recipient: string;
    nullifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [recipient: AddressLike, nullifier: BytesLike];
  export type OutputTuple = [recipient: string, nullifier: string];
  export interface OutputObject {
    recipient: string;
    nullifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ToadnadoL2 extends BaseContract {
  connect(runner?: ContractRunner | null): ToadnadoL2;
  waitForDeployment(): Promise<this>;

  interface: ToadnadoL2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ROOT_HISTORY_SIZE: TypedContractMethod<[], [bigint], "view">;

  bridgeDebt: TypedContractMethod<[], [bigint], "view">;

  bridgeEth: TypedContractMethod<
    [_amount: BigNumberish, gasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  commitmentLeafs: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  commitments: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  commitmentsTreeRoots: TypedContractMethod<
    [arg0: BytesLike],
    [boolean],
    "view"
  >;

  currentRootIndex: TypedContractMethod<[], [bigint], "view">;

  denomination: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<[_commitment: BytesLike], [void], "payable">;

  ethPendingWithdrawals: TypedContractMethod<[], [bigint], "view">;

  filledSubtrees: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getL1Root: TypedContractMethod<[key: BigNumberish], [string], "view">;

  getLastRoot: TypedContractMethod<[], [string], "view">;

  hashLeftRight: TypedContractMethod<
    [_left: BytesLike, _right: BytesLike],
    [string],
    "view"
  >;

  isKnownL1Root: TypedContractMethod<[_root: BytesLike], [boolean], "view">;

  isKnownL2Root: TypedContractMethod<[_root: BytesLike], [boolean], "view">;

  isSpent: TypedContractMethod<[_nullifierHash: BytesLike], [boolean], "view">;

  isSpentArray: TypedContractMethod<
    [_nullifierHashes: BytesLike[]],
    [boolean[]],
    "view"
  >;

  l1ToadnadoAddress: TypedContractMethod<[], [string], "view">;

  l2ScrollMessenger: TypedContractMethod<[], [string], "view">;

  levels: TypedContractMethod<[], [bigint], "view">;

  nextIndex: TypedContractMethod<[], [bigint], "view">;

  nullifiers: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  readSingleSlot: TypedContractMethod<
    [l1_contract: AddressLike, slot: BigNumberish],
    [string],
    "view"
  >;

  recieveBridgedEth: TypedContractMethod<[], [void], "payable">;

  requestEthBridge: TypedContractMethod<
    [gasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  roots: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  sendLatestRootToL1: TypedContractMethod<
    [gasLimit: BigNumberish],
    [void],
    "payable"
  >;

  verifier: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [
      _l1root: BytesLike,
      _l2root: BytesLike,
      _nullifier: BytesLike,
      _recipient: AddressLike,
      snarkProof: BytesLike
    ],
    [void],
    "payable"
  >;

  withdrawPending: TypedContractMethod<
    [_nullifier: BytesLike],
    [void],
    "nonpayable"
  >;

  zeros: TypedContractMethod<[i: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ROOT_HISTORY_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bridgeDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bridgeEth"
  ): TypedContractMethod<
    [_amount: BigNumberish, gasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "commitmentLeafs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "commitments"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "commitmentsTreeRoots"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "currentRootIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "denomination"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[_commitment: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "ethPendingWithdrawals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "filledSubtrees"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getL1Root"
  ): TypedContractMethod<[key: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getLastRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hashLeftRight"
  ): TypedContractMethod<
    [_left: BytesLike, _right: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isKnownL1Root"
  ): TypedContractMethod<[_root: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isKnownL2Root"
  ): TypedContractMethod<[_root: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSpent"
  ): TypedContractMethod<[_nullifierHash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSpentArray"
  ): TypedContractMethod<[_nullifierHashes: BytesLike[]], [boolean[]], "view">;
  getFunction(
    nameOrSignature: "l1ToadnadoAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "l2ScrollMessenger"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "levels"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nullifiers"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "readSingleSlot"
  ): TypedContractMethod<
    [l1_contract: AddressLike, slot: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "recieveBridgedEth"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "requestEthBridge"
  ): TypedContractMethod<[gasLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "roots"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "sendLatestRootToL1"
  ): TypedContractMethod<[gasLimit: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      _l1root: BytesLike,
      _l2root: BytesLike,
      _nullifier: BytesLike,
      _recipient: AddressLike,
      snarkProof: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdrawPending"
  ): TypedContractMethod<[_nullifier: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "zeros"
  ): TypedContractMethod<[i: BigNumberish], [string], "view">;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "PendingWithdrawal"
  ): TypedContractEvent<
    PendingWithdrawalEvent.InputTuple,
    PendingWithdrawalEvent.OutputTuple,
    PendingWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "Deposit(bytes32,uint32,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "PendingWithdrawal(address,bytes32)": TypedContractEvent<
      PendingWithdrawalEvent.InputTuple,
      PendingWithdrawalEvent.OutputTuple,
      PendingWithdrawalEvent.OutputObject
    >;
    PendingWithdrawal: TypedContractEvent<
      PendingWithdrawalEvent.InputTuple,
      PendingWithdrawalEvent.OutputTuple,
      PendingWithdrawalEvent.OutputObject
    >;

    "Withdrawal(address,bytes32)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
