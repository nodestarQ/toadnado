{"noir_version":"0.30.0+af57471035e4fa7eaffa71693219df6d029dbcde","hash":15373103558038742843,"abi":{"parameters":[{"name":"root","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"nullifierHash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"recipient","type":{"kind":"field"},"visibility":"public"},{"name":"nullifierHashPreImage","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"secret","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"hash_path","type":{"kind":"array","length":5,"type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},"visibility":"private"},{"name":"hash_path_bools","type":{"kind":"array","length":5,"type":{"kind":"boolean"}},"visibility":"private"}],"param_witnesses":{"hash_path":[{"start":129,"end":289}],"hash_path_bools":[{"start":289,"end":294}],"nullifierHash":[{"start":32,"end":64}],"nullifierHashPreImage":[{"start":65,"end":97}],"recipient":[{"start":64,"end":65}],"root":[{"start":0,"end":32}],"secret":[{"start":97,"end":129}]},"return_type":null,"return_witnesses":[],"error_types":{}},"bytecode":"","debug_symbols":"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EqMkRsk2SrZRso2SbZRso2QbJdso2UbJNkq2UWINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HDJ/95wuXvwt9c/v3393bs3H+4OPn/sl9vvP759f/vl4ce///Svj9w99x8=","file_map":{"30":{"source":"mod hash;\nmod aes128;\nmod array;\nmod slice;\nmod merkle;\nmod schnorr;\nmod ecdsa_secp256k1;\nmod ecdsa_secp256r1;\nmod eddsa;\nmod embedded_curve_ops;\nmod sha256;\nmod sha512;\nmod field;\nmod ec;\nmod unsafe;\nmod collections;\nmod compat;\nmod convert;\nmod option;\nmod string;\nmod test;\nmod cmp;\nmod ops;\nmod default;\nmod prelude;\nmod uint128;\nmod bigint;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained pub fn print<T>(input: T) {\n    print_oracle(false, input);\n}\n\nunconstrained pub fn println<T>(input: T) {\n    print_oracle(true, input);\n}\n\n#[foreign(recursive_aggregation)]\npub fn verify_proof<N>(verification_key: [Field], proof: [Field], public_inputs: [Field], key_hash: Field) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y))\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n","path":"std/lib.nr"},"46":{"source":"use dep::std;\n\nglobal TREE_DEPTH = 5;\n\nfn hashKeccak2(first: [u8;32], second: [u8;32]) -> [u8;32] {\n    let mut preImage: [u8;64] = [0;64];\n\n    for i in 0 .. 32 {\n        preImage[i] = first[i];\n        \n    }\n    for i in 0 .. 32 {\n        preImage[i+32] = second[i];\n        \n    }\n    std::hash::keccak256(preImage,64)\n}\n\n// used merkle from noir std as example\n// https://github.com/noir-lang/noir/blob/49e1b0c0d45565f3e87469b77f2fef0c283f6ea1/noir_stdlib/src/merkle.nr#L5\n// Returns the merkle root of the tree from the provided leaf, its hashpath, domains, using a poseidon2 with the domain argument\nfn compute_merkle_root<N>(leaf_hash: [u8;32], hash_path: [ [u8;32]; N], hash_path_bools: [bool; N]) -> [u8;32] {\n    let n = hash_path.len();\n    let mut current = leaf_hash;\n    for i in 0..n {\n        let hash_right = hash_path_bools[i];\n        if hash_right {\n            current = hashKeccak2(hash_path[i], current);\n        } else {\n            current = hashKeccak2(current, hash_path[i]);\n        };\n        \n\n    }\n    current\n}\n\nfn commitmentHasher(nullifierHashPreImage: [u8;32], secret: [u8;32]) -> ([u8;32],[u8;32]) {\n    let computedNullifierHash:  [u8;32] = std::hash::keccak256(nullifierHashPreImage,32);\n    let commitmentHash:  [u8;32] =hashKeccak2(nullifierHashPreImage,secret );\n    (commitmentHash,computedNullifierHash)\n}\n\n\nfn main(\n    root:pub [u8;32],\n    nullifierHash:pub [u8;32], \n    recipient:pub Field, \n    //relayer:pub Field,\n    // fee:pub Field,\n    // refund:pub Field,\n    //chainId:pub Field,\n    \n    nullifierHashPreImage: [u8;32],\n    secret: [u8;32],\n    hash_path: [[u8;32];TREE_DEPTH],\n    hash_path_bools:  [bool; TREE_DEPTH],\n    ) {\n    // to make sure these are set and cant change\n    assert(recipient != 0x0);\n    //assert(chainId != 0x0);\n\n    let (commitmentHash, computedNullifierHash) = commitmentHasher(nullifierHashPreImage, secret);\n    let computed_root = compute_merkle_root(commitmentHash, hash_path, hash_path_bools);\n    println(\"computedNullifierHash\");\n    println(computedNullifierHash);\n    println(nullifierHash);\n\n    assert(computedNullifierHash == nullifierHash);\n    assert(computed_root == root);\n}\n\n#[test]\nfn test_simple_merkle_proof() {\n    \n    let hash_path = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20],[79,194,254,145,132,162,95,68,206,141,219,95,50,103,31,202,230,217,200,94,215,16,193,153,172,239,22,173,22,178,153,17],[13,130,106,71,79,133,28,86,48,82,217,41,239,13,170,112,246,88,171,169,186,8,79,81,246,227,72,60,19,192,229,154],[247,118,26,22,181,228,192,18,14,76,87,4,185,16,219,225,143,246,22,42,150,104,237,28,44,78,253,231,196,241,88,6],[206,156,224,154,10,178,89,214,209,76,163,220,215,78,108,107,158,125,144,116,191,246,105,115,212,197,124,205,255,219,42,130],[2,239,212,76,99,1,95,241,56,83,68,224,98,72,103,119,84,134,208,94,110,177,41,10,36,151,105,100,165,152,0,59],[196,222,197,132,93,64,124,226,172,46,104,36,187,120,87,196,177,56,248,25,229,120,157,93,17,232,18,219,16,200,70,205]];\n    let leaf = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0];\n    let real_root = [218,130,62,147,72,0,144,187,88,40,196,24,198,243,240,151,71,112,62,173,29,168,116,56,198,174,231,247,158,128,233,2];\n    let hash_path_bools = [true,false,false,false,false,false,false];\n    let root = compute_merkle_root(leaf,hash_path, hash_path_bools);\n    \n    // println(\"root\");\n    // println(root);\n    assert(root == real_root);\n}\n#[test]\nfn test_commitment_hasher() {\n    //[...crypto.getRandomValues(new Uint8Array(Array(32)))]\n    let nullifierHashPreImage = [214,255,124,83,114,187,12,181,14,111,72,234,5,249,135,238,141,197,183,240,45,224,153,161,158,69,230,216,57,122,75,68];\n    let secret = [230,146,124,238,124,120,160,205,44,185,238,166,139,63,96,30,207,97,7,85,117,207,245,240,45,97,6,100,229,191,245,27];\n\n    let (commitmentHash, computedNullifierHash) = commitmentHasher(nullifierHashPreImage, secret);\n    println(\"commitmentHash\");\n    println(commitmentHash);\n    println(\"computedNullifierHash\");\n    println(computedNullifierHash);\n\n    // ethers.hexlify(new Uint8Array(computedNullifierHash))\n}\n\n\n// #[test]\n// fn test_main() {\n//     let root: [u8;32] = [ 150, 118, 38, 213, 240, 193, 20, 230, 195, 6, 204, 49, 66, 22, 159, 101, 13, 63, 97, 83, 212,55, 151, 198, 234, 109, 135, 144, 239, 240, 13, 109 ];\n//     let nullifierHash: [u8;32] = [ 206, 109, 123, 82, 130, 189, 154, 54, 97, 174, 6, 31, 238, 209, 219, 218, 78, 82, 171, 7, 59, 31, 146, 133, 190, 110, 21, 93, 156, 56, 212, 236 ];\n//     let recipient: Field = 0x000000000000000000000000794464c8c91a2be4addabfdb82b6db7b1bb1dbc7;\n\n//     let nullifierHashPreImage: [u8;32] =    [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20 ];\n//     let secret: [u8;32] =                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20 ];\n//     let hash_path: [[u8;32];TREE_DEPTH] = [\n//       [ 47, 229, 76, 96, 211, 172, 171, 243, 52, 58, 53, 182, 235, 161, 93, 180, 130, 27, 52, 15, 118,\n//         231, 65, 226, 36, 150, 133, 237, 72, 153, 175, 108 ], [ 79, 194, 254, 145, 132, 162, 95, 68,\n//         206, 141, 219, 95, 50, 103, 31, 202, 230, 217, 200, 94, 215, 16, 193, 153, 172, 239, 22, 173,\n//         22, 178, 153, 17 ], [ 13, 130, 106, 71, 79, 133, 28, 86, 48, 82, 217, 41, 239, 13, 170, 112,\n//         246, 88, 171, 169, 186, 8, 79, 81, 246, 227, 72, 60, 19, 192, 229, 154 ], [ 247, 118, 26, 22,\n//         181, 228, 192, 18, 14, 76, 87, 4, 185, 16, 219, 225, 143, 246, 22, 42, 150, 104, 237, 28, 44,\n//         78, 253, 231, 196, 241, 88, 6 ], [ 206, 156, 224, 154, 10, 178, 89, 214, 209, 76, 163, 220,\n//         215, 78, 108, 107, 158, 125, 144, 116, 191, 246, 105, 115, 212, 197, 124, 205, 255, 219, 42,\n//         130 ], [ 2, 239, 212, 76, 99, 1, 95, 241, 56, 83, 68, 224, 98, 72, 103, 119, 84, 134, 208, 94,\n//         110, 177, 41, 10, 36, 151, 105, 100, 165, 152, 0, 59 ], [ 196, 222, 197, 132, 93, 64, 124, 226,\n//         172, 46, 104, 36, 187, 120, 87, 196, 177, 56, 248, 25, 229, 120, 157, 93, 17, 232, 18, 219, 16,\n//         200, 70, 205 ]\n//     ];\n//     let hash_path_bools:  [bool; TREE_DEPTH] =  [ false, false, false, false, false, false, false ];\n\n//     main(\n//     root,\n//     nullifierHash, \n//     recipient, \n\n//     nullifierHashPreImage,\n//     secret,\n//     hash_path,\n//     hash_path_bools,\n//     );\n\n// }","path":"/home/jimjim/toadnado/circuits/prover/src/main.nr"}},"names":["main"]}