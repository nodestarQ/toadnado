{"noir_version":"0.30.0+af57471035e4fa7eaffa71693219df6d029dbcde","hash":16480228863985836411,"abi":{"parameters":[{"name":"root","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"nullifierHash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"recipient","type":{"kind":"field"},"visibility":"public"},{"name":"chainId","type":{"kind":"field"},"visibility":"public"},{"name":"nullifierHashPreImage","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"secret","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"hash_path","type":{"kind":"array","length":5,"type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},"visibility":"private"},{"name":"hash_path_bools","type":{"kind":"array","length":5,"type":{"kind":"boolean"}},"visibility":"private"},{"name":"root_other_layer","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"root_other_is_right","type":{"kind":"boolean"},"visibility":"private"}],"param_witnesses":{"chainId":[{"start":65,"end":66}],"hash_path":[{"start":130,"end":290}],"hash_path_bools":[{"start":290,"end":295}],"nullifierHash":[{"start":32,"end":64}],"nullifierHashPreImage":[{"start":66,"end":98}],"recipient":[{"start":64,"end":65}],"root":[{"start":0,"end":32}],"root_other_is_right":[{"start":327,"end":328}],"root_other_layer":[{"start":295,"end":327}],"secret":[{"start":98,"end":130}]},"return_type":null,"return_witnesses":[],"error_types":{}},"bytecode":"","debug_symbols":"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","file_map":{"22":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"30":{"source":"mod hash;\nmod aes128;\nmod array;\nmod slice;\nmod merkle;\nmod schnorr;\nmod ecdsa_secp256k1;\nmod ecdsa_secp256r1;\nmod eddsa;\nmod embedded_curve_ops;\nmod sha256;\nmod sha512;\nmod field;\nmod ec;\nmod unsafe;\nmod collections;\nmod compat;\nmod convert;\nmod option;\nmod string;\nmod test;\nmod cmp;\nmod ops;\nmod default;\nmod prelude;\nmod uint128;\nmod bigint;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained pub fn print<T>(input: T) {\n    print_oracle(false, input);\n}\n\nunconstrained pub fn println<T>(input: T) {\n    print_oracle(true, input);\n}\n\n#[foreign(recursive_aggregation)]\npub fn verify_proof<N>(verification_key: [Field], proof: [Field], public_inputs: [Field], key_hash: Field) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y))\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n","path":"std/lib.nr"},"40":{"source":"impl<T> [T] {\n    #[builtin(array_len)]\n    pub fn len(self) -> u64 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u64, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u64) -> (Self, T) {}\n\n    // Append each element of the `other` slice to the end of `self`.\n    // This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<N>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::unsafe::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n}\n","path":"std/slice.nr"},"46":{"source":"use dep::std;\n\nglobal TREE_DEPTH = 5;\n\n\nfn joinArrays<I,J>(arrays: [[u8;J];I]) -> [u8] {\n    //TODO find out if doing without slice is faster?\n    let mut resSlice: [u8] = [];\n    for index in 0 .. arrays.len() {\n        resSlice = resSlice.append(arrays[index].as_slice());\n        \n    } \n    resSlice\n}\n\nfn hashKeccak2(first: [u8;32], second: [u8;32]) -> [u8;32] {\n    let mut preImage: [u8;64] = [0;64];\n\n    for i in 0 .. 32 {\n        preImage[i] = first[i];\n        \n    }\n    for i in 0 .. 32 {\n        preImage[i+32] = second[i];\n        \n    }\n    std::hash::keccak256(preImage,64)\n}\n\n// used merkle from noir std as example\n// https://github.com/noir-lang/noir/blob/49e1b0c0d45565f3e87469b77f2fef0c283f6ea1/noir_stdlib/src/merkle.nr#L5\n// Returns the merkle root of the tree from the provided leaf hash, \n// its hashpath and hash_path_bools to indicate wether to hash left or right\nfn compute_merkle_root<N>(\n    leaf_hash: [u8;32], \n    hash_path: [ [u8;32]; N], \n    hash_path_bools: [bool; N]\n    ) -> [u8;32] {\n\n    let n = hash_path.len();\n    let mut current = leaf_hash;\n    for i in 0..n {\n        let hash_right = hash_path_bools[i];\n        if hash_right {\n            current = hashKeccak2(hash_path[i], current);\n        } else {\n            current = hashKeccak2(current, hash_path[i]);\n        };\n    }\n    current\n}\n\nfn commitmentHasher(nullifierHashPreImage: [u8;32], secret: [u8;32], chainId: Field) -> ([u8;32],[u8;32]) {\n    let computedNullifierHash: [u8;32] = std::hash::keccak256(nullifierHashPreImage,32);\n    let preImage: [u8;32*3] = joinArrays([nullifierHashPreImage,secret, chainId.to_be_bytes(32).as_array()]).as_array();\n    let commitmentHash: [u8;32] = std::hash::keccak256(preImage, 32*3);\n    (commitmentHash,computedNullifierHash)\n}\n\n\nfn main(\n    // public\n    root:pub [u8;32],\n    nullifierHash:pub [u8;32], \n    recipient:pub Field, \n    chainId: pub Field,\n\n    // private\n    nullifierHashPreImage: [u8;32],\n    secret: [u8;32],\n    hash_path: [[u8;32];TREE_DEPTH],\n    hash_path_bools:  [bool; TREE_DEPTH],\n    root_other_layer: [u8;32],\n    root_other_is_right: bool // left = L1, right = L2\n\n    ) {\n    // to make sure these are set and cant change\n    assert(recipient != 0x0, \"recipient shouldnt be 0\");\n\n    let (commitmentHash, computedNullifierHash) = commitmentHasher(nullifierHashPreImage, secret, chainId);\n\n    let computed_root = compute_merkle_root(commitmentHash, hash_path, hash_path_bools);\n\n    let (root_L1, root_L2) = if root_other_is_right {\n            (computed_root, root_other_layer)\n        } else {\n            (root_other_layer, computed_root)\n        };\n    let computed_meta_root = hashKeccak2(root_L1, root_L2);\n\n\n\n    println(\"computedNullifierHash\");\n    println(computedNullifierHash);\n    println(nullifierHash);\n\n    assert(computedNullifierHash == nullifierHash, \"nullifier hash doesnt match\");\n    assert(computed_meta_root == root, \"meta_root doesnt match\");\n}\n\n#[test]\nfn test_simple_merkle_proof() {\n    \n    let hash_path = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20],[79,194,254,145,132,162,95,68,206,141,219,95,50,103,31,202,230,217,200,94,215,16,193,153,172,239,22,173,22,178,153,17],[13,130,106,71,79,133,28,86,48,82,217,41,239,13,170,112,246,88,171,169,186,8,79,81,246,227,72,60,19,192,229,154],[247,118,26,22,181,228,192,18,14,76,87,4,185,16,219,225,143,246,22,42,150,104,237,28,44,78,253,231,196,241,88,6],[206,156,224,154,10,178,89,214,209,76,163,220,215,78,108,107,158,125,144,116,191,246,105,115,212,197,124,205,255,219,42,130],[2,239,212,76,99,1,95,241,56,83,68,224,98,72,103,119,84,134,208,94,110,177,41,10,36,151,105,100,165,152,0,59],[196,222,197,132,93,64,124,226,172,46,104,36,187,120,87,196,177,56,248,25,229,120,157,93,17,232,18,219,16,200,70,205]];\n    let leaf = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0];\n    let real_root = [218,130,62,147,72,0,144,187,88,40,196,24,198,243,240,151,71,112,62,173,29,168,116,56,198,174,231,247,158,128,233,2];\n    let hash_path_bools = [true,false,false,false,false,false,false];\n    let root = compute_merkle_root(leaf,hash_path, hash_path_bools);\n    \n    // println(\"root\");\n    // println(root);\n    assert(root == real_root);\n}\n#[test]\nfn test_commitment_hasher() {\n    //[...crypto.getRandomValues(new Uint8Array(Array(32)))]\n    let nullifierHashPreImage = [214,255,124,83,114,187,12,181,14,111,72,234,5,249,135,238,141,197,183,240,45,224,153,161,158,69,230,216,57,122,75,68];\n    let secret = [230,146,124,238,124,120,160,205,44,185,238,166,139,63,96,30,207,97,7,85,117,207,245,240,45,97,6,100,229,191,245,27];\n    let chainId = 2227728; //L1SLOAD aka L2 \n    let (commitmentHash, computedNullifierHash) = commitmentHasher(nullifierHashPreImage, secret, chainId);\n    println(\"commitmentHash\");\n    println(commitmentHash);\n    println(\"computedNullifierHash\");\n    println(computedNullifierHash);\n\n    // ethers.hexlify(new Uint8Array(computedNullifierHash))\n}\n\n\n#[test]\nfn test_main() {\n    let root: [u8;32] = [ 126, 110, 203, 158, 212, 147, 148, 125, 239, 239, 254, 80, 140, 158, 181, 10, 64, 30, 96,99, 86, 26, 58, 188, 197, 12, 248, 200, 203, 120, 238, 155 ];\n    let nullifierHash: [u8;32] = [ 206, 109, 123, 82, 130, 189, 154, 54, 97, 174, 6, 31, 238, 209, 219, 218, 78, 82, 171, 7, 59, 31, 146, 133, 190, 110, 21, 93, 156, 56, 212, 236 ];\n    let recipient: Field = 0x000000000000000000000000794464c8c91a2be4addabfdb82b6db7b1bb1dbc7;\n    let chainId = 2227728; //L1SLOAD aka L2 \n\n    let nullifierHashPreImage: [u8;32] =    [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20 ];\n    let secret: [u8;32] =                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20 ];\n    let hash_path: [[u8;32];TREE_DEPTH] = [\n      [ 47, 229, 76, 96, 211, 172, 171, 243, 52, 58, 53, 182, 235, 161, 93, 180, 130, 27, 52, 15, 118,\n        231, 65, 226, 36, 150, 133, 237, 72, 153, 175, 108 ], [ 79, 194, 254, 145, 132, 162, 95, 68,\n        206, 141, 219, 95, 50, 103, 31, 202, 230, 217, 200, 94, 215, 16, 193, 153, 172, 239, 22, 173,\n        22, 178, 153, 17 ], [ 13, 130, 106, 71, 79, 133, 28, 86, 48, 82, 217, 41, 239, 13, 170, 112,\n        246, 88, 171, 169, 186, 8, 79, 81, 246, 227, 72, 60, 19, 192, 229, 154 ], [ 247, 118, 26, 22,\n        181, 228, 192, 18, 14, 76, 87, 4, 185, 16, 219, 225, 143, 246, 22, 42, 150, 104, 237, 28, 44,\n        78, 253, 231, 196, 241, 88, 6 ], [ 206, 156, 224, 154, 10, 178, 89, 214, 209, 76, 163, 220,\n        215, 78, 108, 107, 158, 125, 144, 116, 191, 246, 105, 115, 212, 197, 124, 205, 255, 219, 42,\n        130 ]\n    ];\n    let hash_path_bools:  [bool; TREE_DEPTH] =  [ false, false, false, false, false ];\n\n    let root_other_layer =  [ 2, 239, 212, 76, 99, 1, 95, 241, 56, 83, 68, 224, 98, 72, 103, 119, 84, 134, 208, 94, 110, 177, 41, 10, 36, 151, 105, 100, 165, 152, 0, 59 ];\n\n    let root_other_is_right = true;\n    main(\n        root,\n        nullifierHash, \n        recipient, \n        chainId,\n\n        nullifierHashPreImage,\n        secret,\n        hash_path,\n        hash_path_bools,\n        root_other_layer,\n        root_other_is_right\n    );\n\n}","path":"/home/jimjim/Desktop/toadnado/circuits/prover/src/main.nr"}},"names":["main"]}