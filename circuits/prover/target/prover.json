{"noir_version":"0.30.0+af57471035e4fa7eaffa71693219df6d029dbcde","hash":1299685570711375644,"abi":{"parameters":[{"name":"root","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"nullifierHash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"recipient","type":{"kind":"field"},"visibility":"public"},{"name":"nullifierHashPreImage","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"secret","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"hash_path","type":{"kind":"array","length":5,"type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},"visibility":"private"},{"name":"hash_path_bools","type":{"kind":"array","length":5,"type":{"kind":"boolean"}},"visibility":"private"},{"name":"root_other_layer","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"root_other_is_right","type":{"kind":"boolean"},"visibility":"private"}],"param_witnesses":{"hash_path":[{"start":129,"end":289}],"hash_path_bools":[{"start":289,"end":294}],"nullifierHash":[{"start":32,"end":64}],"nullifierHashPreImage":[{"start":65,"end":97}],"recipient":[{"start":64,"end":65}],"root":[{"start":0,"end":32}],"root_other_is_right":[{"start":326,"end":327}],"root_other_layer":[{"start":294,"end":326}],"secret":[{"start":97,"end":129}]},"return_type":null,"return_witnesses":[],"error_types":{}},"bytecode":"","debug_symbols":"zdzRilzXEUbhd5lrYbpqn1P/Pn6VEIJsy0FgJGPJgWD87hklGiWgjkM+YTx3HqvL3WqW1O31w/rl4btX3/z817+8fvP923cPX//pl4cf3n778v3rt28ef/rlYfX881+++/Hlmw8/v3v/8qf3D1/XXvPi4dWb7z7849m/vnj4/vUPrx6+PubXP794PIocbTm64Gjd7h5d/z669vrPoxefP7j27enB3fPZM9Tv/gz95c/Q008PXrfjtx/c+/r42NWfv6HrOb2Y496L6dvt6aZv6d/+7+9rfXzs1fmSl3J+8Uu5Zj+9Lbdb+2s57/9J+SPelvP+n78/5G1JPxta0s+HlqueDS1XPx9aqurZ4PL4Wp4PLzXX/Tem99Nvtlfli57g/u/28QvKpyc49+dXc/9qjk9X1/H51d3vL33cnj6R+7j3Cvf9q0+fgn3kznNdcJXbja6KrpquFl0ddHXS1dBV6GrTFbFRxEYRG0VsFLFRxEYRG0VsFLFRxEYRG01sNLHRxEYTG01sNLHRxEYTG01sNLHxX76WH/vpO0Kfdeeq6KrpatHVQVcnXQ1dha42XV1ydRAbB7FxEBsHsXEQGwexcRAbB7FxEBsHsXESGyexcRIbJ7FxEhsnsXESGyexcRIbJ7ExxMYIG4//h/jV/Q++x++bH+8e/878dLZun87uf/L977Oys7azZWeHnZ12NnYWO9t2ZpQcRslhlBxGyWGUHEbJYZQcRslhlBxGyWGUnEbJaZScRslplJxGyWmUnEbJaZScRslplIxRMkbJGCVjlIxRMkbJGCVjlIxRMkZJjJIYJTFKYpTEKIlREqMkRkmMkhgl2yjZRsk2SrZRso2SbZRso2QbJdso2UbJZZRcRslllFxGyWWUXEbJZZRcRslllFxGSd1ueFd413i38O7AuxPvBu+CdxvvkJdCXgp5KeSlkJdCXgp5KeSlkJdCXgp5aeSlkZdGXhp5aeSlkZdGXhp5aeQFzWyhmi10s4VyttDOFurZQj9bKGgLDW2hoi10tIWSttDSFmraQk9bKGoLTW2hqi10tYWyttDWFuraQl9bKGwLjW2hsi10toXSttDaFmrbQm9bKG4LzW2hui10t4XyttDeFurbQn9bKHALDW6Rwh3bGse2xrGtcWxrHNsax7bGsa1xbGsc2xrHtsaxrXFsaxzbGse2xrGtcWxrHNsax7bGsa1xbGsc2xrHtsaxrXFsaxzbGse2xrGtcWxrHNsax7bG+Qo/qGKUxCiJURKjJEZJjJIYJTFKYpRso2QbJdso2UbJNkq2UbKNkm2UbKNkGyWXUXIZJZdRchkll1FyGSWXUXIZJZdRchkltjUObo2DW+Pg1ji4NQ5ujYNb4+DWOLg1Dm6Ng1vj4NY4uDUObo2DW+Pg1ji4NQ5ujYNb4+DWOLg1Dm6Ng1vj4NY4uDUObo2DW+Pg1ji4NQ5ujYNb4+DWOLg1Dm6Ng1vj4NY4uDUObo2DW+Pg1ji4NQ5ujYNb4+DWOLg1Dm6Ng1vj4NY4uDUObo2DW+Pg1ji4NQ5ujYNb4+DWOLg1Dm6Ng1vj4NY4uDUObo2DW+Pg1ji4NQ5ujYNb4+DWOLg1Dm6Nw1tjocMtlLiFFrdQ4xZ63EKRW2hyC1VuocstlLmFNrdQ5xb63EKhW2h0C5VuodMtlLqFVrdQ6xZ63UKxW2h2C9VuodstlLuFdrdQ7xb63Ua/2+h3G/1uo99t9LuNfrfR7zb63Ua/2+h3G/1uo99t9LuNfrfR7zb63Ua/2+h3G/1uo99t9LuNfrfR7zb63Ua/2+h3G/1uo99t9LuNfrfR7zb63Ua/2+h3G/1uo99t9LuNfrfR7zb63Ua/2+h3G/1uo99t9LuNfrfR7zb63Ua/2+h3G/1uo99t9LuNfrfR7zb63Ua/2+h3G/1uo99t9LuNfrfR7zb63Ua/2+h3G/1uo99t9LuNfrfR7zb63Ua/2+h3G/1uo99t9LuNfrfR7zb63Ua/2+h3G/1uo99t9LuNfrfR7zb63Ua/2+h3G/1uo99t9LuNfrfR7zb63Ua/2+h3G/1uo99d6HcX+t2Ffneh313odxf63YV+d6HfXeh3F/rdhX53od9d6HcX+t2Ffneh313odxf63YV+d6HfXeh3F/rdhX53od9d6HcX+t2Ffneh313odxf63YV+d6HfXeh3F/rdhX53od9d6HcX+t2Ffneh313odxf63YV+d6HfXeh3F/rdhX53od9d6HcX+t2Ffneh313odxf63YV+d6HfXeh3F/rdhX53kd+NNVxiDZdYwyXWcIk1XGINl1jDJdZwiTVcYg2XWMMl1nCJNVxiDZdYwyXWcIk1XGINl1jDJV/h3yVjlIxRMkbJGCVjlIxRMkbJGCVjlIxREqMkRkmMkhglMUpilMQoiVESoyRGyTZKtlGyjZJtlGyjZBsl2yjZRsk2SrZRchkll1FyGSWXUXIZJZdRchkll1FyGSWXUWINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HAJNlyCDZdgwyXYcAk2XIINl2DDJdhwCTZcgg2XYMMl2HDJ/99wefzhby9/ev3ymx9evXs8+PBrP7/59v3rt28+/vj+7z/+61ceH/sP","file_map":{"30":{"source":"mod hash;\nmod aes128;\nmod array;\nmod slice;\nmod merkle;\nmod schnorr;\nmod ecdsa_secp256k1;\nmod ecdsa_secp256r1;\nmod eddsa;\nmod embedded_curve_ops;\nmod sha256;\nmod sha512;\nmod field;\nmod ec;\nmod unsafe;\nmod collections;\nmod compat;\nmod convert;\nmod option;\nmod string;\nmod test;\nmod cmp;\nmod ops;\nmod default;\nmod prelude;\nmod uint128;\nmod bigint;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained pub fn print<T>(input: T) {\n    print_oracle(false, input);\n}\n\nunconstrained pub fn println<T>(input: T) {\n    print_oracle(true, input);\n}\n\n#[foreign(recursive_aggregation)]\npub fn verify_proof<N>(verification_key: [Field], proof: [Field], public_inputs: [Field], key_hash: Field) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y))\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n","path":"std/lib.nr"},"46":{"source":"use dep::std;\n\nglobal TREE_DEPTH = 5;\n\nfn hashKeccak2(first: [u8;32], second: [u8;32]) -> [u8;32] {\n    let mut preImage: [u8;64] = [0;64];\n\n    for i in 0 .. 32 {\n        preImage[i] = first[i];\n        \n    }\n    for i in 0 .. 32 {\n        preImage[i+32] = second[i];\n        \n    }\n    std::hash::keccak256(preImage,64)\n}\n\n// used merkle from noir std as example\n// https://github.com/noir-lang/noir/blob/49e1b0c0d45565f3e87469b77f2fef0c283f6ea1/noir_stdlib/src/merkle.nr#L5\n// Returns the merkle root of the tree from the provided leaf, its hashpath, domains, using a poseidon2 with the domain argument\nfn compute_merkle_root<N>(leaf_hash: [u8;32], hash_path: [ [u8;32]; N], hash_path_bools: [bool; N]) -> [u8;32] {\n    let n = hash_path.len();\n    let mut current = leaf_hash;\n    for i in 0..n {\n        let hash_right = hash_path_bools[i];\n        if hash_right {\n            current = hashKeccak2(hash_path[i], current);\n        } else {\n            current = hashKeccak2(current, hash_path[i]);\n        };\n        \n\n    }\n    current\n}\n\nfn commitmentHasher(nullifierHashPreImage: [u8;32], secret: [u8;32]) -> ([u8;32],[u8;32]) {\n    let computedNullifierHash:  [u8;32] = std::hash::keccak256(nullifierHashPreImage,32);\n    let commitmentHash:  [u8;32] =hashKeccak2(nullifierHashPreImage,secret );\n    (commitmentHash,computedNullifierHash)\n}\n\n\nfn main(\n    root:pub [u8;32],\n    nullifierHash:pub [u8;32], \n    recipient:pub Field, \n    //relayer:pub Field,\n    // fee:pub Field,\n    // refund:pub Field,\n    //chainId:pub Field,\n    \n    nullifierHashPreImage: [u8;32],\n    secret: [u8;32],\n    hash_path: [[u8;32];TREE_DEPTH],\n    hash_path_bools:  [bool; TREE_DEPTH],\n    root_other_layer: [u8;32],\n    root_other_is_right: bool // left = L1, right = L2\n\n    ) {\n    // to make sure these are set and cant change\n    assert(recipient != 0x0);\n    //assert(chainId != 0x0);\n\n    let (commitmentHash, computedNullifierHash) = commitmentHasher(nullifierHashPreImage, secret);\n    let computed_root = compute_merkle_root(commitmentHash, hash_path, hash_path_bools);\n\n    let (root_left, root_right) = if root_other_is_right {\n            (computed_root, root_other_layer)\n        } else {\n            (root_other_layer, computed_root)\n        };\n    let computed_meta_root = hashKeccak2(root_left, root_right);\n\n\n\n    println(\"computedNullifierHash\");\n    println(computedNullifierHash);\n    println(nullifierHash);\n\n    assert(computedNullifierHash == nullifierHash);\n    assert(computed_meta_root == root);\n}\n\n#[test]\nfn test_simple_merkle_proof() {\n    \n    let hash_path = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20],[79,194,254,145,132,162,95,68,206,141,219,95,50,103,31,202,230,217,200,94,215,16,193,153,172,239,22,173,22,178,153,17],[13,130,106,71,79,133,28,86,48,82,217,41,239,13,170,112,246,88,171,169,186,8,79,81,246,227,72,60,19,192,229,154],[247,118,26,22,181,228,192,18,14,76,87,4,185,16,219,225,143,246,22,42,150,104,237,28,44,78,253,231,196,241,88,6],[206,156,224,154,10,178,89,214,209,76,163,220,215,78,108,107,158,125,144,116,191,246,105,115,212,197,124,205,255,219,42,130],[2,239,212,76,99,1,95,241,56,83,68,224,98,72,103,119,84,134,208,94,110,177,41,10,36,151,105,100,165,152,0,59],[196,222,197,132,93,64,124,226,172,46,104,36,187,120,87,196,177,56,248,25,229,120,157,93,17,232,18,219,16,200,70,205]];\n    let leaf = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0];\n    let real_root = [218,130,62,147,72,0,144,187,88,40,196,24,198,243,240,151,71,112,62,173,29,168,116,56,198,174,231,247,158,128,233,2];\n    let hash_path_bools = [true,false,false,false,false,false,false];\n    let root = compute_merkle_root(leaf,hash_path, hash_path_bools);\n    \n    // println(\"root\");\n    // println(root);\n    assert(root == real_root);\n}\n#[test]\nfn test_commitment_hasher() {\n    //[...crypto.getRandomValues(new Uint8Array(Array(32)))]\n    let nullifierHashPreImage = [214,255,124,83,114,187,12,181,14,111,72,234,5,249,135,238,141,197,183,240,45,224,153,161,158,69,230,216,57,122,75,68];\n    let secret = [230,146,124,238,124,120,160,205,44,185,238,166,139,63,96,30,207,97,7,85,117,207,245,240,45,97,6,100,229,191,245,27];\n\n    let (commitmentHash, computedNullifierHash) = commitmentHasher(nullifierHashPreImage, secret);\n    println(\"commitmentHash\");\n    println(commitmentHash);\n    println(\"computedNullifierHash\");\n    println(computedNullifierHash);\n\n    // ethers.hexlify(new Uint8Array(computedNullifierHash))\n}\n\n\n#[test]\nfn test_main() {\n    let root: [u8;32] = [ 126, 110, 203, 158, 212, 147, 148, 125, 239, 239, 254, 80, 140, 158, 181, 10, 64, 30, 96,99, 86, 26, 58, 188, 197, 12, 248, 200, 203, 120, 238, 155 ];\n    let nullifierHash: [u8;32] = [ 206, 109, 123, 82, 130, 189, 154, 54, 97, 174, 6, 31, 238, 209, 219, 218, 78, 82, 171, 7, 59, 31, 146, 133, 190, 110, 21, 93, 156, 56, 212, 236 ];\n    let recipient: Field = 0x000000000000000000000000794464c8c91a2be4addabfdb82b6db7b1bb1dbc7;\n\n    let nullifierHashPreImage: [u8;32] =    [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20 ];\n    let secret: [u8;32] =                   [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20 ];\n    let hash_path: [[u8;32];TREE_DEPTH] = [\n      [ 47, 229, 76, 96, 211, 172, 171, 243, 52, 58, 53, 182, 235, 161, 93, 180, 130, 27, 52, 15, 118,\n        231, 65, 226, 36, 150, 133, 237, 72, 153, 175, 108 ], [ 79, 194, 254, 145, 132, 162, 95, 68,\n        206, 141, 219, 95, 50, 103, 31, 202, 230, 217, 200, 94, 215, 16, 193, 153, 172, 239, 22, 173,\n        22, 178, 153, 17 ], [ 13, 130, 106, 71, 79, 133, 28, 86, 48, 82, 217, 41, 239, 13, 170, 112,\n        246, 88, 171, 169, 186, 8, 79, 81, 246, 227, 72, 60, 19, 192, 229, 154 ], [ 247, 118, 26, 22,\n        181, 228, 192, 18, 14, 76, 87, 4, 185, 16, 219, 225, 143, 246, 22, 42, 150, 104, 237, 28, 44,\n        78, 253, 231, 196, 241, 88, 6 ], [ 206, 156, 224, 154, 10, 178, 89, 214, 209, 76, 163, 220,\n        215, 78, 108, 107, 158, 125, 144, 116, 191, 246, 105, 115, 212, 197, 124, 205, 255, 219, 42,\n        130 ]\n    ];\n    let hash_path_bools:  [bool; TREE_DEPTH] =  [ false, false, false, false, false ];\n\n    let root_other_layer =  [ 2, 239, 212, 76, 99, 1, 95, 241, 56, 83, 68, 224, 98, 72, 103, 119, 84, 134, 208, 94, 110, 177, 41, 10, 36, 151, 105, 100, 165, 152, 0, 59 ];\n\n    let root_other_is_right = true;\n    main(\n        root,\n        nullifierHash, \n        recipient, \n\n        nullifierHashPreImage,\n        secret,\n        hash_path,\n        hash_path_bools,\n        root_other_layer,\n        root_other_is_right\n    );\n\n}","path":"/home/jimjim/toadnado/circuits/prover/src/main.nr"}},"names":["main"]}