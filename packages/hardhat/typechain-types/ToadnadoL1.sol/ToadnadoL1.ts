/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ToadnadoL1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "commitmentsTree"
      | "commitmentsTreeRoots"
      | "deposit"
      | "nullifiers"
      | "setCommitmentsTree"
      | "setVerifier"
      | "verifier"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "commitmentsTree",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitmentsTreeRoots",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "nullifiers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommitmentsTree",
    values: [BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BytesLike, BytesLike, AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "commitmentsTree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitmentsTreeRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nullifiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCommitmentsTree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface ToadnadoL1 extends BaseContract {
  connect(runner?: ContractRunner | null): ToadnadoL1;
  waitForDeployment(): Promise<this>;

  interface: ToadnadoL1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  commitmentsTree: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  commitmentsTreeRoots: TypedContractMethod<
    [arg0: BytesLike],
    [boolean],
    "view"
  >;

  deposit: TypedContractMethod<[commitment: BytesLike], [void], "nonpayable">;

  nullifiers: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  setCommitmentsTree: TypedContractMethod<
    [_commitmentsTree: BytesLike[], _root: BytesLike],
    [void],
    "nonpayable"
  >;

  setVerifier: TypedContractMethod<
    [_verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  verifier: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [
      root: BytesLike,
      nullifier: BytesLike,
      recipient: AddressLike,
      chainId: BigNumberish,
      snarkProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "commitmentsTree"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "commitmentsTreeRoots"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[commitment: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nullifiers"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setCommitmentsTree"
  ): TypedContractMethod<
    [_commitmentsTree: BytesLike[], _root: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVerifier"
  ): TypedContractMethod<[_verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      root: BytesLike,
      nullifier: BytesLike,
      recipient: AddressLike,
      chainId: BigNumberish,
      snarkProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
