/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface YourContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "greeting"
      | "owner"
      | "premium"
      | "setGreeting"
      | "totalCounter"
      | "userGreetingCounter"
      | "withdraw"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "GreetingChange"): EventFragment;

  encodeFunctionData(functionFragment: "greeting", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "premium", values?: undefined): string;
  encodeFunctionData(functionFragment: "setGreeting", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userGreetingCounter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "greeting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "premium", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGreeting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userGreetingCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace GreetingChangeEvent {
  export type InputTuple = [
    greetingSetter: AddressLike,
    newGreeting: string,
    premium: boolean,
    value: BigNumberish
  ];
  export type OutputTuple = [
    greetingSetter: string,
    newGreeting: string,
    premium: boolean,
    value: bigint
  ];
  export interface OutputObject {
    greetingSetter: string;
    newGreeting: string;
    premium: boolean;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface YourContract extends BaseContract {
  connect(runner?: ContractRunner | null): YourContract;
  waitForDeployment(): Promise<this>;

  interface: YourContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  greeting: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  premium: TypedContractMethod<[], [boolean], "view">;

  setGreeting: TypedContractMethod<[_newGreeting: string], [void], "payable">;

  totalCounter: TypedContractMethod<[], [bigint], "view">;

  userGreetingCounter: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "greeting"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "premium"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "setGreeting"
  ): TypedContractMethod<[_newGreeting: string], [void], "payable">;
  getFunction(
    nameOrSignature: "totalCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userGreetingCounter"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "GreetingChange"
  ): TypedContractEvent<
    GreetingChangeEvent.InputTuple,
    GreetingChangeEvent.OutputTuple,
    GreetingChangeEvent.OutputObject
  >;

  filters: {
    "GreetingChange(address,string,bool,uint256)": TypedContractEvent<
      GreetingChangeEvent.InputTuple,
      GreetingChangeEvent.OutputTuple,
      GreetingChangeEvent.OutputObject
    >;
    GreetingChange: TypedContractEvent<
      GreetingChangeEvent.InputTuple,
      GreetingChangeEvent.OutputTuple,
      GreetingChangeEvent.OutputObject
    >;
  };
}
