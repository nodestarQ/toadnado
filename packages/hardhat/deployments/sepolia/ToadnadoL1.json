{
  "address": "0x22872a8021C0e3D1ba7ac0026E170bd1C35471Bb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_denomination",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_merkleTreeHeight",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VerificationFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "leafIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nullifier",
          "type": "bytes32"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ROOT_HISTORY_SIZE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifier",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "_formatPublicInputs",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "commitmentLeafs",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commitmentsTreeRoots",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRootIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "denomination",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "filledSubtrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_left",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_right",
          "type": "bytes32"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "isKnownRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        }
      ],
      "name": "isSpent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_nullifierHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "isSpentArray",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "spent",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levels",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nullifiers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifier",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "snarkProof",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "zeros",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x80ad9f4eda787e33037cd208424978375764aae54bd314a665cd4d87c37177f6",
  "receipt": {
    "to": null,
    "from": "0xBe34cc4cebf526887eC2c0035463dD26b3E7FEA4",
    "contractAddress": "0x22872a8021C0e3D1ba7ac0026E170bd1C35471Bb",
    "transactionIndex": 142,
    "gasUsed": "1583584",
    "logsBloom": "0x
    "blockHash": "0xf5af2260572c2224edf97a4b6e8a11dc68f8fbf10a841a5dffb7d653f095311b",
    "transactionHash": "0x80ad9f4eda787e33037cd208424978375764aae54bd314a665cd4d87c37177f6",
    "logs": [],
    "blockNumber": 6305214,
    "cumulativeGasUsed": "22720865",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE09f87396Cd6A8Ce036529540ED9Bd3d88232C1D",
    "10000000000000000",
    5
  ],
  "numDeployments": 11,
  "solcInputHash": "18261217304d132946418e62a89adc6c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_denomination\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_merkleTreeHeight\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerificationFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"leafIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nullifier\",\"type\":\"bytes32\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROOT_HISTORY_SIZE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifier\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"_formatPublicInputs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commitmentLeafs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitmentsTreeRoots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRootIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denomination\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"filledSubtrees\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_right\",\"type\":\"bytes32\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"isKnownRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"}],\"name\":\"isSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_nullifierHashes\",\"type\":\"bytes32[]\"}],\"name\":\"isSpentArray\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"spent\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levels\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nullifiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifier\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"snarkProof\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"zeros\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"getLastRoot()\":{\"details\":\"Returns the last root\"},\"hashLeftRight(bytes32,bytes32)\":{\"details\":\"Hash 2 tree leaves, returns keccak256(_left, _right)\"},\"isKnownRoot(bytes32)\":{\"details\":\"Whether the root is present in the root history\"},\"isSpent(bytes32)\":{\"details\":\"whether a note is already spent \"},\"isSpentArray(bytes32[])\":{\"details\":\"whether an array of notes is already spent \"},\"zeros(uint256)\":{\"details\":\"provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ToadnadoL1.sol\":\"ToadnadoL1\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/MerkleTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n\\ncontract MerkleTree{\\n\\n  uint32 public levels;\\n  \\n  // merkle leafs\\n  mapping (uint256 => bytes32) public commitmentLeafs; \\n  mapping(uint256 => bytes32) public filledSubtrees;\\n  mapping(uint256 => bytes32) public roots;\\n  uint32 public constant ROOT_HISTORY_SIZE = 30;\\n  uint32 public currentRootIndex = 0;\\n  uint32 public nextIndex = 0;\\n\\n  constructor(uint32 _levels) {\\n    require(_levels > 0, \\\"_levels should be greater than zero\\\");\\n    require(_levels < 20, \\\"_levels should be less than 20\\\");\\n    levels = _levels;\\n\\n    for (uint32 i = 0; i < _levels; i++) {\\n      filledSubtrees[i] = zeros(i);\\n    }\\n\\n    roots[0] = zeros(_levels - 1);\\n  }\\n\\n  /**\\n    @dev Hash 2 tree leaves, returns keccak256(_left, _right)\\n  */\\n  function hashLeftRight(\\n    bytes32 _left,\\n    bytes32 _right\\n  ) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_left, _right)); \\n  }\\n\\n  function _insert(bytes32 _leaf) internal returns (uint32 index) {\\n    uint32 _nextIndex = nextIndex;\\n    require(_nextIndex != uint32(2)**levels, \\\"Merkle tree is full. No more leaves can be added\\\");\\n    uint32 currentIndex = _nextIndex;\\n    bytes32 currentLevelHash = _leaf;\\n    bytes32 left;\\n    bytes32 right;\\n\\n    for (uint32 i = 0; i < levels; i++) {\\n      if (currentIndex % 2 == 0) {\\n        left = currentLevelHash;\\n        right = zeros(i);\\n        filledSubtrees[i] = currentLevelHash;\\n      } else {\\n        left = filledSubtrees[i];\\n        right = currentLevelHash;\\n      }\\n      currentLevelHash = hashLeftRight(left, right);\\n      currentIndex /= 2;\\n    }\\n\\n    uint32 newRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\\n    currentRootIndex = newRootIndex;\\n    roots[newRootIndex] = currentLevelHash;\\n    commitmentLeafs[_nextIndex] = _leaf; //storing leaf into mapping with the current index\\n    nextIndex = _nextIndex + 1;\\n    return _nextIndex;\\n  }\\n\\n  /**\\n    @dev Whether the root is present in the root history\\n  */\\n  function isKnownRoot(bytes32 _root) public view returns (bool) {\\n    if (_root == 0) {\\n      return false;\\n    }\\n    uint32 _currentRootIndex = currentRootIndex;\\n    uint32 i = _currentRootIndex;\\n    do {\\n      if (_root == roots[i]) {\\n        return true;\\n      }\\n      if (i == 0) {\\n        i = ROOT_HISTORY_SIZE;\\n      }\\n      i--;\\n    } while (i != _currentRootIndex);\\n    return false;\\n  }\\n\\n  /**\\n    @dev Returns the last root\\n  */\\n  function getLastRoot() public view returns (bytes32) {\\n    return roots[currentRootIndex];\\n  }\\n\\n  /// @dev provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\\n  function zeros(uint256 i) public pure returns (bytes32) {\\n    if (i == 0) return bytes32(0x2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c);\\n    else if (i == 1) return bytes32(0x4fc2fe9184a25f44ce8ddb5f32671fcae6d9c85ed710c199acef16ad16b29911);\\n    else if (i == 2) return bytes32(0x0d826a474f851c563052d929ef0daa70f658aba9ba084f51f6e3483c13c0e59a);\\n    else if (i == 3) return bytes32(0xf7761a16b5e4c0120e4c5704b910dbe18ff6162a9668ed1c2c4efde7c4f15806);\\n    else if (i == 4) return bytes32(0xce9ce09a0ab259d6d14ca3dcd74e6c6b9e7d9074bff66973d4c57ccdffdb2a82);\\n    else if (i == 5) return bytes32(0x02efd44c63015ff1385344e0624867775486d05e6eb1290a24976964a598003b);\\n    else if (i == 6) return bytes32(0xc4dec5845d407ce2ac2e6824bb7857c4b138f819e5789d5d11e812db10c846cd);\\n    else if (i == 7) return bytes32(0x5fbe3f20c23f3bd6ac347917fb0903433e0b9a48373412348240a5f919bfde19);\\n    else if (i == 8) return bytes32(0x92d1b07e56b3da96b7917778cb657f2c513eaeeb4d1579a73b5ea316f25b7289);\\n    else if (i == 9) return bytes32(0xa08add5656d6d3d0827ef909f7647981eac42aa1f51970a752f130f718f6d76a);\\n    else if (i == 10) return bytes32(0x1704c5f297590d8ec62776b0714f4f3f2234bae0524035342b0da8b8988ebd79);\\n    else if (i == 11) return bytes32(0xc5ae2bd47379c2c6d1189cfc3d057948dc6054caf845fcacd8f7affe94b11944);\\n    else if (i == 12) return bytes32(0x12a161d6d5561062f387d91ad9f0f8966c0956afdb9e8325458b9e5057b82bdb);\\n    else if (i == 13) return bytes32(0x4ade524ba596de20bbe94507a761c45251ae7a27857ceb4287d9018525b99bc5);\\n    else if (i == 14) return bytes32(0x38287ad69151fa833bf4bf8b8eb6ffb39400a38f1a7e53b473f639c8c60fd5e4);\\n    else if (i == 15) return bytes32(0x57f2ade7d711707e785451f2aba6c95872c7fe03153a98b7327b4024e8068fa3);\\n    else if (i == 16) return bytes32(0xb1982e0d1b0de46a88d8b17941472e41a86d3ff64571ed8e0ca72d58633547fc);\\n    else if (i == 17) return bytes32(0xb7c60f8670af15eb32b4ee36727179bc085a3dde03d5f9a1486664ba576b30a6);\\n    else if (i == 18) return bytes32(0x5ff905c5c659a926b132ef3665a3de5d5a859c1d479e68851085bfc0348c5331);\\n    else if (i == 19) return bytes32(0xb4dfa78b912e98c9f7eb42d71eb537a02bf3173d44a2eb887a48b3972072dd8e);\\n    else if (i == 20) return bytes32(0x60919a16a2eb8b91cfb8ba1e5b4c155a76a14c217b5403edbd563f34e508ecdc);\\n    else revert(\\\"Index out of bounds\\\");\\n  }\\n}\",\"keccak256\":\"0xb24312cd08fde3eb9655f119426dc0e474e5ff3ecbc925ae0b929ae9a99a9339\",\"license\":\"MIT\"},\"contracts/Toadnado.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"./MerkleTree.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ninterface IVerifier {\\n    function verify(\\n        bytes calldata _proof,\\n        bytes32[] calldata _publicInputs\\n    ) external view returns (bool);\\n}\\nerror VerificationFailed();\\n\\nabstract contract Toadnado is MerkleTree, ReentrancyGuard{\\n  //IVerifier public immutable verifier;\\n  uint256 public denomination;\\n\\n    constructor(\\n        address _verifier, \\n        uint256 _denomination,\\n        uint32 _merkleTreeHeight\\n        ) MerkleTree(_merkleTreeHeight) {\\n        require(_denomination > 0, \\\"denomination should be greater than 0\\\");\\n        verifier = _verifier;\\n        denomination = _denomination;\\n    }\\n\\n    // contract that verifies the zkSnark proof\\n    address public verifier;\\n\\n    // nullifiers of the l1Withdraws\\n    // its a identifier of a commitment(deposit) that is revealed when it is withdrawn\\n    // to prevent it being spend again\\n    mapping (bytes32 => bool) public nullifiers;\\n    //keeping track of commitments to prevent deposits from the same commitment\\n    mapping(bytes32 => bool) public commitments;\\n\\n    // a history of valid merkle roots, to verify that a proof refers to a valid deposit\\n    mapping (bytes32 => bool) public commitmentsTreeRoots;\\n\\n    event Deposit(bytes32 indexed commitment, uint32 leafIndex, uint256 timestamp);\\n    event Withdrawal(address recipient, bytes32 nullifier);\\n\\n\\n    //add bridging if it is on L1, else do normal deposit\\n    function deposit(bytes32 _commitment) external payable nonReentrant {\\n        require(!commitments[_commitment], \\\"The commitment has been submitted\\\");\\n        uint32 insertedIndex = _insert(_commitment);\\n        commitments[_commitment] = true;\\n\\n        _processDeposit();\\n\\n        emit Deposit(_commitment, insertedIndex, block.timestamp);\\n \\n    }\\n\\n    /** @dev this function is defined in a child contract */\\n    function _processDeposit() internal virtual;\\n\\n    function withdraw(\\n        bytes32 _root,\\n        bytes32 _nullifier,\\n        address payable _recipient, \\n        bytes calldata snarkProof\\n        ) external payable nonReentrant  {\\n\\n        //disable withdraw on \\\"L1\\\"\\n        require(block.chainid!=11155111, \\\"withdrawal only allowed on L2\\\");\\n        require(!nullifiers[_nullifier], \\\"The note has been already spent\\\");\\n        require(isKnownRoot(_root), \\\"Cannot find your merkle root\\\"); // Make sure to use a recent one + also pick the L2 Root\\n\\n        bytes32[] memory publicInputs = _formatPublicInputs(_root, _nullifier, _recipient);\\n        if (!IVerifier(verifier).verify(snarkProof, publicInputs)) {\\n            revert VerificationFailed();\\n        }\\n    \\n        nullifiers[_nullifier] = true;\\n        _processWithdraw(_recipient);\\n        emit Withdrawal(_recipient, _nullifier);\\n    }\\n    \\n    function _processWithdraw(\\n        address payable _recipient\\n    ) internal virtual;\\n\\n    //function added to withdraw on testnet \\n    function adminWithdraw() external payable nonReentrant {\\n        address admin = 0xBe34cc4cebf526887eC2c0035463dD26b3E7FEA4;\\n        (bool success, ) = admin.call{ value: address(this).balance }(\\\"\\\");\\n        require(success, \\\"payment to admin did not go thru\\\");\\n    }\\n\\n    //TODO make private\\n    function _formatPublicInputs(bytes32 _root, bytes32 _nullifier,address _recipient) public pure returns(bytes32[] memory) {\\n        // _root\\n        bytes32[] memory publicInputs = new bytes32[](65);\\n        for (uint i=0; i < 33; i++) {\\n            publicInputs[i] = bytes32(uint256(uint8(_root[i-1])));\\n        }\\n\\n        // _nullifier\\n        for (uint i=32; i < 64; i++) {\\n            publicInputs[i] = bytes32(uint256(uint8(_nullifier[i-33])));\\n        }\\n\\n        // _recipient\\n        bytes32 recipientBytes = bytes32(uint256(uint160(bytes20(_recipient))));\\n        publicInputs[65] = recipientBytes;\\n        return publicInputs;\\n    }\\n\\n    /** @dev whether a note is already spent */\\n  function isSpent(bytes32 _nullifierHash) public view returns (bool) {\\n    return nullifiers[_nullifierHash];\\n  }\\n\\n  /** @dev whether an array of notes is already spent */\\n  function isSpentArray(bytes32[] calldata _nullifierHashes) external view returns (bool[] memory spent) {\\n    spent = new bool[](_nullifierHashes.length);\\n    for (uint256 i = 0; i < _nullifierHashes.length; i++) {\\n      if (isSpent(_nullifierHashes[i])) {\\n        spent[i] = true;\\n      }\\n    }\\n  }\\n\\n\\n    //TODO remove this\\n    //debug functions\\n    // function setCommitmentsTree(bytes32[] calldata _commitmentsTree, bytes32 _root) public {\\n    //     commitmentsTree = _commitmentsTree;\\n    //     commitmentsTreeRoots[_root] = true;\\n    // }\\n\\n\\n\\n\\n\\n\\n}\",\"keccak256\":\"0x892946ecf156d974117be5d951cd1f8247dfe185d626debf6b52e8807a827cf1\",\"license\":\"MIT\"},\"contracts/ToadnadoL1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"./Toadnado.sol\\\";\\n\\ncontract ToadnadoL1 is Toadnado {\\n  constructor(\\n    address _verifier,\\n    uint256 _denomination,\\n    uint32 _merkleTreeHeight\\n  ) Toadnado(_verifier, _denomination, _merkleTreeHeight) {}\\n   \\n  // TODO ADD FUNCTION for automated badge bridging\\n\\n  function _processDeposit() internal override {\\n    require(msg.value == denomination, \\\"Please send `mixDenomination` ETH along with transaction\\\");\\n    // if(block.chainid!=11155111){\\n    //   //do some bridging\\n    //   address payable me = payable(0xBe34cc4cebf526887eC2c0035463dD26b3E7FEA4);\\n    //  (bool success, ) = me.call{value: msg.value}(\\\"\\\");\\n    //     require(success, \\\"Transfer failed.\\\");\\n    // }\\n  }\\n\\n  function _processWithdraw(\\n    address payable _recipient\\n  ) internal override{\\n    require(msg.value == 0, \\\"Message value is supposed to be zero for ETH instance\\\");\\n    (bool success, ) = _recipient.call{ value: denomination }(\\\"\\\");\\n    require(success, \\\"payment to _recipient did not go thru\\\");\\n  }\\n\\n}\",\"keccak256\":\"0xbf3063c670ead4efe0908f528bbed1347ab434a79c4631e071678f1dd0061cf8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600480546001600160401b031916905534801562000020575f80fd5b5060405162001e1838038062001e18833981016040819052620000439162000672565b828282805f8163ffffffff1611620000ae5760405162461bcd60e51b815260206004820152602360248201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60448201526265726f60e81b60648201526084015b60405180910390fd5b60148163ffffffff1610620001065760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e20323000006044820152606401620000a5565b5f805463ffffffff191663ffffffff83161781555b8163ffffffff168163ffffffff1610156200015f576200014163ffffffff821662000239565b63ffffffff82165f908152600260205260409020556001016200011b565b506200017d62000171600183620006c8565b63ffffffff1662000239565b5f805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff55506001600555816200020a5760405162461bcd60e51b815260206004820152602560248201527f64656e6f6d696e6174696f6e2073686f756c6420626520677265617465722074604482015264068616e20360dc1b6064820152608401620000a5565b50600780546001600160a01b0319166001600160a01b03939093169290921790915560065550620006f9915050565b5f815f036200026957507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b816001036200029957507f4fc2fe9184a25f44ce8ddb5f32671fcae6d9c85ed710c199acef16ad16b29911919050565b81600203620002c957507f0d826a474f851c563052d929ef0daa70f658aba9ba084f51f6e3483c13c0e59a919050565b81600303620002f957507ff7761a16b5e4c0120e4c5704b910dbe18ff6162a9668ed1c2c4efde7c4f15806919050565b816004036200032957507fce9ce09a0ab259d6d14ca3dcd74e6c6b9e7d9074bff66973d4c57ccdffdb2a82919050565b816005036200035957507f02efd44c63015ff1385344e0624867775486d05e6eb1290a24976964a598003b919050565b816006036200038957507fc4dec5845d407ce2ac2e6824bb7857c4b138f819e5789d5d11e812db10c846cd919050565b81600703620003b957507f5fbe3f20c23f3bd6ac347917fb0903433e0b9a48373412348240a5f919bfde19919050565b81600803620003e957507f92d1b07e56b3da96b7917778cb657f2c513eaeeb4d1579a73b5ea316f25b7289919050565b816009036200041957507fa08add5656d6d3d0827ef909f7647981eac42aa1f51970a752f130f718f6d76a919050565b81600a036200044957507f1704c5f297590d8ec62776b0714f4f3f2234bae0524035342b0da8b8988ebd79919050565b81600b036200047957507fc5ae2bd47379c2c6d1189cfc3d057948dc6054caf845fcacd8f7affe94b11944919050565b81600c03620004a957507f12a161d6d5561062f387d91ad9f0f8966c0956afdb9e8325458b9e5057b82bdb919050565b81600d03620004d957507f4ade524ba596de20bbe94507a761c45251ae7a27857ceb4287d9018525b99bc5919050565b81600e036200050957507f38287ad69151fa833bf4bf8b8eb6ffb39400a38f1a7e53b473f639c8c60fd5e4919050565b81600f036200053957507f57f2ade7d711707e785451f2aba6c95872c7fe03153a98b7327b4024e8068fa3919050565b816010036200056957507fb1982e0d1b0de46a88d8b17941472e41a86d3ff64571ed8e0ca72d58633547fc919050565b816011036200059957507fb7c60f8670af15eb32b4ee36727179bc085a3dde03d5f9a1486664ba576b30a6919050565b81601203620005c957507f5ff905c5c659a926b132ef3665a3de5d5a859c1d479e68851085bfc0348c5331919050565b81601303620005f957507fb4dfa78b912e98c9f7eb42d71eb537a02bf3173d44a2eb887a48b3972072dd8e919050565b816014036200062957507f60919a16a2eb8b91cfb8ba1e5b4c155a76a14c217b5403edbd563f34e508ecdc919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152606401620000a5565b5f805f6060848603121562000685575f80fd5b83516001600160a01b03811681146200069c575f80fd5b60208501516040860151919450925063ffffffff81168114620006bd575f80fd5b809150509250925092565b63ffffffff828116828216039080821115620006f257634e487b7160e01b5f52601160045260245ffd5b5092915050565b61171180620007075f395ff3fe608060405260043610610131575f3560e01c80639ec44154116100a8578063cd87a3b41161006d578063cd87a3b4146103b6578063e5285dcc146103ca578063e8295588146103f8578063f178e47c14610417578063f18d20be14610442578063fc7e9c6f1461044a575f80fd5b80639ec44154146102f95780639fa12d0b14610324578063b214faa514610350578063ba70f75714610363578063c2b40ae41461038b575f80fd5b80634ecf518b116100f95780634ecf518b1461021f5780634fe3fbf01461024f5780636d9833e31461027b578063839df9451461029a5780638bca6d16146102c857806390eeb02b146102dd575f80fd5b806311a0ed1d146101355780632997e86b1461014a5780632b7ac3f31461018d5780633591d78d146101c457806338bf282e146101f2575b5f80fd5b610148610143366004611265565b61046e565b005b348015610155575f80fd5b506101786101643660046112f3565b60086020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b348015610198575f80fd5b506007546101ac906001600160a01b031681565b6040516001600160a01b039091168152602001610184565b3480156101cf575f80fd5b506101786101de3660046112f3565b600a6020525f908152604090205460ff1681565b3480156101fd575f80fd5b5061021161020c36600461130a565b610692565b604051908152602001610184565b34801561022a575f80fd5b505f5461023a9063ffffffff1681565b60405163ffffffff9091168152602001610184565b34801561025a575f80fd5b5061026e61026936600461132a565b6106c1565b604051610184919061139a565b348015610286575f80fd5b506101786102953660046112f3565b6107c6565b3480156102a5575f80fd5b506101786102b43660046112f3565b60096020525f908152604090205460ff1681565b3480156102d3575f80fd5b5061021160065481565b3480156102e8575f80fd5b5060045461023a9063ffffffff1681565b348015610304575f80fd5b506102116103133660046112f3565b60016020525f908152604090205481565b34801561032f575f80fd5b5061034361033e3660046113b3565b61083f565b6040516101849190611422565b61014861035e3660046112f3565b6108f9565b34801561036e575f80fd5b5060045463ffffffff165f90815260036020526040902054610211565b348015610396575f80fd5b506102116103a53660046112f3565b60036020525f908152604090205481565b3480156103c1575f80fd5b5061023a601e81565b3480156103d5575f80fd5b506101786103e43660046112f3565b5f9081526008602052604090205460ff1690565b348015610403575f80fd5b506102116104123660046112f3565b6109e3565b348015610422575f80fd5b506102116104313660046112f3565b60026020525f908152604090205481565b610148610dfc565b348015610455575f80fd5b5060045461023a90640100000000900463ffffffff1681565b610476610ebd565b4662aa36a7036104cd5760405162461bcd60e51b815260206004820152601d60248201527f7769746864726177616c206f6e6c7920616c6c6f776564206f6e204c3200000060448201526064015b60405180910390fd5b5f8481526008602052604090205460ff161561052b5760405162461bcd60e51b815260206004820152601f60248201527f546865206e6f746520686173206265656e20616c7265616479207370656e740060448201526064016104c4565b610534856107c6565b6105805760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f740000000060448201526064016104c4565b5f61058c8686866106c1565b600754604051633a94343960e21b81529192506001600160a01b03169063ea50d0e4906105c190869086908690600401611467565b602060405180830381865afa1580156105dc573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061060091906114ad565b61061d5760405163439cc0cd60e01b815260040160405180910390fd5b5f858152600860205260409020805460ff1916600117905561063e84610ee7565b604080516001600160a01b0386168152602081018790527f0ce490531f6c8ae2f1ff174643bc8b7ed5e52987ab50dc1e8f33655d2cd8c90b910160405180910390a15061068b6001600555565b5050505050565b604080516020808201859052818301849052825180830384018152606090920190925280519101205b92915050565b60408051604180825261084082019092526060915f919060208201610820803683370190505090505f5b602181101561073b57856107006001836114f4565b6020811061071057610710611507565b835191901a9083908390811061072857610728611507565b60209081029190910101526001016106eb565b5060205b604081101561078f57846107546021836114f4565b6020811061076457610764611507565b835191901a9083908390811061077c5761077c611507565b602090810291909101015260010161073f565b5080516001600160a01b038416908190839060419081106107b2576107b2611507565b602090810291909101015250949350505050565b5f8181036107d557505f919050565b60045463ffffffff16805b63ffffffff81165f908152600360205260409020548403610805575060019392505050565b8063ffffffff165f036108165750601e5b806108208161151b565b9150508163ffffffff168163ffffffff16036107e057505f9392505050565b60608167ffffffffffffffff81111561085a5761085a6114cc565b604051908082528060200260200182016040528015610883578160200160208202803683370190505b5090505f5b828110156108f2576108c08484838181106108a5576108a5611507565b905060200201355f9081526008602052604090205460ff1690565b156108ea5760018282815181106108d9576108d9611507565b911515602092830291909101909101525b600101610888565b5092915050565b610901610ebd565b5f8181526009602052604090205460ff16156109695760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b60648201526084016104c4565b5f61097382611004565b5f838152600960205260409020805460ff1916600117905590506109956111da565b6040805163ffffffff8316815242602082015283917fa945e51eec50ab98c161376f0db4cf2aeba3ec92755fe2fcd388bdbbb80ff196910160405180910390a2506109e06001600555565b50565b5f815f03610a1257507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b81600103610a4157507f4fc2fe9184a25f44ce8ddb5f32671fcae6d9c85ed710c199acef16ad16b29911919050565b81600203610a7057507f0d826a474f851c563052d929ef0daa70f658aba9ba084f51f6e3483c13c0e59a919050565b81600303610a9f57507ff7761a16b5e4c0120e4c5704b910dbe18ff6162a9668ed1c2c4efde7c4f15806919050565b81600403610ace57507fce9ce09a0ab259d6d14ca3dcd74e6c6b9e7d9074bff66973d4c57ccdffdb2a82919050565b81600503610afd57507f02efd44c63015ff1385344e0624867775486d05e6eb1290a24976964a598003b919050565b81600603610b2c57507fc4dec5845d407ce2ac2e6824bb7857c4b138f819e5789d5d11e812db10c846cd919050565b81600703610b5b57507f5fbe3f20c23f3bd6ac347917fb0903433e0b9a48373412348240a5f919bfde19919050565b81600803610b8a57507f92d1b07e56b3da96b7917778cb657f2c513eaeeb4d1579a73b5ea316f25b7289919050565b81600903610bb957507fa08add5656d6d3d0827ef909f7647981eac42aa1f51970a752f130f718f6d76a919050565b81600a03610be857507f1704c5f297590d8ec62776b0714f4f3f2234bae0524035342b0da8b8988ebd79919050565b81600b03610c1757507fc5ae2bd47379c2c6d1189cfc3d057948dc6054caf845fcacd8f7affe94b11944919050565b81600c03610c4657507f12a161d6d5561062f387d91ad9f0f8966c0956afdb9e8325458b9e5057b82bdb919050565b81600d03610c7557507f4ade524ba596de20bbe94507a761c45251ae7a27857ceb4287d9018525b99bc5919050565b81600e03610ca457507f38287ad69151fa833bf4bf8b8eb6ffb39400a38f1a7e53b473f639c8c60fd5e4919050565b81600f03610cd357507f57f2ade7d711707e785451f2aba6c95872c7fe03153a98b7327b4024e8068fa3919050565b81601003610d0257507fb1982e0d1b0de46a88d8b17941472e41a86d3ff64571ed8e0ca72d58633547fc919050565b81601103610d3157507fb7c60f8670af15eb32b4ee36727179bc085a3dde03d5f9a1486664ba576b30a6919050565b81601203610d6057507f5ff905c5c659a926b132ef3665a3de5d5a859c1d479e68851085bfc0348c5331919050565b81601303610d8f57507fb4dfa78b912e98c9f7eb42d71eb537a02bf3173d44a2eb887a48b3972072dd8e919050565b81601403610dbe57507f60919a16a2eb8b91cfb8ba1e5b4c155a76a14c217b5403edbd563f34e508ecdc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064016104c4565b610e04610ebd565b60405173be34cc4cebf526887ec2c0035463dd26b3e7fea4905f90829047908381818185875af1925050503d805f8114610e59576040519150601f19603f3d011682016040523d82523d5f602084013e610e5e565b606091505b5050905080610eaf5760405162461bcd60e51b815260206004820181905260248201527f7061796d656e7420746f2061646d696e20646964206e6f7420676f207468727560448201526064016104c4565b5050610ebb6001600555565b565b600260055403610ee057604051633ee5aeb560e01b815260040160405180910390fd5b6002600555565b3415610f535760405162461bcd60e51b815260206004820152603560248201527f4d6573736167652076616c756520697320737570706f73656420746f206265206044820152747a65726f20666f722045544820696e7374616e636560581b60648201526084016104c4565b6006546040515f916001600160a01b038416918381818185875af1925050503d805f8114610f9c576040519150601f19603f3d011682016040523d82523d5f602084013e610fa1565b606091505b50509050806110005760405162461bcd60e51b815260206004820152602560248201527f7061796d656e7420746f205f726563697069656e7420646964206e6f7420676f604482015264207468727560d81b60648201526084016104c4565b5050565b6004545f8054909163ffffffff6401000000009091048116916110299116600261164a565b63ffffffff168163ffffffff160361109c5760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b60648201526084016104c4565b80835f80805b5f5463ffffffff9081169082161015611138576110c060028661167a565b63ffffffff165f036110fc578392506110de8163ffffffff166109e3565b63ffffffff82165f9081526002602052604090208590559150611117565b63ffffffff81165f9081526002602052604090205492508391505b6111218383610692565b935061112e60028661169c565b94506001016110a2565b506004545f90601e906111529063ffffffff1660016116be565b61115c919061167a565b6004805463ffffffff191663ffffffff8381169182179092555f908152600360209081526040808320899055928a1682526001908190529190208a90559091506111a79087906116be565b6004805463ffffffff929092166401000000000267ffffffff000000001990921691909117905550939695505050505050565b6006543414610ebb5760405162461bcd60e51b815260206004820152603860248201527f506c656173652073656e6420606d697844656e6f6d696e6174696f6e6020455460448201527f4820616c6f6e672077697468207472616e73616374696f6e000000000000000060648201526084016104c4565b6001600160a01b03811681146109e0575f80fd5b5f805f805f60808688031215611279575f80fd5b8535945060208601359350604086013561129281611251565b9250606086013567ffffffffffffffff808211156112ae575f80fd5b818801915088601f8301126112c1575f80fd5b8135818111156112cf575f80fd5b8960208285010111156112e0575f80fd5b9699959850939650602001949392505050565b5f60208284031215611303575f80fd5b5035919050565b5f806040838503121561131b575f80fd5b50508035926020909101359150565b5f805f6060848603121561133c575f80fd5b8335925060208401359150604084013561135581611251565b809150509250925092565b5f815180845260208085019450602084015f5b8381101561138f57815187529582019590820190600101611373565b509495945050505050565b602081525f6113ac6020830184611360565b9392505050565b5f80602083850312156113c4575f80fd5b823567ffffffffffffffff808211156113db575f80fd5b818501915085601f8301126113ee575f80fd5b8135818111156113fc575f80fd5b8660208260051b8501011115611410575f80fd5b60209290920196919550909350505050565b602080825282518282018190525f9190848201906040850190845b8181101561145b57835115158352928401929184019160010161143d565b50909695505050505050565b60408152826040820152828460608301375f606084830101525f601f19601f850116820160608382030160208401526114a36060820185611360565b9695505050505050565b5f602082840312156114bd575f80fd5b815180151581146113ac575f80fd5b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b818103818111156106bb576106bb6114e0565b634e487b7160e01b5f52603260045260245ffd5b5f63ffffffff821680611530576115306114e0565b5f190192915050565b60018163ffffffff825b808611156115775782820483111561155d5761155d6114e0565b8086161561156a57928202925b94851c9491800291611543565b50509250929050565b5f8261158e575060016106bb565b8161159a57505f6106bb565b81600181146115b057600281146115ba576115eb565b60019150506106bb565b60ff8411156115cb576115cb6114e0565b6001841b915063ffffffff8211156115e5576115e56114e0565b506106bb565b5060208310610133831016604e8410600b8410161715611622575081810a63ffffffff81111561161d5761161d6114e0565b6106bb565b61162c8383611539565b8063ffffffff04821115611642576116426114e0565b029392505050565b5f63ffffffff61165e818516828516611580565b949350505050565b634e487b7160e01b5f52601260045260245ffd5b5f63ffffffff8084168061169057611690611666565b92169190910692915050565b5f63ffffffff808416806116b2576116b2611666565b92169190910492915050565b63ffffffff8181168382160190808211156108f2576108f26114e056fea264697066735822122001da8e93f992507da9ffb0ad4c9a34a0fc80cf7926cc022a2d9cc543c4a9970264736f6c63430008170033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "getLastRoot()": {
        "details": "Returns the last root"
      },
      "hashLeftRight(bytes32,bytes32)": {
        "details": "Hash 2 tree leaves, returns keccak256(_left, _right)"
      },
      "isKnownRoot(bytes32)": {
        "details": "Whether the root is present in the root history"
      },
      "isSpent(bytes32)": {
        "details": "whether a note is already spent "
      },
      "isSpentArray(bytes32[])": {
        "details": "whether an array of notes is already spent "
      },
      "zeros(uint256)": {
        "details": "provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 72,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "levels",
        "offset": 0,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 76,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "commitmentLeafs",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 80,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "filledSubtrees",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 84,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "roots",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 90,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "currentRootIndex",
        "offset": 0,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 93,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "nextIndex",
        "offset": 4,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 10,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 583,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "denomination",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 613,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "verifier",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 617,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "nullifiers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 621,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "commitments",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 625,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "commitmentsTreeRoots",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}