{
  "address": "0x3EF9b20C061588Ea749FD007A13e10a3321c4aF4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_denomination",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_merkleTreeHeight",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VerificationFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "leafIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nullifier",
          "type": "bytes32"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FIELD_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_HISTORY_SIZE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZERO_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "commitmentLeafs",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "commitmentsTree",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commitmentsTreeRoots",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRootIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "denomination",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "filledSubtrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_left",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_right",
          "type": "bytes32"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "isKnownRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levels",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nullifiers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_commitmentsTree",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "setCommitmentsTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "snarkProof",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "zeros",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x8bf0755d9ccebd6823d420a7dde5c1c4c9d7ff51d09a67a0bb6f50bd0e6c5cc0",
  "receipt": {
    "to": null,
    "from": "0xBe34cc4cebf526887eC2c0035463dD26b3E7FEA4",
    "contractAddress": "0x3EF9b20C061588Ea749FD007A13e10a3321c4aF4",
    "transactionIndex": 36,
    "gasUsed": "1463901",
    "logsBloom": "0x
    "blockHash": "0xb8eb13baf7c52634c1e2555525bed46f24bcf86efcc571fc6e1102549509d222",
    "transactionHash": "0x8bf0755d9ccebd6823d420a7dde5c1c4c9d7ff51d09a67a0bb6f50bd0e6c5cc0",
    "logs": [],
    "blockNumber": 6302674,
    "cumulativeGasUsed": "3956893",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBe34cc4cebf526887eC2c0035463dD26b3E7FEA4",
    "10000000000000000",
    7
  ],
  "numDeployments": 6,
  "solcInputHash": "e8e0fb152328f5046d4caf1b37a53b77",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_denomination\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_merkleTreeHeight\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerificationFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"leafIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nullifier\",\"type\":\"bytes32\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIELD_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_HISTORY_SIZE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commitmentLeafs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commitmentsTree\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitmentsTreeRoots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRootIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denomination\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"filledSubtrees\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_right\",\"type\":\"bytes32\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"isKnownRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levels\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nullifiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_commitmentsTree\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setCommitmentsTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"snarkProof\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"zeros\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"getLastRoot()\":{\"details\":\"Returns the last root\"},\"hashLeftRight(bytes32,bytes32)\":{\"details\":\"Hash 2 tree leaves, returns keccak256(_left, _right)\"},\"isKnownRoot(bytes32)\":{\"details\":\"Whether the root is present in the root history\"},\"zeros(uint256)\":{\"details\":\"provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ToadnadoL1.sol\":\"ToadnadoL1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/MerkleTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n\\ncontract MerkleTree{\\n  uint256 public constant FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n  uint256 public constant ZERO_VALUE = 21663839004416932945382355908790599225266501822907911457504978515578255421292; // = keccak256(\\\"tornado\\\") % FIELD_SIZE\\n\\n  uint32 public levels;\\n  \\n  // merkle leafs\\n  mapping (uint256 => bytes32) public commitmentLeafs; \\n\\n  // the following variables are made public for easier testing and debugging and\\n  // are not supposed to be accessed in regular code\\n\\n  // filledSubtrees and roots could be bytes32[size], but using mappings makes it cheaper because\\n  // it removes index range check on every interaction\\n  mapping(uint256 => bytes32) public filledSubtrees;\\n  mapping(uint256 => bytes32) public roots;\\n  uint32 public constant ROOT_HISTORY_SIZE = 30;\\n  uint32 public currentRootIndex = 0;\\n  uint32 public nextIndex = 0;\\n\\n  constructor(uint32 _levels) {\\n    require(_levels > 0, \\\"_levels should be greater than zero\\\");\\n    require(_levels < 32, \\\"_levels should be less than 32\\\");\\n    levels = _levels;\\n\\n    for (uint32 i = 0; i < _levels; i++) {\\n      filledSubtrees[i] = zeros(i);\\n    }\\n\\n    roots[0] = zeros(_levels - 1);\\n  }\\n\\n  /**\\n    @dev Hash 2 tree leaves, returns keccak256(_left, _right)\\n  */\\n  function hashLeftRight(\\n    bytes32 _left,\\n    bytes32 _right\\n  ) public pure returns (bytes32) {\\n    // require(uint256(_left) < FIELD_SIZE, \\\"_left should be inside the field\\\");\\n    // require(uint256(_right) < FIELD_SIZE, \\\"_right should be inside the field\\\");\\n    bytes32 R = keccak256(abi.encodePacked(_left, _right));\\n    return R;\\n  }\\n\\n  function _insert(bytes32 _leaf) internal returns (uint32 index) {\\n    uint32 _nextIndex = nextIndex;\\n    require(_nextIndex != uint32(2)**levels, \\\"Merkle tree is full. No more leaves can be added\\\");\\n    uint32 currentIndex = _nextIndex;\\n    bytes32 currentLevelHash = _leaf;\\n    bytes32 left;\\n    bytes32 right;\\n\\n    for (uint32 i = 0; i < levels; i++) {\\n      if (currentIndex % 2 == 0) {\\n        left = currentLevelHash;\\n        right = zeros(i);\\n        filledSubtrees[i] = currentLevelHash;\\n      } else {\\n        left = filledSubtrees[i];\\n        right = currentLevelHash;\\n      }\\n      currentLevelHash = hashLeftRight(left, right);\\n      currentIndex /= 2;\\n    }\\n\\n//TODO WHY DOUBLE?!\\n    uint32 newRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\\n    currentRootIndex = newRootIndex;\\n    roots[newRootIndex] = currentLevelHash;\\n    commitmentLeafs[_nextIndex] = _leaf; //storing leaf into mapping with the current index\\n    nextIndex = _nextIndex + 1;\\n    return _nextIndex;\\n  }\\n\\n  /**\\n    @dev Whether the root is present in the root history\\n  */\\n  function isKnownRoot(bytes32 _root) public view returns (bool) {\\n    if (_root == 0) {\\n      return false;\\n    }\\n    uint32 _currentRootIndex = currentRootIndex;\\n    uint32 i = _currentRootIndex;\\n    do {\\n      if (_root == roots[i]) {\\n        return true;\\n      }\\n      if (i == 0) {\\n        i = ROOT_HISTORY_SIZE;\\n      }\\n      i--;\\n    } while (i != _currentRootIndex);\\n    return false;\\n  }\\n\\n  /**\\n    @dev Returns the last root\\n  */\\n  function getLastRoot() public view returns (bytes32) {\\n    return roots[currentRootIndex];\\n  }\\n\\n  /// @dev provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\\n  function zeros(uint256 i) public pure returns (bytes32) {\\n    if (i == 0) return bytes32(0x2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c);\\n    else if (i == 1) return bytes32(0x4fc2fe9184a25f44ce8ddb5f32671fcae6d9c85ed710c199acef16ad16b29911);\\n    else if (i == 2) return bytes32(0x0d826a474f851c563052d929ef0daa70f658aba9ba084f51f6e3483c13c0e59a);\\n    else if (i == 3) return bytes32(0xf7761a16b5e4c0120e4c5704b910dbe18ff6162a9668ed1c2c4efde7c4f15806);\\n    else if (i == 4) return bytes32(0xce9ce09a0ab259d6d14ca3dcd74e6c6b9e7d9074bff66973d4c57ccdffdb2a82);\\n    else if (i == 5) return bytes32(0x02efd44c63015ff1385344e0624867775486d05e6eb1290a24976964a598003b);\\n    else if (i == 6) return bytes32(0xc4dec5845d407ce2ac2e6824bb7857c4b138f819e5789d5d11e812db10c846cd);\\n    else if (i == 7) return bytes32(0x5fbe3f20c23f3bd6ac347917fb0903433e0b9a48373412348240a5f919bfde19);\\n    else if (i == 8) return bytes32(0x92d1b07e56b3da96b7917778cb657f2c513eaeeb4d1579a73b5ea316f25b7289);\\n    else if (i == 9) return bytes32(0xa08add5656d6d3d0827ef909f7647981eac42aa1f51970a752f130f718f6d76a);\\n    else if (i == 10) return bytes32(0x1704c5f297590d8ec62776b0714f4f3f2234bae0524035342b0da8b8988ebd79);\\n    else if (i == 11) return bytes32(0xc5ae2bd47379c2c6d1189cfc3d057948dc6054caf845fcacd8f7affe94b11944);\\n    else if (i == 12) return bytes32(0x12a161d6d5561062f387d91ad9f0f8966c0956afdb9e8325458b9e5057b82bdb);\\n    else if (i == 13) return bytes32(0x4ade524ba596de20bbe94507a761c45251ae7a27857ceb4287d9018525b99bc5);\\n    else if (i == 14) return bytes32(0x38287ad69151fa833bf4bf8b8eb6ffb39400a38f1a7e53b473f639c8c60fd5e4);\\n    else if (i == 15) return bytes32(0x57f2ade7d711707e785451f2aba6c95872c7fe03153a98b7327b4024e8068fa3);\\n    else if (i == 16) return bytes32(0xb1982e0d1b0de46a88d8b17941472e41a86d3ff64571ed8e0ca72d58633547fc);\\n    else if (i == 17) return bytes32(0xb7c60f8670af15eb32b4ee36727179bc085a3dde03d5f9a1486664ba576b30a6);\\n    else if (i == 18) return bytes32(0x5ff905c5c659a926b132ef3665a3de5d5a859c1d479e68851085bfc0348c5331);\\n    else if (i == 19) return bytes32(0xb4dfa78b912e98c9f7eb42d71eb537a02bf3173d44a2eb887a48b3972072dd8e);\\n    else if (i == 20) return bytes32(0x60919a16a2eb8b91cfb8ba1e5b4c155a76a14c217b5403edbd563f34e508ecdc);\\n    else revert(\\\"Index out of bounds\\\");\\n  }\\n}\",\"keccak256\":\"0x07dc4bbfaefe259c76c24fa5a3ce638a9d89afc35703b7f44e7a815896524f9f\",\"license\":\"MIT\"},\"contracts/Toadnado.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"./MerkleTree.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ninterface IVerifier {\\n    function verify(\\n        bytes calldata _proof,\\n        bytes32[] calldata _publicInputs\\n    ) external view returns (bool);\\n}\\nerror VerificationFailed();\\n\\nabstract contract Toadnado is MerkleTree, ReentrancyGuard{\\n  //IVerifier public immutable verifier;\\n  uint256 public denomination;\\n\\n    constructor(\\n        address _verifier, \\n        uint256 _denomination,\\n        uint32 _merkleTreeHeight\\n        ) MerkleTree(_merkleTreeHeight) {\\n        require(_denomination > 0, \\\"denomination should be greater than 0\\\");\\n        verifier = _verifier;\\n        denomination = _denomination;\\n    }\\n\\n    // contract that verifies the zkSnark proof\\n    address public verifier;\\n\\n    // nullifiers of the l1Withdraws\\n    // its a identifier of a commitment(deposit) that is revealed when it is withdrawn\\n    // to prevent it being spend again\\n    mapping (bytes32 => bool) public nullifiers;\\n    //keeping track of commitments to prevent deposits from the same commitment\\n    mapping(bytes32 => bool) public commitments;\\n\\n    // a history of valid merkle roots, to verify that a proof refers to a valid deposit\\n    mapping (bytes32 => bool) public commitmentsTreeRoots;\\n\\n\\n    //TODO find out depth and set array lenght to that as 2^depth\\n    // contains the entire current merkle tree from the commitements (leafs) to the root\\n    // ex at depth 1 (2 commitements)\\n    // [commitment1,commitment2, hash1atLevel1, hash2atLevel1, root]\\n    bytes32[] public commitmentsTree;\\n\\n    event Deposit(bytes32 indexed commitment, uint32 leafIndex, uint256 timestamp);\\n    event Withdrawal(address recipient, bytes32 nullifier);\\n\\n\\n    function deposit(bytes32 _commitment) external payable nonReentrant {\\n        require(!commitments[_commitment], \\\"The commitment has been submitted\\\");\\n\\n        //DONE update merkle tree\\n        uint32 insertedIndex = _insert(_commitment);\\n        commitments[_commitment] = true;\\n\\n        //DONE get denomination going\\n        _processDeposit();\\n\\n        emit Deposit(_commitment, insertedIndex, block.timestamp);\\n \\n    }\\n\\n    /** @dev this function is defined in a child contract */\\n    function _processDeposit() internal virtual;\\n\\n    function withdraw(\\n        address payable _recipient, \\n        bytes32 _nullifier,\\n        uint256 chainId, \\n        bytes calldata snarkProof\\n        ) external payable nonReentrant  {\\n        bytes32[] memory publicInputs = _formatPublicInputs(_recipient, _nullifier, chainId);\\n        if (!IVerifier(verifier).verify(snarkProof, publicInputs)) {\\n            revert VerificationFailed();\\n        }\\n        //TODO send the money to \\\"to\\\"\\n        //TODO add nullifier\\n        //TODO checkChainID\\n        \\n        _processWithdraw(_recipient);\\n        emit Withdrawal(_recipient, _nullifier);\\n    }\\n    \\n    function _processWithdraw(\\n    address payable _recipient\\n    ) internal virtual;\\n\\n\\n    function _formatPublicInputs(address to, bytes32 nullifier,uint256 chainId) private returns(bytes32[] memory) {\\n\\n    }\\n\\n\\n    //TODO remove this\\n    //debug functions\\n    function setCommitmentsTree(bytes32[] calldata _commitmentsTree, bytes32 _root) public {\\n        commitmentsTree = _commitmentsTree;\\n        commitmentsTreeRoots[_root] = true;\\n    }\\n\\n\\n\\n\\n\\n\\n}\",\"keccak256\":\"0xa58e8d0e62a08d3a39fe67da02978686ab8bfe0dd0d790b8e20bede3c40d223a\",\"license\":\"MIT\"},\"contracts/ToadnadoL1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"./Toadnado.sol\\\";\\n\\ncontract ToadnadoL1 is Toadnado {\\n  constructor(\\n    //IVerifier _verifier,\\n    address _verifier,\\n    uint256 _denomination,\\n    uint32 _merkleTreeHeight\\n  ) Toadnado(_verifier, _denomination, _merkleTreeHeight) {}\\n  \\n\\n  function _processDeposit() internal override {\\n    require(msg.value == denomination, \\\"Please send `mixDenomination` ETH along with transaction\\\");\\n  }\\n\\n  function _processWithdraw(\\n    address payable _recipient\\n  ) internal override{\\n    //only allow withdrawal on L2 for now \\n    require(block.chainid!=11155111, \\\"withdrawal only allowed on L2\\\");\\n    // sanity checks\\n    require(msg.value == 0, \\\"Message value is supposed to be zero for ETH instance\\\");\\n    (bool success, ) = _recipient.call{ value: denomination }(\\\"\\\");\\n    require(success, \\\"payment to _recipient did not go thru\\\");\\n  }\\n\\n}\",\"keccak256\":\"0x9c710034e071c7d67048956f461abfb8f206600e6fc728493e86f18381ec9187\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600480546001600160401b03191690553480156200002157600080fd5b5060405162001b3438038062001b34833981016040819052620000449162000679565b8282828060008163ffffffff1611620000b05760405162461bcd60e51b815260206004820152602360248201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60448201526265726f60e81b60648201526084015b60405180910390fd5b60208163ffffffff1610620001085760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e20333200006044820152606401620000a7565b6000805463ffffffff191663ffffffff83161781555b8163ffffffff168163ffffffff16101562000163576200014463ffffffff82166200023e565b63ffffffff82166000908152600260205260409020556001016200011e565b506200018162000175600183620006d4565b63ffffffff166200023e565b6000805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff55506001600555816200020f5760405162461bcd60e51b815260206004820152602560248201527f64656e6f6d696e6174696f6e2073686f756c6420626520677265617465722074604482015264068616e20360dc1b6064820152608401620000a7565b50600780546001600160a01b0319166001600160a01b0393909316929092179091556006555062000707915050565b6000816000036200027057507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b81600103620002a057507f4fc2fe9184a25f44ce8ddb5f32671fcae6d9c85ed710c199acef16ad16b29911919050565b81600203620002d057507f0d826a474f851c563052d929ef0daa70f658aba9ba084f51f6e3483c13c0e59a919050565b816003036200030057507ff7761a16b5e4c0120e4c5704b910dbe18ff6162a9668ed1c2c4efde7c4f15806919050565b816004036200033057507fce9ce09a0ab259d6d14ca3dcd74e6c6b9e7d9074bff66973d4c57ccdffdb2a82919050565b816005036200036057507f02efd44c63015ff1385344e0624867775486d05e6eb1290a24976964a598003b919050565b816006036200039057507fc4dec5845d407ce2ac2e6824bb7857c4b138f819e5789d5d11e812db10c846cd919050565b81600703620003c057507f5fbe3f20c23f3bd6ac347917fb0903433e0b9a48373412348240a5f919bfde19919050565b81600803620003f057507f92d1b07e56b3da96b7917778cb657f2c513eaeeb4d1579a73b5ea316f25b7289919050565b816009036200042057507fa08add5656d6d3d0827ef909f7647981eac42aa1f51970a752f130f718f6d76a919050565b81600a036200045057507f1704c5f297590d8ec62776b0714f4f3f2234bae0524035342b0da8b8988ebd79919050565b81600b036200048057507fc5ae2bd47379c2c6d1189cfc3d057948dc6054caf845fcacd8f7affe94b11944919050565b81600c03620004b057507f12a161d6d5561062f387d91ad9f0f8966c0956afdb9e8325458b9e5057b82bdb919050565b81600d03620004e057507f4ade524ba596de20bbe94507a761c45251ae7a27857ceb4287d9018525b99bc5919050565b81600e036200051057507f38287ad69151fa833bf4bf8b8eb6ffb39400a38f1a7e53b473f639c8c60fd5e4919050565b81600f036200054057507f57f2ade7d711707e785451f2aba6c95872c7fe03153a98b7327b4024e8068fa3919050565b816010036200057057507fb1982e0d1b0de46a88d8b17941472e41a86d3ff64571ed8e0ca72d58633547fc919050565b81601103620005a057507fb7c60f8670af15eb32b4ee36727179bc085a3dde03d5f9a1486664ba576b30a6919050565b81601203620005d057507f5ff905c5c659a926b132ef3665a3de5d5a859c1d479e68851085bfc0348c5331919050565b816013036200060057507fb4dfa78b912e98c9f7eb42d71eb537a02bf3173d44a2eb887a48b3972072dd8e919050565b816014036200063057507f60919a16a2eb8b91cfb8ba1e5b4c155a76a14c217b5403edbd563f34e508ecdc919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152606401620000a7565b6000806000606084860312156200068f57600080fd5b83516001600160a01b0381168114620006a757600080fd5b60208501516040860151919450925063ffffffff81168114620006c957600080fd5b809150509250925092565b63ffffffff8281168282160390808211156200070057634e487b7160e01b600052601160045260246000fd5b5092915050565b61141d80620007176000396000f3fe6080604052600436106101355760003560e01c806390eeb02b116100ab578063c2b40ae41161006f578063c2b40ae4146103bd578063cd87a3b4146103ea578063e8295588146103ff578063ec7329591461041f578063f178e47c14610453578063fc7e9c6f1461048057600080fd5b806390eeb02b146103165780639ec4415414610333578063b214faa514610360578063b85f267014610373578063ba70f7571461039357600080fd5b8063414a37ba116100fd578063414a37ba1461022a5780634ecf518b1461025e578063621a5286146102905780636d9833e3146102b0578063839df945146102d05780638bca6d161461030057600080fd5b80632997e86b1461013a5780632b7ac3f31461017f5780633591d78d146101b757806338bf282e146101e75780633990f65b14610215575b600080fd5b34801561014657600080fd5b5061016a610155366004611007565b60086020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561018b57600080fd5b5060075461019f906001600160a01b031681565b6040516001600160a01b039091168152602001610176565b3480156101c357600080fd5b5061016a6101d2366004611007565b600a6020526000908152604090205460ff1681565b3480156101f357600080fd5b50610207610202366004611020565b6104a5565b604051908152602001610176565b610228610223366004611042565b6104e6565b005b34801561023657600080fd5b506102077f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b34801561026a57600080fd5b5060005461027b9063ffffffff1681565b60405163ffffffff9091168152602001610176565b34801561029c57600080fd5b506102076102ab366004611007565b6105de565b3480156102bc57600080fd5b5061016a6102cb366004611007565b6105ff565b3480156102dc57600080fd5b5061016a6102eb366004611007565b60096020526000908152604090205460ff1681565b34801561030c57600080fd5b5061020760065481565b34801561032257600080fd5b5060045461027b9063ffffffff1681565b34801561033f57600080fd5b5061020761034e366004611007565b60016020526000908152604090205481565b61022861036e366004611007565b61067d565b34801561037f57600080fd5b5061022861038e3660046110e4565b61076f565b34801561039f57600080fd5b5060045463ffffffff16600090815260036020526040902054610207565b3480156103c957600080fd5b506102076103d8366004611007565b60036020526000908152604090205481565b3480156103f657600080fd5b5061027b601e81565b34801561040b57600080fd5b5061020761041a366004611007565b610799565b34801561042b57600080fd5b506102077f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b34801561045f57600080fd5b5061020761046e366004611007565b60026020526000908152604090205481565b34801561048c57600080fd5b5060045461027b90640100000000900463ffffffff1681565b60008083836040516020016104c4929190918252602082015260400190565b60408051601f1981840301815291905280516020909101209150505b92915050565b6104ee610bb4565b600754604051633a94343960e21b81526060916001600160a01b03169063ea50d0e4906105239086908690869060040161115f565b602060405180830381865afa158015610540573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056491906111da565b6105815760405163439cc0cd60e01b815260040160405180910390fd5b61058a86610bde565b604080516001600160a01b0388168152602081018790527f0ce490531f6c8ae2f1ff174643bc8b7ed5e52987ab50dc1e8f33655d2cd8c90b910160405180910390a1506105d76001600555565b5050505050565b600b81815481106105ee57600080fd5b600091825260209091200154905081565b600081810361061057506000919050565b60045463ffffffff16805b63ffffffff81166000908152600360205260409020548403610641575060019392505050565b8063ffffffff166000036106535750601e5b8061065d81611219565b9150508163ffffffff168163ffffffff160361061b575060009392505050565b610685610bb4565b60008181526009602052604090205460ff16156106f35760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b60648201526084015b60405180910390fd5b60006106fe82610d50565b6000838152600960205260409020805460ff191660011790559050610721610f2e565b6040805163ffffffff8316815242602082015283917fa945e51eec50ab98c161376f0db4cf2aeba3ec92755fe2fcd388bdbbb80ff196910160405180910390a25061076c6001600555565b50565b61077b600b8484610fa7565b506000908152600a60205260409020805460ff191660011790555050565b6000816000036107ca57507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b816001036107f957507f4fc2fe9184a25f44ce8ddb5f32671fcae6d9c85ed710c199acef16ad16b29911919050565b8160020361082857507f0d826a474f851c563052d929ef0daa70f658aba9ba084f51f6e3483c13c0e59a919050565b8160030361085757507ff7761a16b5e4c0120e4c5704b910dbe18ff6162a9668ed1c2c4efde7c4f15806919050565b8160040361088657507fce9ce09a0ab259d6d14ca3dcd74e6c6b9e7d9074bff66973d4c57ccdffdb2a82919050565b816005036108b557507f02efd44c63015ff1385344e0624867775486d05e6eb1290a24976964a598003b919050565b816006036108e457507fc4dec5845d407ce2ac2e6824bb7857c4b138f819e5789d5d11e812db10c846cd919050565b8160070361091357507f5fbe3f20c23f3bd6ac347917fb0903433e0b9a48373412348240a5f919bfde19919050565b8160080361094257507f92d1b07e56b3da96b7917778cb657f2c513eaeeb4d1579a73b5ea316f25b7289919050565b8160090361097157507fa08add5656d6d3d0827ef909f7647981eac42aa1f51970a752f130f718f6d76a919050565b81600a036109a057507f1704c5f297590d8ec62776b0714f4f3f2234bae0524035342b0da8b8988ebd79919050565b81600b036109cf57507fc5ae2bd47379c2c6d1189cfc3d057948dc6054caf845fcacd8f7affe94b11944919050565b81600c036109fe57507f12a161d6d5561062f387d91ad9f0f8966c0956afdb9e8325458b9e5057b82bdb919050565b81600d03610a2d57507f4ade524ba596de20bbe94507a761c45251ae7a27857ceb4287d9018525b99bc5919050565b81600e03610a5c57507f38287ad69151fa833bf4bf8b8eb6ffb39400a38f1a7e53b473f639c8c60fd5e4919050565b81600f03610a8b57507f57f2ade7d711707e785451f2aba6c95872c7fe03153a98b7327b4024e8068fa3919050565b81601003610aba57507fb1982e0d1b0de46a88d8b17941472e41a86d3ff64571ed8e0ca72d58633547fc919050565b81601103610ae957507fb7c60f8670af15eb32b4ee36727179bc085a3dde03d5f9a1486664ba576b30a6919050565b81601203610b1857507f5ff905c5c659a926b132ef3665a3de5d5a859c1d479e68851085bfc0348c5331919050565b81601303610b4757507fb4dfa78b912e98c9f7eb42d71eb537a02bf3173d44a2eb887a48b3972072dd8e919050565b81601403610b7657507f60919a16a2eb8b91cfb8ba1e5b4c155a76a14c217b5403edbd563f34e508ecdc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064016106ea565b600260055403610bd757604051633ee5aeb560e01b815260040160405180910390fd5b6002600555565b4662aa36a703610c305760405162461bcd60e51b815260206004820152601d60248201527f7769746864726177616c206f6e6c7920616c6c6f776564206f6e204c3200000060448201526064016106ea565b3415610c9c5760405162461bcd60e51b815260206004820152603560248201527f4d6573736167652076616c756520697320737570706f73656420746f206265206044820152747a65726f20666f722045544820696e7374616e636560581b60648201526084016106ea565b6006546040516000916001600160a01b038416918381818185875af1925050503d8060008114610ce8576040519150601f19603f3d011682016040523d82523d6000602084013e610ced565b606091505b5050905080610d4c5760405162461bcd60e51b815260206004820152602560248201527f7061796d656e7420746f205f726563697069656e7420646964206e6f7420676f604482015264207468727560d81b60648201526084016106ea565b5050565b60045460008054909163ffffffff640100000000909104811691610d769116600261134a565b63ffffffff168163ffffffff1603610de95760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b60648201526084016106ea565b8083600080805b60005463ffffffff9081169082161015610e8a57610e0f60028661137d565b63ffffffff16600003610e4d57839250610e2e8163ffffffff16610799565b63ffffffff821660009081526002602052604090208590559150610e69565b63ffffffff811660009081526002602052604090205492508391505b610e7383836104a5565b9350610e806002866113a0565b9450600101610df0565b50600454600090601e90610ea59063ffffffff1660016113c3565b610eaf919061137d565b6004805463ffffffff191663ffffffff8381169182179092556000908152600360209081526040808320899055928a1682526001908190529190208a9055909150610efb9087906113c3565b6004805463ffffffff929092166401000000000267ffffffff000000001990921691909117905550939695505050505050565b6006543414610fa55760405162461bcd60e51b815260206004820152603860248201527f506c656173652073656e6420606d697844656e6f6d696e6174696f6e6020455460448201527f4820616c6f6e672077697468207472616e73616374696f6e000000000000000060648201526084016106ea565b565b828054828255906000526020600020908101928215610fe2579160200282015b82811115610fe2578235825591602001919060010190610fc7565b50610fee929150610ff2565b5090565b5b80821115610fee5760008155600101610ff3565b60006020828403121561101957600080fd5b5035919050565b6000806040838503121561103357600080fd5b50508035926020909101359150565b60008060008060006080868803121561105a57600080fd5b85356001600160a01b038116811461107157600080fd5b94506020860135935060408601359250606086013567ffffffffffffffff8082111561109c57600080fd5b818801915088601f8301126110b057600080fd5b8135818111156110bf57600080fd5b8960208285010111156110d157600080fd5b9699959850939650602001949392505050565b6000806000604084860312156110f957600080fd5b833567ffffffffffffffff8082111561111157600080fd5b818601915086601f83011261112557600080fd5b81358181111561113457600080fd5b8760208260051b850101111561114957600080fd5b6020928301989097509590910135949350505050565b60408152826040820152828460608301376000606084830101526000601f19601f85011682016060810160206060858403016020860152818651808452608085019150602088019450600093505b808410156111cd57845182529382019360019390930192908201906111ad565b5098975050505050505050565b6000602082840312156111ec57600080fd5b815180151581146111fc57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff82168061122f5761122f611203565b6000190192915050565b600181815b80851115611276578163ffffffff0482111561125c5761125c611203565b8085161561126957918102915b93841c939080029061123e565b509250929050565b60008261128d575060016104e0565b8161129a575060006104e0565b81600181146112b057600281146112ba576112eb565b60019150506104e0565b60ff8411156112cb576112cb611203565b6001841b915063ffffffff8211156112e5576112e5611203565b506104e0565b5060208310610133831016604e8410600b8410161715611322575081810a63ffffffff81111561131d5761131d611203565b6104e0565b61132c8383611239565b8063ffffffff0482111561134257611342611203565b029392505050565b600063ffffffff61135f81851682851661127e565b949350505050565b634e487b7160e01b600052601260045260246000fd5b600063ffffffff8084168061139457611394611367565b92169190910692915050565b600063ffffffff808416806113b7576113b7611367565b92169190910492915050565b63ffffffff8181168382160190808211156113e0576113e0611203565b509291505056fea26469706673582212204021d74e76d3823875769ccd020848d034705c7d1109a50582b89b8c063e905764736f6c63430008170033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "getLastRoot()": {
        "details": "Returns the last root"
      },
      "hashLeftRight(bytes32,bytes32)": {
        "details": "Hash 2 tree leaves, returns keccak256(_left, _right)"
      },
      "isKnownRoot(bytes32)": {
        "details": "Whether the root is present in the root history"
      },
      "zeros(uint256)": {
        "details": "provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 78,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "levels",
        "offset": 0,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 82,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "commitmentLeafs",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 86,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "filledSubtrees",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 90,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "roots",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 96,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "currentRootIndex",
        "offset": 0,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 99,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "nextIndex",
        "offset": 4,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 10,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 593,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "denomination",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 623,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "verifier",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 627,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "nullifiers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 631,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "commitments",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 635,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "commitmentsTreeRoots",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 638,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "commitmentsTree",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}