{
  "address": "0xcAEfcEBacB7e19BB52B4B97ED70eBCb5b37aFa41",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_denomination",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_merkleTreeHeight",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VerificationFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "leafIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nullifier",
          "type": "bytes32"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ROOT_HISTORY_SIZE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifier",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "_formatPublicInputs",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "commitmentLeafs",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "commitmentsTree",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commitmentsTreeRoots",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRootIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "denomination",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "filledSubtrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_left",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_right",
          "type": "bytes32"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "isKnownRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levels",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nullifiers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifier",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "snarkProof",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "zeros",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x1f778f969631fbec040c7847bfe0654f2fdde585cbeee96906fbaa9ffc85cc56",
  "receipt": {
    "to": null,
    "from": "0xBe34cc4cebf526887eC2c0035463dD26b3E7FEA4",
    "contractAddress": "0xcAEfcEBacB7e19BB52B4B97ED70eBCb5b37aFa41",
    "transactionIndex": 11,
    "gasUsed": "1434839",
    "logsBloom": "0x
    "blockHash": "0x2f1926e7926e701ff5ddea20f191afc034a12be052d8f08302e0f41162556f6f",
    "transactionHash": "0x1f778f969631fbec040c7847bfe0654f2fdde585cbeee96906fbaa9ffc85cc56",
    "logs": [],
    "blockNumber": 6303598,
    "cumulativeGasUsed": "5065191",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x43037adFaF741aF24962BA0faFC2E7e729EfD9B5",
    "10000000000000000",
    7
  ],
  "numDeployments": 7,
  "solcInputHash": "ab23f8b7552ec5b6a9e36f41bfc6632a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_denomination\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_merkleTreeHeight\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerificationFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"leafIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nullifier\",\"type\":\"bytes32\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROOT_HISTORY_SIZE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifier\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"_formatPublicInputs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commitmentLeafs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commitmentsTree\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitmentsTreeRoots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRootIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denomination\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"filledSubtrees\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_right\",\"type\":\"bytes32\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"isKnownRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levels\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nullifiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifier\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"snarkProof\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"zeros\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"getLastRoot()\":{\"details\":\"Returns the last root\"},\"hashLeftRight(bytes32,bytes32)\":{\"details\":\"Hash 2 tree leaves, returns keccak256(_left, _right)\"},\"isKnownRoot(bytes32)\":{\"details\":\"Whether the root is present in the root history\"},\"zeros(uint256)\":{\"details\":\"provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ToadnadoL1.sol\":\"ToadnadoL1\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/MerkleTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n\\ncontract MerkleTree{\\n  // uint256 public constant FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n  // uint256 public constant ZERO_VALUE = 21663839004416932945382355908790599225266501822907911457504978515578255421292; // = keccak256(\\\"tornado\\\") % FIELD_SIZE\\n\\n  uint32 public levels;\\n  \\n  // merkle leafs\\n  mapping (uint256 => bytes32) public commitmentLeafs; \\n\\n  // the following variables are made public for easier testing and debugging and\\n  // are not supposed to be accessed in regular code\\n\\n  // filledSubtrees and roots could be bytes32[size], but using mappings makes it cheaper because\\n  // it removes index range check on every interaction\\n  mapping(uint256 => bytes32) public filledSubtrees;\\n  mapping(uint256 => bytes32) public roots;\\n  uint32 public constant ROOT_HISTORY_SIZE = 30;\\n  uint32 public currentRootIndex = 0;\\n  uint32 public nextIndex = 0;\\n\\n  constructor(uint32 _levels) {\\n    require(_levels > 0, \\\"_levels should be greater than zero\\\");\\n    require(_levels < 32, \\\"_levels should be less than 32\\\");\\n    levels = _levels;\\n\\n    for (uint32 i = 0; i < _levels; i++) {\\n      filledSubtrees[i] = zeros(i);\\n    }\\n\\n    roots[0] = zeros(_levels - 1);\\n  }\\n\\n  /**\\n    @dev Hash 2 tree leaves, returns keccak256(_left, _right)\\n  */\\n  function hashLeftRight(\\n    bytes32 _left,\\n    bytes32 _right\\n  ) public pure returns (bytes32) {\\n    // require(uint256(_left) < FIELD_SIZE, \\\"_left should be inside the field\\\");\\n    // require(uint256(_right) < FIELD_SIZE, \\\"_right should be inside the field\\\");\\n    bytes32 R = keccak256(abi.encodePacked(_left, _right));\\n    return R;\\n  }\\n\\n  function _insert(bytes32 _leaf) internal returns (uint32 index) {\\n    uint32 _nextIndex = nextIndex;\\n    require(_nextIndex != uint32(2)**levels, \\\"Merkle tree is full. No more leaves can be added\\\");\\n    uint32 currentIndex = _nextIndex;\\n    bytes32 currentLevelHash = _leaf;\\n    bytes32 left;\\n    bytes32 right;\\n\\n    for (uint32 i = 0; i < levels; i++) {\\n      if (currentIndex % 2 == 0) {\\n        left = currentLevelHash;\\n        right = zeros(i);\\n        filledSubtrees[i] = currentLevelHash;\\n      } else {\\n        left = filledSubtrees[i];\\n        right = currentLevelHash;\\n      }\\n      currentLevelHash = hashLeftRight(left, right);\\n      currentIndex /= 2;\\n    }\\n\\n//TODO WHY DOUBLE?!\\n    uint32 newRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\\n    currentRootIndex = newRootIndex;\\n    roots[newRootIndex] = currentLevelHash;\\n    commitmentLeafs[_nextIndex] = _leaf; //storing leaf into mapping with the current index\\n    nextIndex = _nextIndex + 1;\\n    return _nextIndex;\\n  }\\n\\n  /**\\n    @dev Whether the root is present in the root history\\n  */\\n  function isKnownRoot(bytes32 _root) public view returns (bool) {\\n    if (_root == 0) {\\n      return false;\\n    }\\n    uint32 _currentRootIndex = currentRootIndex;\\n    uint32 i = _currentRootIndex;\\n    do {\\n      if (_root == roots[i]) {\\n        return true;\\n      }\\n      if (i == 0) {\\n        i = ROOT_HISTORY_SIZE;\\n      }\\n      i--;\\n    } while (i != _currentRootIndex);\\n    return false;\\n  }\\n\\n  /**\\n    @dev Returns the last root\\n  */\\n  function getLastRoot() public view returns (bytes32) {\\n    return roots[currentRootIndex];\\n  }\\n\\n  /// @dev provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\\n  function zeros(uint256 i) public pure returns (bytes32) {\\n    if (i == 0) return bytes32(0x2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c);\\n    else if (i == 1) return bytes32(0x4fc2fe9184a25f44ce8ddb5f32671fcae6d9c85ed710c199acef16ad16b29911);\\n    else if (i == 2) return bytes32(0x0d826a474f851c563052d929ef0daa70f658aba9ba084f51f6e3483c13c0e59a);\\n    else if (i == 3) return bytes32(0xf7761a16b5e4c0120e4c5704b910dbe18ff6162a9668ed1c2c4efde7c4f15806);\\n    else if (i == 4) return bytes32(0xce9ce09a0ab259d6d14ca3dcd74e6c6b9e7d9074bff66973d4c57ccdffdb2a82);\\n    else if (i == 5) return bytes32(0x02efd44c63015ff1385344e0624867775486d05e6eb1290a24976964a598003b);\\n    else if (i == 6) return bytes32(0xc4dec5845d407ce2ac2e6824bb7857c4b138f819e5789d5d11e812db10c846cd);\\n    else if (i == 7) return bytes32(0x5fbe3f20c23f3bd6ac347917fb0903433e0b9a48373412348240a5f919bfde19);\\n    else if (i == 8) return bytes32(0x92d1b07e56b3da96b7917778cb657f2c513eaeeb4d1579a73b5ea316f25b7289);\\n    else if (i == 9) return bytes32(0xa08add5656d6d3d0827ef909f7647981eac42aa1f51970a752f130f718f6d76a);\\n    else if (i == 10) return bytes32(0x1704c5f297590d8ec62776b0714f4f3f2234bae0524035342b0da8b8988ebd79);\\n    else if (i == 11) return bytes32(0xc5ae2bd47379c2c6d1189cfc3d057948dc6054caf845fcacd8f7affe94b11944);\\n    else if (i == 12) return bytes32(0x12a161d6d5561062f387d91ad9f0f8966c0956afdb9e8325458b9e5057b82bdb);\\n    else if (i == 13) return bytes32(0x4ade524ba596de20bbe94507a761c45251ae7a27857ceb4287d9018525b99bc5);\\n    else if (i == 14) return bytes32(0x38287ad69151fa833bf4bf8b8eb6ffb39400a38f1a7e53b473f639c8c60fd5e4);\\n    else if (i == 15) return bytes32(0x57f2ade7d711707e785451f2aba6c95872c7fe03153a98b7327b4024e8068fa3);\\n    else if (i == 16) return bytes32(0xb1982e0d1b0de46a88d8b17941472e41a86d3ff64571ed8e0ca72d58633547fc);\\n    else if (i == 17) return bytes32(0xb7c60f8670af15eb32b4ee36727179bc085a3dde03d5f9a1486664ba576b30a6);\\n    else if (i == 18) return bytes32(0x5ff905c5c659a926b132ef3665a3de5d5a859c1d479e68851085bfc0348c5331);\\n    else if (i == 19) return bytes32(0xb4dfa78b912e98c9f7eb42d71eb537a02bf3173d44a2eb887a48b3972072dd8e);\\n    else if (i == 20) return bytes32(0x60919a16a2eb8b91cfb8ba1e5b4c155a76a14c217b5403edbd563f34e508ecdc);\\n    else revert(\\\"Index out of bounds\\\");\\n  }\\n}\",\"keccak256\":\"0x69d62a0d905ef52b113cc6977c420be4c888243bbcc3e3add826de15312773f7\",\"license\":\"MIT\"},\"contracts/Toadnado.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"./MerkleTree.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ninterface IVerifier {\\n    function verify(\\n        bytes calldata _proof,\\n        bytes32[] calldata _publicInputs\\n    ) external view returns (bool);\\n}\\nerror VerificationFailed();\\nabstract contract Toadnado is MerkleTree, ReentrancyGuard{\\n  //IVerifier public immutable verifier;\\n  uint256 public denomination;\\n\\n    constructor(\\n        address _verifier, \\n        uint256 _denomination,\\n        uint32 _merkleTreeHeight\\n        ) MerkleTree(_merkleTreeHeight) {\\n        require(_denomination > 0, \\\"denomination should be greater than 0\\\");\\n        verifier = _verifier;\\n        denomination = _denomination;\\n    }\\n\\n    // contract that verifies the zkSnark proof\\n    address public verifier;\\n\\n    // nullifiers of the l1Withdraws\\n    // its a identifier of a commitment(deposit) that is revealed when it is withdrawn\\n    // to prevent it being spend again\\n    mapping (bytes32 => bool) public nullifiers;\\n    //keeping track of commitments to prevent deposits from the same commitment\\n    mapping(bytes32 => bool) public commitments;\\n\\n    // a history of valid merkle roots, to verify that a proof refers to a valid deposit\\n    mapping (bytes32 => bool) public commitmentsTreeRoots;\\n\\n\\n    //TODO find out depth and set array lenght to that as 2^depth\\n    // contains the entire current merkle tree from the commitements (leafs) to the root\\n    // ex at depth 1 (2 commitements)\\n    // [commitment1,commitment2, hash1atLevel1, hash2atLevel1, root]\\n    bytes32[] public commitmentsTree;\\n\\n    event Deposit(bytes32 indexed commitment, uint32 leafIndex, uint256 timestamp);\\n    event Withdrawal(address recipient, bytes32 nullifier);\\n\\n\\n    function deposit(bytes32 _commitment) external payable nonReentrant {\\n        require(!commitments[_commitment], \\\"The commitment has been submitted\\\");\\n\\n        //DONE update merkle tree\\n        uint32 insertedIndex = _insert(_commitment);\\n        commitments[_commitment] = true;\\n\\n        //DONE get denomination going\\n        _processDeposit();\\n\\n        emit Deposit(_commitment, insertedIndex, block.timestamp);\\n \\n    }\\n\\n    /** @dev this function is defined in a child contract */\\n    function _processDeposit() internal virtual;\\n\\n    function withdraw(\\n        bytes32 _root,\\n        bytes32 _nullifier,\\n        address payable _recipient, \\n        bytes calldata snarkProof\\n        ) external payable nonReentrant  {\\n\\n        bytes32[] memory publicInputs = _formatPublicInputs(_root, _nullifier, _recipient);\\n        if (!IVerifier(verifier).verify(snarkProof, publicInputs)) {\\n            revert VerificationFailed();\\n        }\\n    \\n        _processWithdraw(_recipient);\\n        emit Withdrawal(_recipient, _nullifier);\\n    }\\n    \\n    function _processWithdraw(\\n    address payable _recipient\\n    ) internal virtual;\\n\\n\\n    //TODO make private\\n    function _formatPublicInputs(bytes32 _root, bytes32 _nullifier,address _recipient) public returns(bytes32[] memory) {\\n        // _root\\n        bytes32[] memory publicInputs = new bytes32[](65);\\n        for (uint i=0; i < 33; i++) {\\n            publicInputs[i] = bytes32(uint256(uint8(_root[i-1])));\\n        }\\n\\n        // _nullifier\\n        for (uint i=32; i < 64; i++) {\\n            publicInputs[i] = bytes32(uint256(uint8(_nullifier[i-33])));\\n        }\\n\\n        // _recipient\\n        bytes32 recipientBytes = bytes32(uint256(uint160(bytes20(_recipient))));\\n        publicInputs[65] = recipientBytes;\\n        return publicInputs;\\n    }\\n\\n\\n    //TODO remove this\\n    //debug functions\\n    // function setCommitmentsTree(bytes32[] calldata _commitmentsTree, bytes32 _root) public {\\n    //     commitmentsTree = _commitmentsTree;\\n    //     commitmentsTreeRoots[_root] = true;\\n    // }\\n\\n\\n\\n\\n\\n\\n}\",\"keccak256\":\"0x747d442d321cf145b474f97a8c46b70006fdcf3e98005d11c72fb34e01a30161\",\"license\":\"MIT\"},\"contracts/ToadnadoL1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"./Toadnado.sol\\\";\\n\\ncontract ToadnadoL1 is Toadnado {\\n  constructor(\\n    //IVerifier _verifier,\\n    address _verifier,\\n    uint256 _denomination,\\n    uint32 _merkleTreeHeight\\n  ) Toadnado(_verifier, _denomination, _merkleTreeHeight) {}\\n  \\n\\n  function _processDeposit() internal override {\\n    require(msg.value == denomination, \\\"Please send `mixDenomination` ETH along with transaction\\\");\\n  }\\n\\n  function _processWithdraw(\\n    address payable _recipient\\n  ) internal override{\\n    //TODO ADD THIS LATER: only allow withdrawal on L2 for now \\n    //require(block.chainid!=11155111, \\\"withdrawal only allowed on L2\\\");\\n    // sanity checks\\n    require(msg.value == 0, \\\"Message value is supposed to be zero for ETH instance\\\");\\n    (bool success, ) = _recipient.call{ value: denomination }(\\\"\\\");\\n    require(success, \\\"payment to _recipient did not go thru\\\");\\n  }\\n\\n}\",\"keccak256\":\"0x45c02f0c0eea130d45f752c360b9d049b9d9b04e6d4f678f1f7d5317dfd96d28\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600480546001600160401b031916905534801562000020575f80fd5b5060405162001a9838038062001a98833981016040819052620000439162000672565b828282805f8163ffffffff1611620000ae5760405162461bcd60e51b815260206004820152602360248201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60448201526265726f60e81b60648201526084015b60405180910390fd5b60208163ffffffff1610620001065760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e20333200006044820152606401620000a5565b5f805463ffffffff191663ffffffff83161781555b8163ffffffff168163ffffffff1610156200015f576200014163ffffffff821662000239565b63ffffffff82165f908152600260205260409020556001016200011b565b506200017d62000171600183620006c8565b63ffffffff1662000239565b5f805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff55506001600555816200020a5760405162461bcd60e51b815260206004820152602560248201527f64656e6f6d696e6174696f6e2073686f756c6420626520677265617465722074604482015264068616e20360dc1b6064820152608401620000a5565b50600780546001600160a01b0319166001600160a01b03939093169290921790915560065550620006f9915050565b5f815f036200026957507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b816001036200029957507f4fc2fe9184a25f44ce8ddb5f32671fcae6d9c85ed710c199acef16ad16b29911919050565b81600203620002c957507f0d826a474f851c563052d929ef0daa70f658aba9ba084f51f6e3483c13c0e59a919050565b81600303620002f957507ff7761a16b5e4c0120e4c5704b910dbe18ff6162a9668ed1c2c4efde7c4f15806919050565b816004036200032957507fce9ce09a0ab259d6d14ca3dcd74e6c6b9e7d9074bff66973d4c57ccdffdb2a82919050565b816005036200035957507f02efd44c63015ff1385344e0624867775486d05e6eb1290a24976964a598003b919050565b816006036200038957507fc4dec5845d407ce2ac2e6824bb7857c4b138f819e5789d5d11e812db10c846cd919050565b81600703620003b957507f5fbe3f20c23f3bd6ac347917fb0903433e0b9a48373412348240a5f919bfde19919050565b81600803620003e957507f92d1b07e56b3da96b7917778cb657f2c513eaeeb4d1579a73b5ea316f25b7289919050565b816009036200041957507fa08add5656d6d3d0827ef909f7647981eac42aa1f51970a752f130f718f6d76a919050565b81600a036200044957507f1704c5f297590d8ec62776b0714f4f3f2234bae0524035342b0da8b8988ebd79919050565b81600b036200047957507fc5ae2bd47379c2c6d1189cfc3d057948dc6054caf845fcacd8f7affe94b11944919050565b81600c03620004a957507f12a161d6d5561062f387d91ad9f0f8966c0956afdb9e8325458b9e5057b82bdb919050565b81600d03620004d957507f4ade524ba596de20bbe94507a761c45251ae7a27857ceb4287d9018525b99bc5919050565b81600e036200050957507f38287ad69151fa833bf4bf8b8eb6ffb39400a38f1a7e53b473f639c8c60fd5e4919050565b81600f036200053957507f57f2ade7d711707e785451f2aba6c95872c7fe03153a98b7327b4024e8068fa3919050565b816010036200056957507fb1982e0d1b0de46a88d8b17941472e41a86d3ff64571ed8e0ca72d58633547fc919050565b816011036200059957507fb7c60f8670af15eb32b4ee36727179bc085a3dde03d5f9a1486664ba576b30a6919050565b81601203620005c957507f5ff905c5c659a926b132ef3665a3de5d5a859c1d479e68851085bfc0348c5331919050565b81601303620005f957507fb4dfa78b912e98c9f7eb42d71eb537a02bf3173d44a2eb887a48b3972072dd8e919050565b816014036200062957507f60919a16a2eb8b91cfb8ba1e5b4c155a76a14c217b5403edbd563f34e508ecdc919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152606401620000a5565b5f805f6060848603121562000685575f80fd5b83516001600160a01b03811681146200069c575f80fd5b60208501516040860151919450925063ffffffff81168114620006bd575f80fd5b809150509250925092565b63ffffffff828116828216039080821115620006f257634e487b7160e01b5f52601160045260245ffd5b5092915050565b61139180620007075f395ff3fe60806040526004361061011b575f3560e01c80638bca6d161161009d578063c2b40ae411610062578063c2b40ae414610368578063cd87a3b414610393578063e8295588146103a7578063f178e47c146103c6578063fc7e9c6f146103f1575f80fd5b80638bca6d16146102d157806390eeb02b146102e65780639ec4415414610302578063b214faa51461032d578063ba70f75714610340575f80fd5b80634ecf518b116100e35780634ecf518b146102095780634fe3fbf014610239578063621a5286146102655780636d9833e314610284578063839df945146102a3575f80fd5b806311a0ed1d1461011f5780632997e86b146101345780632b7ac3f3146101775780633591d78d146101ae57806338bf282e146101dc575b5f80fd5b61013261012d366004610fa6565b610415565b005b34801561013f575f80fd5b5061016261014e366004611034565b60086020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b348015610182575f80fd5b50600754610196906001600160a01b031681565b6040516001600160a01b03909116815260200161016e565b3480156101b9575f80fd5b506101626101c8366004611034565b600a6020525f908152604090205460ff1681565b3480156101e7575f80fd5b506101fb6101f636600461104b565b610517565b60405190815260200161016e565b348015610214575f80fd5b505f546102249063ffffffff1681565b60405163ffffffff909116815260200161016e565b348015610244575f80fd5b5061025861025336600461106b565b610557565b60405161016e91906110db565b348015610270575f80fd5b506101fb61027f366004611034565b61065c565b34801561028f575f80fd5b5061016261029e366004611034565b61067b565b3480156102ae575f80fd5b506101626102bd366004611034565b60096020525f908152604090205460ff1681565b3480156102dc575f80fd5b506101fb60065481565b3480156102f1575f80fd5b506004546102249063ffffffff1681565b34801561030d575f80fd5b506101fb61031c366004611034565b60016020525f908152604090205481565b61013261033b366004611034565b6106f4565b34801561034b575f80fd5b5060045463ffffffff165f908152600360205260409020546101fb565b348015610373575f80fd5b506101fb610382366004611034565b60036020525f908152604090205481565b34801561039e575f80fd5b50610224601e81565b3480156103b2575f80fd5b506101fb6103c1366004611034565b6107e3565b3480156103d1575f80fd5b506101fb6103e0366004611034565b60026020525f908152604090205481565b3480156103fc575f80fd5b5060045461022490640100000000900463ffffffff1681565b61041d610bfc565b5f610429868686610557565b600754604051633a94343960e21b81529192506001600160a01b03169063ea50d0e49061045e908690869086906004016110f4565b602060405180830381865afa158015610479573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061049d919061113a565b6104ba5760405163439cc0cd60e01b815260040160405180910390fd5b6104c384610c26565b604080516001600160a01b0386168152602081018790527f0ce490531f6c8ae2f1ff174643bc8b7ed5e52987ab50dc1e8f33655d2cd8c90b910160405180910390a1506105106001600555565b5050505050565b5f808383604051602001610535929190918252602082015260400190565b60408051601f1981840301815291905280516020909101209150505b92915050565b60408051604180825261084082019092526060915f919060208201610820803683370190505090505f5b60218110156105d1578561059660018361116d565b602081106105a6576105a6611180565b835191901a908390839081106105be576105be611180565b6020908102919091010152600101610581565b5060205b604081101561062557846105ea60218361116d565b602081106105fa576105fa611180565b835191901a9083908390811061061257610612611180565b60209081029190910101526001016105d5565b5080516001600160a01b0384169081908390604190811061064857610648611180565b602090810291909101015250949350505050565b600b818154811061066b575f80fd5b5f91825260209091200154905081565b5f81810361068a57505f919050565b60045463ffffffff16805b63ffffffff81165f9081526003602052604090205484036106ba575060019392505050565b8063ffffffff165f036106cb5750601e5b806106d581611194565b9150508163ffffffff168163ffffffff160361069557505f9392505050565b6106fc610bfc565b5f8181526009602052604090205460ff16156107695760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b60648201526084015b60405180910390fd5b5f61077382610d43565b5f838152600960205260409020805460ff191660011790559050610795610f19565b6040805163ffffffff8316815242602082015283917fa945e51eec50ab98c161376f0db4cf2aeba3ec92755fe2fcd388bdbbb80ff196910160405180910390a2506107e06001600555565b50565b5f815f0361081257507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b8160010361084157507f4fc2fe9184a25f44ce8ddb5f32671fcae6d9c85ed710c199acef16ad16b29911919050565b8160020361087057507f0d826a474f851c563052d929ef0daa70f658aba9ba084f51f6e3483c13c0e59a919050565b8160030361089f57507ff7761a16b5e4c0120e4c5704b910dbe18ff6162a9668ed1c2c4efde7c4f15806919050565b816004036108ce57507fce9ce09a0ab259d6d14ca3dcd74e6c6b9e7d9074bff66973d4c57ccdffdb2a82919050565b816005036108fd57507f02efd44c63015ff1385344e0624867775486d05e6eb1290a24976964a598003b919050565b8160060361092c57507fc4dec5845d407ce2ac2e6824bb7857c4b138f819e5789d5d11e812db10c846cd919050565b8160070361095b57507f5fbe3f20c23f3bd6ac347917fb0903433e0b9a48373412348240a5f919bfde19919050565b8160080361098a57507f92d1b07e56b3da96b7917778cb657f2c513eaeeb4d1579a73b5ea316f25b7289919050565b816009036109b957507fa08add5656d6d3d0827ef909f7647981eac42aa1f51970a752f130f718f6d76a919050565b81600a036109e857507f1704c5f297590d8ec62776b0714f4f3f2234bae0524035342b0da8b8988ebd79919050565b81600b03610a1757507fc5ae2bd47379c2c6d1189cfc3d057948dc6054caf845fcacd8f7affe94b11944919050565b81600c03610a4657507f12a161d6d5561062f387d91ad9f0f8966c0956afdb9e8325458b9e5057b82bdb919050565b81600d03610a7557507f4ade524ba596de20bbe94507a761c45251ae7a27857ceb4287d9018525b99bc5919050565b81600e03610aa457507f38287ad69151fa833bf4bf8b8eb6ffb39400a38f1a7e53b473f639c8c60fd5e4919050565b81600f03610ad357507f57f2ade7d711707e785451f2aba6c95872c7fe03153a98b7327b4024e8068fa3919050565b81601003610b0257507fb1982e0d1b0de46a88d8b17941472e41a86d3ff64571ed8e0ca72d58633547fc919050565b81601103610b3157507fb7c60f8670af15eb32b4ee36727179bc085a3dde03d5f9a1486664ba576b30a6919050565b81601203610b6057507f5ff905c5c659a926b132ef3665a3de5d5a859c1d479e68851085bfc0348c5331919050565b81601303610b8f57507fb4dfa78b912e98c9f7eb42d71eb537a02bf3173d44a2eb887a48b3972072dd8e919050565b81601403610bbe57507f60919a16a2eb8b91cfb8ba1e5b4c155a76a14c217b5403edbd563f34e508ecdc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b6044820152606401610760565b600260055403610c1f57604051633ee5aeb560e01b815260040160405180910390fd5b6002600555565b3415610c925760405162461bcd60e51b815260206004820152603560248201527f4d6573736167652076616c756520697320737570706f73656420746f206265206044820152747a65726f20666f722045544820696e7374616e636560581b6064820152608401610760565b6006546040515f916001600160a01b038416918381818185875af1925050503d805f8114610cdb576040519150601f19603f3d011682016040523d82523d5f602084013e610ce0565b606091505b5050905080610d3f5760405162461bcd60e51b815260206004820152602560248201527f7061796d656e7420746f205f726563697069656e7420646964206e6f7420676f604482015264207468727560d81b6064820152608401610760565b5050565b6004545f8054909163ffffffff640100000000909104811691610d68911660026112c3565b63ffffffff168163ffffffff1603610ddb5760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b6064820152608401610760565b80835f80805b5f5463ffffffff9081169082161015610e7757610dff6002866112f3565b63ffffffff165f03610e3b57839250610e1d8163ffffffff166107e3565b63ffffffff82165f9081526002602052604090208590559150610e56565b63ffffffff81165f9081526002602052604090205492508391505b610e608383610517565b9350610e6d600286611315565b9450600101610de1565b506004545f90601e90610e919063ffffffff166001611337565b610e9b91906112f3565b6004805463ffffffff191663ffffffff8381169182179092555f908152600360209081526040808320899055928a1682526001908190529190208a9055909150610ee6908790611337565b6004805463ffffffff929092166401000000000267ffffffff000000001990921691909117905550939695505050505050565b6006543414610f905760405162461bcd60e51b815260206004820152603860248201527f506c656173652073656e6420606d697844656e6f6d696e6174696f6e6020455460448201527f4820616c6f6e672077697468207472616e73616374696f6e00000000000000006064820152608401610760565b565b6001600160a01b03811681146107e0575f80fd5b5f805f805f60808688031215610fba575f80fd5b85359450602086013593506040860135610fd381610f92565b9250606086013567ffffffffffffffff80821115610fef575f80fd5b818801915088601f830112611002575f80fd5b813581811115611010575f80fd5b896020828501011115611021575f80fd5b9699959850939650602001949392505050565b5f60208284031215611044575f80fd5b5035919050565b5f806040838503121561105c575f80fd5b50508035926020909101359150565b5f805f6060848603121561107d575f80fd5b8335925060208401359150604084013561109681610f92565b809150509250925092565b5f815180845260208085019450602084015f5b838110156110d0578151875295820195908201906001016110b4565b509495945050505050565b602081525f6110ed60208301846110a1565b9392505050565b60408152826040820152828460608301375f606084830101525f601f19601f8501168201606083820301602084015261113060608201856110a1565b9695505050505050565b5f6020828403121561114a575f80fd5b815180151581146110ed575f80fd5b634e487b7160e01b5f52601160045260245ffd5b8181038181111561055157610551611159565b634e487b7160e01b5f52603260045260245ffd5b5f63ffffffff8216806111a9576111a9611159565b5f190192915050565b60018163ffffffff825b808611156111f0578282048311156111d6576111d6611159565b808616156111e357928202925b94851c94918002916111bc565b50509250929050565b5f8261120757506001610551565b8161121357505f610551565b8160018114611229576002811461123357611264565b6001915050610551565b60ff84111561124457611244611159565b6001841b915063ffffffff82111561125e5761125e611159565b50610551565b5060208310610133831016604e8410600b841016171561129b575081810a63ffffffff81111561129657611296611159565b610551565b6112a583836111b2565b8063ffffffff048211156112bb576112bb611159565b029392505050565b5f63ffffffff6112d78185168285166111f9565b949350505050565b634e487b7160e01b5f52601260045260245ffd5b5f63ffffffff80841680611309576113096112df565b92169190910692915050565b5f63ffffffff8084168061132b5761132b6112df565b92169190910492915050565b63ffffffff81811683821601908082111561135457611354611159565b509291505056fea2646970667358221220b4880c25ee35a76f7c3a3bf99dc9ce8c95211c61e7dfde31d051a4f58c26874b64736f6c63430008170033",
  "deployedBytecode": "0x60806040526004361061011b575f3560e01c80638bca6d161161009d578063c2b40ae411610062578063c2b40ae414610368578063cd87a3b414610393578063e8295588146103a7578063f178e47c146103c6578063fc7e9c6f146103f1575f80fd5b80638bca6d16146102d157806390eeb02b146102e65780639ec4415414610302578063b214faa51461032d578063ba70f75714610340575f80fd5b80634ecf518b116100e35780634ecf518b146102095780634fe3fbf014610239578063621a5286146102655780636d9833e314610284578063839df945146102a3575f80fd5b806311a0ed1d1461011f5780632997e86b146101345780632b7ac3f3146101775780633591d78d146101ae57806338bf282e146101dc575b5f80fd5b61013261012d366004610fa6565b610415565b005b34801561013f575f80fd5b5061016261014e366004611034565b60086020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b348015610182575f80fd5b50600754610196906001600160a01b031681565b6040516001600160a01b03909116815260200161016e565b3480156101b9575f80fd5b506101626101c8366004611034565b600a6020525f908152604090205460ff1681565b3480156101e7575f80fd5b506101fb6101f636600461104b565b610517565b60405190815260200161016e565b348015610214575f80fd5b505f546102249063ffffffff1681565b60405163ffffffff909116815260200161016e565b348015610244575f80fd5b5061025861025336600461106b565b610557565b60405161016e91906110db565b348015610270575f80fd5b506101fb61027f366004611034565b61065c565b34801561028f575f80fd5b5061016261029e366004611034565b61067b565b3480156102ae575f80fd5b506101626102bd366004611034565b60096020525f908152604090205460ff1681565b3480156102dc575f80fd5b506101fb60065481565b3480156102f1575f80fd5b506004546102249063ffffffff1681565b34801561030d575f80fd5b506101fb61031c366004611034565b60016020525f908152604090205481565b61013261033b366004611034565b6106f4565b34801561034b575f80fd5b5060045463ffffffff165f908152600360205260409020546101fb565b348015610373575f80fd5b506101fb610382366004611034565b60036020525f908152604090205481565b34801561039e575f80fd5b50610224601e81565b3480156103b2575f80fd5b506101fb6103c1366004611034565b6107e3565b3480156103d1575f80fd5b506101fb6103e0366004611034565b60026020525f908152604090205481565b3480156103fc575f80fd5b5060045461022490640100000000900463ffffffff1681565b61041d610bfc565b5f610429868686610557565b600754604051633a94343960e21b81529192506001600160a01b03169063ea50d0e49061045e908690869086906004016110f4565b602060405180830381865afa158015610479573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061049d919061113a565b6104ba5760405163439cc0cd60e01b815260040160405180910390fd5b6104c384610c26565b604080516001600160a01b0386168152602081018790527f0ce490531f6c8ae2f1ff174643bc8b7ed5e52987ab50dc1e8f33655d2cd8c90b910160405180910390a1506105106001600555565b5050505050565b5f808383604051602001610535929190918252602082015260400190565b60408051601f1981840301815291905280516020909101209150505b92915050565b60408051604180825261084082019092526060915f919060208201610820803683370190505090505f5b60218110156105d1578561059660018361116d565b602081106105a6576105a6611180565b835191901a908390839081106105be576105be611180565b6020908102919091010152600101610581565b5060205b604081101561062557846105ea60218361116d565b602081106105fa576105fa611180565b835191901a9083908390811061061257610612611180565b60209081029190910101526001016105d5565b5080516001600160a01b0384169081908390604190811061064857610648611180565b602090810291909101015250949350505050565b600b818154811061066b575f80fd5b5f91825260209091200154905081565b5f81810361068a57505f919050565b60045463ffffffff16805b63ffffffff81165f9081526003602052604090205484036106ba575060019392505050565b8063ffffffff165f036106cb5750601e5b806106d581611194565b9150508163ffffffff168163ffffffff160361069557505f9392505050565b6106fc610bfc565b5f8181526009602052604090205460ff16156107695760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b60648201526084015b60405180910390fd5b5f61077382610d43565b5f838152600960205260409020805460ff191660011790559050610795610f19565b6040805163ffffffff8316815242602082015283917fa945e51eec50ab98c161376f0db4cf2aeba3ec92755fe2fcd388bdbbb80ff196910160405180910390a2506107e06001600555565b50565b5f815f0361081257507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b8160010361084157507f4fc2fe9184a25f44ce8ddb5f32671fcae6d9c85ed710c199acef16ad16b29911919050565b8160020361087057507f0d826a474f851c563052d929ef0daa70f658aba9ba084f51f6e3483c13c0e59a919050565b8160030361089f57507ff7761a16b5e4c0120e4c5704b910dbe18ff6162a9668ed1c2c4efde7c4f15806919050565b816004036108ce57507fce9ce09a0ab259d6d14ca3dcd74e6c6b9e7d9074bff66973d4c57ccdffdb2a82919050565b816005036108fd57507f02efd44c63015ff1385344e0624867775486d05e6eb1290a24976964a598003b919050565b8160060361092c57507fc4dec5845d407ce2ac2e6824bb7857c4b138f819e5789d5d11e812db10c846cd919050565b8160070361095b57507f5fbe3f20c23f3bd6ac347917fb0903433e0b9a48373412348240a5f919bfde19919050565b8160080361098a57507f92d1b07e56b3da96b7917778cb657f2c513eaeeb4d1579a73b5ea316f25b7289919050565b816009036109b957507fa08add5656d6d3d0827ef909f7647981eac42aa1f51970a752f130f718f6d76a919050565b81600a036109e857507f1704c5f297590d8ec62776b0714f4f3f2234bae0524035342b0da8b8988ebd79919050565b81600b03610a1757507fc5ae2bd47379c2c6d1189cfc3d057948dc6054caf845fcacd8f7affe94b11944919050565b81600c03610a4657507f12a161d6d5561062f387d91ad9f0f8966c0956afdb9e8325458b9e5057b82bdb919050565b81600d03610a7557507f4ade524ba596de20bbe94507a761c45251ae7a27857ceb4287d9018525b99bc5919050565b81600e03610aa457507f38287ad69151fa833bf4bf8b8eb6ffb39400a38f1a7e53b473f639c8c60fd5e4919050565b81600f03610ad357507f57f2ade7d711707e785451f2aba6c95872c7fe03153a98b7327b4024e8068fa3919050565b81601003610b0257507fb1982e0d1b0de46a88d8b17941472e41a86d3ff64571ed8e0ca72d58633547fc919050565b81601103610b3157507fb7c60f8670af15eb32b4ee36727179bc085a3dde03d5f9a1486664ba576b30a6919050565b81601203610b6057507f5ff905c5c659a926b132ef3665a3de5d5a859c1d479e68851085bfc0348c5331919050565b81601303610b8f57507fb4dfa78b912e98c9f7eb42d71eb537a02bf3173d44a2eb887a48b3972072dd8e919050565b81601403610bbe57507f60919a16a2eb8b91cfb8ba1e5b4c155a76a14c217b5403edbd563f34e508ecdc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b6044820152606401610760565b600260055403610c1f57604051633ee5aeb560e01b815260040160405180910390fd5b6002600555565b3415610c925760405162461bcd60e51b815260206004820152603560248201527f4d6573736167652076616c756520697320737570706f73656420746f206265206044820152747a65726f20666f722045544820696e7374616e636560581b6064820152608401610760565b6006546040515f916001600160a01b038416918381818185875af1925050503d805f8114610cdb576040519150601f19603f3d011682016040523d82523d5f602084013e610ce0565b606091505b5050905080610d3f5760405162461bcd60e51b815260206004820152602560248201527f7061796d656e7420746f205f726563697069656e7420646964206e6f7420676f604482015264207468727560d81b6064820152608401610760565b5050565b6004545f8054909163ffffffff640100000000909104811691610d68911660026112c3565b63ffffffff168163ffffffff1603610ddb5760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b6064820152608401610760565b80835f80805b5f5463ffffffff9081169082161015610e7757610dff6002866112f3565b63ffffffff165f03610e3b57839250610e1d8163ffffffff166107e3565b63ffffffff82165f9081526002602052604090208590559150610e56565b63ffffffff81165f9081526002602052604090205492508391505b610e608383610517565b9350610e6d600286611315565b9450600101610de1565b506004545f90601e90610e919063ffffffff166001611337565b610e9b91906112f3565b6004805463ffffffff191663ffffffff8381169182179092555f908152600360209081526040808320899055928a1682526001908190529190208a9055909150610ee6908790611337565b6004805463ffffffff929092166401000000000267ffffffff000000001990921691909117905550939695505050505050565b6006543414610f905760405162461bcd60e51b815260206004820152603860248201527f506c656173652073656e6420606d697844656e6f6d696e6174696f6e6020455460448201527f4820616c6f6e672077697468207472616e73616374696f6e00000000000000006064820152608401610760565b565b6001600160a01b03811681146107e0575f80fd5b5f805f805f60808688031215610fba575f80fd5b85359450602086013593506040860135610fd381610f92565b9250606086013567ffffffffffffffff80821115610fef575f80fd5b818801915088601f830112611002575f80fd5b813581811115611010575f80fd5b896020828501011115611021575f80fd5b9699959850939650602001949392505050565b5f60208284031215611044575f80fd5b5035919050565b5f806040838503121561105c575f80fd5b50508035926020909101359150565b5f805f6060848603121561107d575f80fd5b8335925060208401359150604084013561109681610f92565b809150509250925092565b5f815180845260208085019450602084015f5b838110156110d0578151875295820195908201906001016110b4565b509495945050505050565b602081525f6110ed60208301846110a1565b9392505050565b60408152826040820152828460608301375f606084830101525f601f19601f8501168201606083820301602084015261113060608201856110a1565b9695505050505050565b5f6020828403121561114a575f80fd5b815180151581146110ed575f80fd5b634e487b7160e01b5f52601160045260245ffd5b8181038181111561055157610551611159565b634e487b7160e01b5f52603260045260245ffd5b5f63ffffffff8216806111a9576111a9611159565b5f190192915050565b60018163ffffffff825b808611156111f0578282048311156111d6576111d6611159565b808616156111e357928202925b94851c94918002916111bc565b50509250929050565b5f8261120757506001610551565b8161121357505f610551565b8160018114611229576002811461123357611264565b6001915050610551565b60ff84111561124457611244611159565b6001841b915063ffffffff82111561125e5761125e611159565b50610551565b5060208310610133831016604e8410600b841016171561129b575081810a63ffffffff81111561129657611296611159565b610551565b6112a583836111b2565b8063ffffffff048211156112bb576112bb611159565b029392505050565b5f63ffffffff6112d78185168285166111f9565b949350505050565b634e487b7160e01b5f52601260045260245ffd5b5f63ffffffff80841680611309576113096112df565b92169190910692915050565b5f63ffffffff8084168061132b5761132b6112df565b92169190910492915050565b63ffffffff81811683821601908082111561135457611354611159565b509291505056fea2646970667358221220b4880c25ee35a76f7c3a3bf99dc9ce8c95211c61e7dfde31d051a4f58c26874b64736f6c63430008170033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "getLastRoot()": {
        "details": "Returns the last root"
      },
      "hashLeftRight(bytes32,bytes32)": {
        "details": "Hash 2 tree leaves, returns keccak256(_left, _right)"
      },
      "isKnownRoot(bytes32)": {
        "details": "Whether the root is present in the root history"
      },
      "zeros(uint256)": {
        "details": "provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 72,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "levels",
        "offset": 0,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 76,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "commitmentLeafs",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 80,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "filledSubtrees",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 84,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "roots",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 90,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "currentRootIndex",
        "offset": 0,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 93,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "nextIndex",
        "offset": 4,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 10,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 587,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "denomination",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 617,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "verifier",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 621,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "nullifiers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 625,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "commitments",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 629,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "commitmentsTreeRoots",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 632,
        "contract": "contracts/ToadnadoL1.sol:ToadnadoL1",
        "label": "commitmentsTree",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}