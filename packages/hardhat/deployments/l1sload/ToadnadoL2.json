{
  "address": "0xe7716DD0ef16d89c7E5d91De40265582f11cA707",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_denomination",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_merkleTreeHeight",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VerificationFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "leafIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nullifier",
          "type": "bytes32"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ROOT_HISTORY_SIZE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifier",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "_formatPublicInputs",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "commitmentLeafs",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commitmentsTreeRoots",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRootIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "denomination",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "filledSubtrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllCommitments",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "key",
          "type": "uint256"
        }
      ],
      "name": "getL1LeafCommitments",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "key",
          "type": "uint256"
        }
      ],
      "name": "getL1Root",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_left",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_right",
          "type": "bytes32"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "isKnownL1Root",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "isKnownRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        }
      ],
      "name": "isSpent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_nullifierHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "isSpentArray",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "spent",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1_currentRootIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levels",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nullifiers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1_contract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        }
      ],
      "name": "readSingleSlot",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiveEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_l1root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_l2root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifier",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "snarkProof",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "zeros",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x64684205346630fc34ab869c24a760841fc0e195c7168576c44c4de6387e20aa",
  "receipt": {
    "to": null,
    "from": "0x794464c8c91A2bE4aDdAbfdB82b6db7B1Bb1DBC7",
    "contractAddress": "0xe7716DD0ef16d89c7E5d91De40265582f11cA707",
    "transactionIndex": 0,
    "gasUsed": "1939741",
    "logsBloom": "0x
    "blockHash": "0xf1431598e23e3109bd694f07c5f91e0a34327453a73398ba08f4d246a6a76c7b",
    "transactionHash": "0x64684205346630fc34ab869c24a760841fc0e195c7168576c44c4de6387e20aa",
    "logs": [],
    "blockNumber": 374094,
    "cumulativeGasUsed": "1939741",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1180607885aaB8Fc3BA853cD00B1AD5268F88372",
    "0xa4762435Db7D4e405a124D531bF7aFffD15987dF",
    "10000000000000000",
    5
  ],
  "numDeployments": 38,
  "solcInputHash": "c6135f928d5acf6c1dbc1af13b04528d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_denomination\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_merkleTreeHeight\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerificationFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"leafIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nullifier\",\"type\":\"bytes32\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROOT_HISTORY_SIZE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifier\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"_formatPublicInputs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commitmentLeafs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitmentsTreeRoots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRootIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denomination\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"filledSubtrees\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCommitments\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"getL1LeafCommitments\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"getL1Root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_right\",\"type\":\"bytes32\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"isKnownL1Root\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"isKnownRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"}],\"name\":\"isSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_nullifierHashes\",\"type\":\"bytes32[]\"}],\"name\":\"isSpentArray\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"spent\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1_currentRootIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levels\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nullifiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"readSingleSlot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_l1root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_l2root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifier\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"snarkProof\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"zeros\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"getLastRoot()\":{\"details\":\"Returns the last root\"},\"hashLeftRight(bytes32,bytes32)\":{\"details\":\"Hash 2 tree leaves, returns keccak256(_left, _right)\"},\"isKnownRoot(bytes32)\":{\"details\":\"Whether the root is present in the root history\"},\"isSpent(bytes32)\":{\"details\":\"whether a note is already spent \"},\"isSpentArray(bytes32[])\":{\"details\":\"whether an array of notes is already spent \"},\"zeros(uint256)\":{\"details\":\"provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ToadnadoL2.sol\":\"ToadnadoL2\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/MerkleTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n\\ncontract MerkleTree{\\n\\n  uint32 public levels;\\n  \\n  // merkle leafs\\n  mapping (uint256 => bytes32) public commitmentLeafs; \\n  mapping(uint256 => bytes32) public filledSubtrees;\\n  mapping(uint256 => bytes32) public roots;\\n  uint32 public constant ROOT_HISTORY_SIZE = 30;\\n  uint32 public currentRootIndex = 0;\\n  uint32 public nextIndex = 0;\\n\\n  constructor(uint32 _levels) {\\n    require(_levels > 0, \\\"_levels should be greater than zero\\\");\\n    require(_levels < 20, \\\"_levels should be less than 20\\\");\\n    levels = _levels;\\n\\n    for (uint32 i = 0; i < _levels; i++) {\\n      filledSubtrees[i] = zeros(i);\\n    }\\n\\n    roots[0] = zeros(_levels);\\n  }\\n\\n  /**\\n    @dev Hash 2 tree leaves, returns keccak256(_left, _right)\\n  */\\n  function hashLeftRight(\\n    bytes32 _left,\\n    bytes32 _right\\n  ) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_left, _right)); \\n  }\\n\\n  function _insert(bytes32 _leaf) internal returns (uint32 index) {\\n    uint32 _nextIndex = nextIndex;\\n    require(_nextIndex != uint32(2)**levels, \\\"Merkle tree is full. No more leaves can be added\\\");\\n    uint32 currentIndex = _nextIndex;\\n    bytes32 currentLevelHash = _leaf;\\n    bytes32 left;\\n    bytes32 right;\\n\\n    for (uint32 i = 0; i < levels; i++) {\\n      if (currentIndex % 2 == 0) {\\n        left = currentLevelHash;\\n        right = zeros(i);\\n        filledSubtrees[i] = currentLevelHash;\\n      } else {\\n        left = filledSubtrees[i];\\n        right = currentLevelHash;\\n      }\\n      currentLevelHash = hashLeftRight(left, right);\\n      currentIndex /= 2;\\n    }\\n\\n    uint32 newRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\\n    currentRootIndex = newRootIndex;\\n    roots[newRootIndex] = currentLevelHash;\\n    commitmentLeafs[_nextIndex] = _leaf; //storing leaf into mapping with the current index\\n    nextIndex = _nextIndex + 1;\\n    return _nextIndex;\\n  }\\n\\n  /**\\n    @dev Whether the root is present in the root history\\n  */\\n  function isKnownRoot(bytes32 _root) public view returns (bool) {\\n    if (_root == 0) {\\n      return false;\\n    }\\n    uint32 _currentRootIndex = currentRootIndex;\\n    uint32 i = _currentRootIndex;\\n    do {\\n      if (_root == roots[i]) {\\n        return true;\\n      }\\n      if (i == 0) {\\n        i = ROOT_HISTORY_SIZE;\\n      }\\n      i--;\\n    } while (i != _currentRootIndex);\\n    return false;\\n  }\\n\\n  /**\\n    @dev Returns the last root\\n  */\\n  function getLastRoot() public view returns (bytes32) {\\n    return roots[currentRootIndex];\\n  }\\n\\n  /// @dev provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\\n  function zeros(uint256 i) public pure returns (bytes32) {\\n         if (i == 0) return bytes32(0x2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c);\\n    else if (i == 1) return bytes32(0x4fc2fe9184a25f44ce8ddb5f32671fcae6d9c85ed710c199acef16ad16b29911);\\n    else if (i == 2) return bytes32(0x0d826a474f851c563052d929ef0daa70f658aba9ba084f51f6e3483c13c0e59a);\\n    else if (i == 3) return bytes32(0xf7761a16b5e4c0120e4c5704b910dbe18ff6162a9668ed1c2c4efde7c4f15806);\\n    else if (i == 4) return bytes32(0xce9ce09a0ab259d6d14ca3dcd74e6c6b9e7d9074bff66973d4c57ccdffdb2a82);\\n    else if (i == 5) return bytes32(0x02efd44c63015ff1385344e0624867775486d05e6eb1290a24976964a598003b);\\n    else if (i == 6) return bytes32(0xc4dec5845d407ce2ac2e6824bb7857c4b138f819e5789d5d11e812db10c846cd);\\n    else if (i == 7) return bytes32(0x5fbe3f20c23f3bd6ac347917fb0903433e0b9a48373412348240a5f919bfde19);\\n    else if (i == 8) return bytes32(0x92d1b07e56b3da96b7917778cb657f2c513eaeeb4d1579a73b5ea316f25b7289);\\n    else if (i == 9) return bytes32(0xa08add5656d6d3d0827ef909f7647981eac42aa1f51970a752f130f718f6d76a);\\n    else if (i == 10) return bytes32(0x1704c5f297590d8ec62776b0714f4f3f2234bae0524035342b0da8b8988ebd79);\\n    else if (i == 11) return bytes32(0xc5ae2bd47379c2c6d1189cfc3d057948dc6054caf845fcacd8f7affe94b11944);\\n    else if (i == 12) return bytes32(0x12a161d6d5561062f387d91ad9f0f8966c0956afdb9e8325458b9e5057b82bdb);\\n    else if (i == 13) return bytes32(0x4ade524ba596de20bbe94507a761c45251ae7a27857ceb4287d9018525b99bc5);\\n    else if (i == 14) return bytes32(0x38287ad69151fa833bf4bf8b8eb6ffb39400a38f1a7e53b473f639c8c60fd5e4);\\n    else if (i == 15) return bytes32(0x57f2ade7d711707e785451f2aba6c95872c7fe03153a98b7327b4024e8068fa3);\\n    else if (i == 16) return bytes32(0xb1982e0d1b0de46a88d8b17941472e41a86d3ff64571ed8e0ca72d58633547fc);\\n    else if (i == 17) return bytes32(0xb7c60f8670af15eb32b4ee36727179bc085a3dde03d5f9a1486664ba576b30a6);\\n    else if (i == 18) return bytes32(0x5ff905c5c659a926b132ef3665a3de5d5a859c1d479e68851085bfc0348c5331);\\n    else if (i == 19) return bytes32(0xb4dfa78b912e98c9f7eb42d71eb537a02bf3173d44a2eb887a48b3972072dd8e);\\n    else if (i == 20) return bytes32(0x60919a16a2eb8b91cfb8ba1e5b4c155a76a14c217b5403edbd563f34e508ecdc);\\n    else revert(\\\"Index out of bounds\\\");\\n  }\\n}\",\"keccak256\":\"0xa3d185d6ac99a37a470f11c7a48a60ebb1964928f0f5004caf8f7889550d90bf\",\"license\":\"MIT\"},\"contracts/Toadnado.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"./MerkleTree.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ninterface IVerifier {\\n    function verify(\\n        bytes calldata _proof,\\n        bytes32[] calldata _publicInputs\\n    ) external view returns (bool);\\n}\\nerror VerificationFailed();\\n\\nabstract contract Toadnado is MerkleTree, ReentrancyGuard{\\n  //IVerifier public immutable verifier;\\n  uint256 public denomination;\\n\\n    constructor(\\n        address _verifier, \\n        uint256 _denomination,\\n        uint32 _merkleTreeHeight \\n        ) MerkleTree(_merkleTreeHeight) {\\n        require(_denomination > 0, \\\"denomination should be greater than 0\\\");\\n        verifier = _verifier;\\n        denomination = _denomination;\\n    }\\n\\n    // contract that verifies the zkSnark proof\\n    address public verifier;\\n\\n    // nullifiers of the l1Withdraws\\n    // its a identifier of a commitment(deposit) that is revealed when it is withdrawn\\n    // to prevent it being spend again\\n    mapping (bytes32 => bool) public nullifiers;\\n    //keeping track of commitments to prevent deposits from the same commitment\\n    mapping(bytes32 => bool) public commitments;\\n\\n    // a history of valid merkle roots, to verify that a proof refers to a valid deposit\\n    mapping (bytes32 => bool) public commitmentsTreeRoots;\\n\\n    event Deposit(bytes32 indexed commitment, uint32 leafIndex, uint256 timestamp);\\n\\n\\n    //add bridging if it is on L1, else do normal deposit\\n    function deposit(bytes32 _commitment) external payable nonReentrant {\\n        require(!commitments[_commitment], \\\"The commitment has been submitted\\\");\\n        uint32 insertedIndex = _insert(_commitment);\\n        commitments[_commitment] = true;\\n\\n        _processDeposit();\\n\\n        emit Deposit(_commitment, insertedIndex, block.timestamp);\\n \\n    }\\n\\n    /** @dev this function is defined in a child contract */\\n    function _processDeposit() internal virtual;\\n\\n    function _processWithdraw(\\n        address payable _recipient\\n    ) internal virtual;\\n\\n    //function added to withdraw on testnet \\n    function adminWithdraw() external payable nonReentrant {\\n        address admin = 0xBe34cc4cebf526887eC2c0035463dD26b3E7FEA4;\\n        (bool success, ) = admin.call{ value: address(this).balance }(\\\"\\\");\\n        require(success, \\\"payment to admin did not go thru\\\");\\n    }\\n\\n    //TODO make private\\n    function _formatPublicInputs(bytes32 _root, bytes32 _nullifier,address _recipient) public pure returns(bytes32[] memory) {\\n        // _root\\n        bytes32[] memory publicInputs = new bytes32[](65);\\n        for (uint i=0; i < 32; i++) {\\n            publicInputs[i] = bytes32(uint256(uint8(_root[i])));\\n        }\\n\\n        // _nullifier\\n        for (uint i=32; i < 64; i++) {\\n            publicInputs[i] = bytes32(uint256(uint8(_nullifier[i-32])));\\n        }\\n\\n        // _recipient\\n        bytes32 recipientBytes = bytes32(uint256(uint160(bytes20(_recipient))));\\n        publicInputs[64] = recipientBytes;\\n        return publicInputs;\\n    }\\n\\n    /** @dev whether a note is already spent */\\n  function isSpent(bytes32 _nullifierHash) public view returns (bool) {\\n    return nullifiers[_nullifierHash];\\n  }\\n\\n  /** @dev whether an array of notes is already spent */\\n  function isSpentArray(bytes32[] calldata _nullifierHashes) external view returns (bool[] memory spent) {\\n    spent = new bool[](_nullifierHashes.length);\\n    for (uint256 i = 0; i < _nullifierHashes.length; i++) {\\n      if (isSpent(_nullifierHashes[i])) {\\n        spent[i] = true;\\n      }\\n    }\\n  }\\n\\n\\n    //TODO remove this\\n    //debug functions\\n    // function setCommitmentsTree(bytes32[] calldata _commitmentsTree, bytes32 _root) public {\\n    //     commitmentsTree = _commitmentsTree;\\n    //     commitmentsTreeRoots[_root] = true;\\n    // }\\n\\n\\n\\n\\n\\n\\n}\",\"keccak256\":\"0x3dc4c06600c8f9f32e95bbb47fba0a35600423d71e9999543d1fa6c91c67656a\",\"license\":\"MIT\"},\"contracts/ToadnadoL2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"./Toadnado.sol\\\";\\n\\ncontract ToadnadoL2 is Toadnado {\\n  event Withdrawal(address recipient, bytes32 nullifier);\\n\\n  constructor(\\n    address _l1Address,\\n    address _verifier,\\n    uint256 _denomination,\\n    uint32 _merkleTreeHeight\\n  ) Toadnado(_verifier, _denomination, _merkleTreeHeight){\\n    l1Address = _l1Address;\\n  }\\n\\n  function _processDeposit() internal override {\\n    require(msg.value == denomination, \\\"Please send `mixDenomination` ETH along with transaction\\\");\\n  }\\n\\n  function _processWithdraw(\\n    address payable _recipient\\n  ) internal override{\\n    require(msg.value == 0, \\\"Message value is supposed to be zero for ETH instance\\\");\\n    _recipient.transfer(denomination);\\n    //require(success, \\\"payment to _recipient did not go thru\\\");\\n  }\\n\\n  function withdraw(\\n      bytes32 _l1root,\\n      bytes32 _l2root,\\n      bytes32 _nullifier,\\n      address payable _recipient, \\n      bytes calldata snarkProof\\n      ) external payable nonReentrant  {\\n\\n      //disable withdraw on \\\"L1\\\"\\n      require(block.chainid!=11155111, \\\"withdrawal only allowed on L2\\\");\\n      require(!nullifiers[_nullifier], \\\"The note has been already spent\\\");\\n      require(isKnownRoot(_l2root), \\\"Cannot find your l2 merkle root\\\"); // Make sure to use a recent one + also pick the L2 Root\\n      require(isKnownL1Root(_l1root), \\\"Cannot find your l1 merkle root\\\"); // Make sure to use a recent one + also pick the L2 Root\\n      \\n      bytes32 metaRoot = keccak256(abi.encodePacked(_l1root,_l2root));\\n      bytes32[] memory publicInputs = _formatPublicInputs(metaRoot, _nullifier, _recipient);\\n      if (!IVerifier(verifier).verify(snarkProof, publicInputs)) {\\n          revert VerificationFailed();\\n      }\\n  \\n      nullifiers[_nullifier] = true;\\n      _processWithdraw(_recipient);\\n      emit Withdrawal(_recipient, _nullifier);\\n  }\\n    \\n\\n  function receiveEth() payable public{}\\n  \\n//get all roots from L1\\n//get all roots from L2 \\n//return 2d array in return value \\n\\nmapping (uint256=>bytes32) l1Roots;\\nuint32 public l1_currentRootIndex = 0;\\n\\naddress public l1Address;\\n\\n//get current root of L1\\n\\naddress constant L1_SLOAD_ADDRESS = 0x0000000000000000000000000000000000000101;\\n\\n    function readSingleSlot(address l1_contract, uint256 slot) public view returns (bytes memory) {\\n\\n        bytes memory input = abi.encodePacked(l1_contract, slot);\\n\\n        bool success;\\n        bytes memory result;\\n\\n        (success, result) = L1_SLOAD_ADDRESS.staticcall(input);\\n\\n        if (!success) {\\n            revert(\\\"L1SLOAD failed\\\");\\n        }\\n\\n        return result;\\n\\n    }\\n\\n    // \\n    function getL1Root(uint256 key) public view returns(bytes32) {\\n        uint slotNumber = 3; //slot for L1 Root mapping\\n        return abi.decode(readSingleSlot(\\n            l1Address,\\n            uint(keccak256(\\n                abi.encodePacked(key,slotNumber)\\n                )\\n            )\\n            ), (bytes32));\\n    }\\n\\n    function getL1LeafCommitments(uint256 key) public view returns(bytes32){\\n        uint slotNumber = 1; //slot for L1 commitmentLeafs\\n        return abi.decode(readSingleSlot(\\n            l1Address,\\n            uint(keccak256(\\n                abi.encodePacked(key,slotNumber)\\n                )\\n            )\\n            ), (bytes32));\\n      \\n    }\\n\\n    function isKnownL1Root(bytes32 _root) public view returns (bool) {\\n    uint slotNumber = 3; //slot for currentRootIndex\\n    if (_root == 0) {\\n      return false;\\n    }\\n    uint32 _currentRootIndex = abi.decode(readSingleSlot(l1Address,slotNumber),(uint32));\\n    uint32 i = _currentRootIndex;\\n    do {\\n      if (_root == getL1Root(i)) {\\n        return true;\\n      }\\n      if (i == 0) {\\n        i = ROOT_HISTORY_SIZE;\\n      }\\n      i--;\\n    } while (i != _currentRootIndex);\\n    return false;\\n  }\\n\\n  function getAllCommitments() public view returns(bytes32[] memory,bytes32[] memory){\\n\\n    uint32 l1NextId = 32;\\n    bytes32[] memory layer1 = new bytes32[](l1NextId);\\n    bytes32[] memory layer2 = new bytes32[](nextIndex);\\n\\n    for (uint32 i = 0; i < nextIndex; i++) {\\n      layer2[i] = commitmentLeafs[i];\\n    }\\n\\n    //workaround for out of index array\\n    for (uint32 i = 0; i < l1NextId; i++) {\\n      if(getL1LeafCommitments(i) == 0x0000000000000000000000000000000000000000000000000000000000000000){\\n        break;\\n      }\\n      layer1[i] = getL1LeafCommitments(i);\\n    }\\n  \\n    return (layer1,layer2);\\n  }\\n\\n    \\n}\",\"keccak256\":\"0xab5bfd9d72da1a2f21131c66c95227d1c978291521eabc699f0cf86741adeb62\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600480546001600160401b0319169055600c805463ffffffff191690553480156200002d575f80fd5b506040516200242a3803806200242a8339810160408190526200005091620006ad565b828282805f8163ffffffff1611620000bb5760405162461bcd60e51b815260206004820152602360248201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60448201526265726f60e81b60648201526084015b60405180910390fd5b60148163ffffffff1610620001135760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e20323000006044820152606401620000b2565b5f805463ffffffff191663ffffffff83161781555b8163ffffffff168163ffffffff1610156200016c576200014e63ffffffff821662000258565b63ffffffff82165f9081526002602052604090205560010162000128565b506200017e63ffffffff821662000258565b5f805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff55506001600555816200020b5760405162461bcd60e51b815260206004820152602560248201527f64656e6f6d696e6174696f6e2073686f756c6420626520677265617465722074604482015264068616e20360dc1b6064820152608401620000b2565b50600780546001600160a01b0319166001600160a01b03938416179055600655600c8054600160201b600160c01b0319166401000000009690921695909502179093555062000707915050565b5f815f036200028857507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b81600103620002b857507f4fc2fe9184a25f44ce8ddb5f32671fcae6d9c85ed710c199acef16ad16b29911919050565b81600203620002e857507f0d826a474f851c563052d929ef0daa70f658aba9ba084f51f6e3483c13c0e59a919050565b816003036200031857507ff7761a16b5e4c0120e4c5704b910dbe18ff6162a9668ed1c2c4efde7c4f15806919050565b816004036200034857507fce9ce09a0ab259d6d14ca3dcd74e6c6b9e7d9074bff66973d4c57ccdffdb2a82919050565b816005036200037857507f02efd44c63015ff1385344e0624867775486d05e6eb1290a24976964a598003b919050565b81600603620003a857507fc4dec5845d407ce2ac2e6824bb7857c4b138f819e5789d5d11e812db10c846cd919050565b81600703620003d857507f5fbe3f20c23f3bd6ac347917fb0903433e0b9a48373412348240a5f919bfde19919050565b816008036200040857507f92d1b07e56b3da96b7917778cb657f2c513eaeeb4d1579a73b5ea316f25b7289919050565b816009036200043857507fa08add5656d6d3d0827ef909f7647981eac42aa1f51970a752f130f718f6d76a919050565b81600a036200046857507f1704c5f297590d8ec62776b0714f4f3f2234bae0524035342b0da8b8988ebd79919050565b81600b036200049857507fc5ae2bd47379c2c6d1189cfc3d057948dc6054caf845fcacd8f7affe94b11944919050565b81600c03620004c857507f12a161d6d5561062f387d91ad9f0f8966c0956afdb9e8325458b9e5057b82bdb919050565b81600d03620004f857507f4ade524ba596de20bbe94507a761c45251ae7a27857ceb4287d9018525b99bc5919050565b81600e036200052857507f38287ad69151fa833bf4bf8b8eb6ffb39400a38f1a7e53b473f639c8c60fd5e4919050565b81600f036200055857507f57f2ade7d711707e785451f2aba6c95872c7fe03153a98b7327b4024e8068fa3919050565b816010036200058857507fb1982e0d1b0de46a88d8b17941472e41a86d3ff64571ed8e0ca72d58633547fc919050565b81601103620005b857507fb7c60f8670af15eb32b4ee36727179bc085a3dde03d5f9a1486664ba576b30a6919050565b81601203620005e857507f5ff905c5c659a926b132ef3665a3de5d5a859c1d479e68851085bfc0348c5331919050565b816013036200061857507fb4dfa78b912e98c9f7eb42d71eb537a02bf3173d44a2eb887a48b3972072dd8e919050565b816014036200064857507f60919a16a2eb8b91cfb8ba1e5b4c155a76a14c217b5403edbd563f34e508ecdc919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152606401620000b2565b919050565b80516001600160a01b038116811462000691575f80fd5b5f805f8060808587031215620006c1575f80fd5b620006cc8562000696565b9350620006dc6020860162000696565b925060408501519150606085015163ffffffff81168114620006fc575f80fd5b939692955090935050565b611d1580620007155f395ff3fe6080604052600436106101c5575f3560e01c80638bca6d16116100f2578063c2eeeebd11610092578063e993d00b11610062578063e993d00b146105a4578063f178e47c146105c3578063f18d20be146105ee578063fc7e9c6f146105f6575f80fd5b8063c2eeeebd1461051d578063cd87a3b414610543578063e5285dcc14610557578063e829558814610585575f80fd5b80639fa12d0b116100cd5780639fa12d0b1461048b578063b214faa5146104b7578063ba70f757146104ca578063c2b40ae4146104f2575f80fd5b80638bca6d161461042f57806390eeb02b146104445780639ec4415414610460575f80fd5b80633ed4eae51161016857806350241a3f1161013857806350241a3f146103b05780635032d4f1146103c35780636d9833e3146103e2578063839df94514610401575f80fd5b80633ed4eae5146103485780634185f8eb146103675780634ecf518b146103695780634fe3fbf014610384575f80fd5b80632b7ac3f3116101a35780632b7ac3f31461026d5780632c0ee3c4146102a45780633591d78d146102c657806338bf282e146102f4575f80fd5b8063102b72e7146101c9578063164ddd01146101fe5780632997e86b1461022f575b5f80fd5b3480156101d4575f80fd5b506101e86101e3366004611767565b610619565b6040516101f591906117b3565b60405180910390f35b348015610209575f80fd5b50600c5461021a9063ffffffff1681565b60405163ffffffff90911681526020016101f5565b34801561023a575f80fd5b5061025d6102493660046117e5565b60086020525f908152604090205460ff1681565b60405190151581526020016101f5565b348015610278575f80fd5b5060075461028c906001600160a01b031681565b6040516001600160a01b0390911681526020016101f5565b3480156102af575f80fd5b506102b8610701565b6040516101f5929190611836565b3480156102d1575f80fd5b5061025d6102e03660046117e5565b600a6020525f908152604090205460ff1681565b3480156102ff575f80fd5b5061033a61030e366004611863565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6040519081526020016101f5565b348015610353575f80fd5b5061033a6103623660046117e5565b61084a565b005b348015610374575f80fd5b505f5461021a9063ffffffff1681565b34801561038f575f80fd5b506103a361039e366004611883565b6108b5565b6040516101f591906118b9565b6103676103be3660046118cb565b6109b0565b3480156103ce575f80fd5b5061033a6103dd3660046117e5565b610c4e565b3480156103ed575f80fd5b5061025d6103fc3660046117e5565b610c84565b34801561040c575f80fd5b5061025d61041b3660046117e5565b60096020525f908152604090205460ff1681565b34801561043a575f80fd5b5061033a60065481565b34801561044f575f80fd5b5060045461021a9063ffffffff1681565b34801561046b575f80fd5b5061033a61047a3660046117e5565b60016020525f908152604090205481565b348015610496575f80fd5b506104aa6104a5366004611964565b610cfd565b6040516101f591906119d3565b6103676104c53660046117e5565b610db7565b3480156104d5575f80fd5b5060045463ffffffff165f9081526003602052604090205461033a565b3480156104fd575f80fd5b5061033a61050c3660046117e5565b60036020525f908152604090205481565b348015610528575f80fd5b50600c5461028c90600160201b90046001600160a01b031681565b34801561054e575f80fd5b5061021a601e81565b348015610562575f80fd5b5061025d6105713660046117e5565b5f9081526008602052604090205460ff1690565b348015610590575f80fd5b5061033a61059f3660046117e5565b610ea1565b3480156105af575f80fd5b5061025d6105be3660046117e5565b6112ba565b3480156105ce575f80fd5b5061033a6105dd3660046117e5565b60026020525f908152604090205481565b61036761135d565b348015610601575f80fd5b5060045461021a90600160201b900463ffffffff1681565b604051606083811b6bffffffffffffffffffffffff1916602083015260348201839052905f9060540160405160208183030381529060405290505f60606101016001600160a01b0316836040516106709190611a18565b5f60405180830381855afa9150503d805f81146106a8576040519150601f19603f3d011682016040523d82523d5f602084013e6106ad565b606091505b509092509050816106f65760405162461bcd60e51b815260206004820152600e60248201526d130c54d313d0510819985a5b195960921b60448201526064015b60405180910390fd5b925050505b92915050565b604080516020808252610420820190925260609182915f908280820161040080368337019050506004549091505f90600160201b900463ffffffff1667ffffffffffffffff81111561075557610755611a33565b60405190808252806020026020018201604052801561077e578160200160208202803683370190505b5090505f5b60045463ffffffff600160201b909104811690821610156107da5763ffffffff81165f8181526001602052604090205483519091849181106107c7576107c7611a47565b6020908102919091010152600101610783565b505f5b8363ffffffff168163ffffffff16101561083f576108008163ffffffff1661084a565b1561083f576108148163ffffffff1661084a565b838263ffffffff168151811061082c5761082c611a47565b60209081029190910101526001016107dd565b509094909350915050565b600c54604080516020810184905260019181018290525f9261089991600160201b9091046001600160a01b0316906060015b604051602081830303815290604052805190602001205f1c610619565b8060200190518101906108ac9190611a5b565b9392505050565b565b60408051604180825261084082019092526060915f919060208201610820803683370190505090505f5b6020811015610925578581602081106108fa576108fa611a47565b835191901a9083908390811061091257610912611a47565b60209081029190910101526001016108df565b5060205b6040811015610979578461093e602083611a86565b6020811061094e5761094e611a47565b835191901a9083908390811061096657610966611a47565b6020908102919091010152600101610929565b5080516001600160a01b0384169081908390604090811061099c5761099c611a47565b602090810291909101015250949350505050565b6109b861141c565b4662aa36a703610a0a5760405162461bcd60e51b815260206004820152601d60248201527f7769746864726177616c206f6e6c7920616c6c6f776564206f6e204c3200000060448201526064016106ed565b5f8481526008602052604090205460ff1615610a685760405162461bcd60e51b815260206004820152601f60248201527f546865206e6f746520686173206265656e20616c7265616479207370656e740060448201526064016106ed565b610a7185610c84565b610abd5760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f742066696e6420796f7572206c32206d65726b6c6520726f6f740060448201526064016106ed565b610ac6866112ba565b610b125760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f742066696e6420796f7572206c31206d65726b6c6520726f6f740060448201526064016106ed565b604080516020808201899052818301889052825180830384018152606090920190925280519101205f610b468287876108b5565b600754604051633a94343960e21b81529192506001600160a01b03169063ea50d0e490610b7b90879087908690600401611a99565b602060405180830381865afa158015610b96573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bba9190611adf565b610bd75760405163439cc0cd60e01b815260040160405180910390fd5b5f868152600860205260409020805460ff19166001179055610bf885611446565b604080516001600160a01b0387168152602081018890527f0ce490531f6c8ae2f1ff174643bc8b7ed5e52987ab50dc1e8f33655d2cd8c90b910160405180910390a15050610c466001600555565b505050505050565b600c54604080516020810184905260039181018290525f9261089991600160201b9091046001600160a01b03169060600161087c565b5f818103610c9357505f919050565b60045463ffffffff16805b63ffffffff81165f908152600360205260409020548403610cc3575060019392505050565b8063ffffffff165f03610cd45750601e5b80610cde81611afe565b9150508163ffffffff168163ffffffff1603610c9e57505f9392505050565b60608167ffffffffffffffff811115610d1857610d18611a33565b604051908082528060200260200182016040528015610d41578160200160208202803683370190505b5090505f5b82811015610db057610d7e848483818110610d6357610d63611a47565b905060200201355f9081526008602052604090205460ff1690565b15610da8576001828281518110610d9757610d97611a47565b911515602092830291909101909101525b600101610d46565b5092915050565b610dbf61141c565b5f8181526009602052604090205460ff1615610e275760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b60648201526084016106ed565b5f610e31826114ea565b5f838152600960205260409020805460ff191660011790559050610e536116dc565b6040805163ffffffff8316815242602082015283917fa945e51eec50ab98c161376f0db4cf2aeba3ec92755fe2fcd388bdbbb80ff196910160405180910390a250610e9e6001600555565b50565b5f815f03610ed057507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b81600103610eff57507f4fc2fe9184a25f44ce8ddb5f32671fcae6d9c85ed710c199acef16ad16b29911919050565b81600203610f2e57507f0d826a474f851c563052d929ef0daa70f658aba9ba084f51f6e3483c13c0e59a919050565b81600303610f5d57507ff7761a16b5e4c0120e4c5704b910dbe18ff6162a9668ed1c2c4efde7c4f15806919050565b81600403610f8c57507fce9ce09a0ab259d6d14ca3dcd74e6c6b9e7d9074bff66973d4c57ccdffdb2a82919050565b81600503610fbb57507f02efd44c63015ff1385344e0624867775486d05e6eb1290a24976964a598003b919050565b81600603610fea57507fc4dec5845d407ce2ac2e6824bb7857c4b138f819e5789d5d11e812db10c846cd919050565b8160070361101957507f5fbe3f20c23f3bd6ac347917fb0903433e0b9a48373412348240a5f919bfde19919050565b8160080361104857507f92d1b07e56b3da96b7917778cb657f2c513eaeeb4d1579a73b5ea316f25b7289919050565b8160090361107757507fa08add5656d6d3d0827ef909f7647981eac42aa1f51970a752f130f718f6d76a919050565b81600a036110a657507f1704c5f297590d8ec62776b0714f4f3f2234bae0524035342b0da8b8988ebd79919050565b81600b036110d557507fc5ae2bd47379c2c6d1189cfc3d057948dc6054caf845fcacd8f7affe94b11944919050565b81600c0361110457507f12a161d6d5561062f387d91ad9f0f8966c0956afdb9e8325458b9e5057b82bdb919050565b81600d0361113357507f4ade524ba596de20bbe94507a761c45251ae7a27857ceb4287d9018525b99bc5919050565b81600e0361116257507f38287ad69151fa833bf4bf8b8eb6ffb39400a38f1a7e53b473f639c8c60fd5e4919050565b81600f0361119157507f57f2ade7d711707e785451f2aba6c95872c7fe03153a98b7327b4024e8068fa3919050565b816010036111c057507fb1982e0d1b0de46a88d8b17941472e41a86d3ff64571ed8e0ca72d58633547fc919050565b816011036111ef57507fb7c60f8670af15eb32b4ee36727179bc085a3dde03d5f9a1486664ba576b30a6919050565b8160120361121e57507f5ff905c5c659a926b132ef3665a3de5d5a859c1d479e68851085bfc0348c5331919050565b8160130361124d57507fb4dfa78b912e98c9f7eb42d71eb537a02bf3173d44a2eb887a48b3972072dd8e919050565b8160140361127c57507f60919a16a2eb8b91cfb8ba1e5b4c155a76a14c217b5403edbd563f34e508ecdc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064016106ed565b5f60038282036112cc57505f92915050565b600c545f906112eb90600160201b90046001600160a01b031683610619565b8060200190518101906112fe9190611b1c565b9050805b6113118163ffffffff16610c4e565b850361132257506001949350505050565b8063ffffffff165f036113335750601e5b8061133d81611afe565b9150508163ffffffff168163ffffffff160361130257505f949350505050565b61136561141c565b60405173be34cc4cebf526887ec2c0035463dd26b3e7fea4905f90829047908381818185875af1925050503d805f81146113ba576040519150601f19603f3d011682016040523d82523d5f602084013e6113bf565b606091505b50509050806114105760405162461bcd60e51b815260206004820181905260248201527f7061796d656e7420746f2061646d696e20646964206e6f7420676f207468727560448201526064016106ed565b50506108b36001600555565b60026005540361143f57604051633ee5aeb560e01b815260040160405180910390fd5b6002600555565b34156114b25760405162461bcd60e51b815260206004820152603560248201527f4d6573736167652076616c756520697320737570706f73656420746f206265206044820152747a65726f20666f722045544820696e7374616e636560581b60648201526084016106ed565b6006546040516001600160a01b0383169180156108fc02915f818181858888f193505050501580156114e6573d5f803e3d5ffd5b5050565b6004545f8054909163ffffffff600160201b90910481169161150e91166002611c4e565b63ffffffff168163ffffffff16036115815760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b60648201526084016106ed565b80835f80805b5f5463ffffffff908116908216101561163b576115a5600286611c7e565b63ffffffff165f036115e1578392506115c38163ffffffff16610ea1565b63ffffffff82165f90815260026020526040902085905591506115fc565b63ffffffff81165f9081526002602052604090205492508391505b604080516020808201869052818301859052825180830384018152606090920190925280519101209350611631600286611ca0565b9450600101611587565b506004545f90601e906116559063ffffffff166001611cc2565b61165f9190611c7e565b6004805463ffffffff191663ffffffff8381169182179092555f908152600360209081526040808320899055928a1682526001908190529190208a90559091506116aa908790611cc2565b6004805463ffffffff92909216600160201b0267ffffffff000000001990921691909117905550939695505050505050565b60065434146108b35760405162461bcd60e51b815260206004820152603860248201527f506c656173652073656e6420606d697844656e6f6d696e6174696f6e6020455460448201527f4820616c6f6e672077697468207472616e73616374696f6e000000000000000060648201526084016106ed565b6001600160a01b0381168114610e9e575f80fd5b5f8060408385031215611778575f80fd5b823561178381611753565b946020939093013593505050565b5f5b838110156117ab578181015183820152602001611793565b50505f910152565b602081525f82518060208401526117d1816040850160208701611791565b601f01601f19169190910160400192915050565b5f602082840312156117f5575f80fd5b5035919050565b5f815180845260208085019450602084015f5b8381101561182b5781518752958201959082019060010161180f565b509495945050505050565b604081525f61184860408301856117fc565b828103602084015261185a81856117fc565b95945050505050565b5f8060408385031215611874575f80fd5b50508035926020909101359150565b5f805f60608486031215611895575f80fd5b833592506020840135915060408401356118ae81611753565b809150509250925092565b602081525f6108ac60208301846117fc565b5f805f805f8060a087890312156118e0575f80fd5b863595506020870135945060408701359350606087013561190081611753565b9250608087013567ffffffffffffffff8082111561191c575f80fd5b818901915089601f83011261192f575f80fd5b81358181111561193d575f80fd5b8a602082850101111561194e575f80fd5b6020830194508093505050509295509295509295565b5f8060208385031215611975575f80fd5b823567ffffffffffffffff8082111561198c575f80fd5b818501915085601f83011261199f575f80fd5b8135818111156119ad575f80fd5b8660208260051b85010111156119c1575f80fd5b60209290920196919550909350505050565b602080825282518282018190525f9190848201906040850190845b81811015611a0c5783511515835292840192918401916001016119ee565b50909695505050505050565b5f8251611a29818460208701611791565b9190910192915050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215611a6b575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b818103818111156106fb576106fb611a72565b60408152826040820152828460608301375f606084830101525f601f19601f85011682016060838203016020840152611ad560608201856117fc565b9695505050505050565b5f60208284031215611aef575f80fd5b815180151581146108ac575f80fd5b5f63ffffffff821680611b1357611b13611a72565b5f190192915050565b5f60208284031215611b2c575f80fd5b815163ffffffff811681146108ac575f80fd5b600181815b80851115611b7c578163ffffffff04821115611b6257611b62611a72565b80851615611b6f57918102915b93841c9390800290611b44565b509250929050565b5f82611b92575060016106fb565b81611b9e57505f6106fb565b8160018114611bb45760028114611bbe57611bef565b60019150506106fb565b60ff841115611bcf57611bcf611a72565b6001841b915063ffffffff821115611be957611be9611a72565b506106fb565b5060208310610133831016604e8410600b8410161715611c26575081810a63ffffffff811115611c2157611c21611a72565b6106fb565b611c308383611b3f565b8063ffffffff04821115611c4657611c46611a72565b029392505050565b5f63ffffffff611c62818516828516611b84565b949350505050565b634e487b7160e01b5f52601260045260245ffd5b5f63ffffffff80841680611c9457611c94611c6a565b92169190910692915050565b5f63ffffffff80841680611cb657611cb6611c6a565b92169190910492915050565b63ffffffff818116838216019080821115610db057610db0611a7256fea2646970667358221220c63e35b7ee758a4d64e97898b462ff49de0f3911004c70006571b3759e44013164736f6c63430008170033",
  "deployedBytecode": "0x6080604052600436106101c5575f3560e01c80638bca6d16116100f2578063c2eeeebd11610092578063e993d00b11610062578063e993d00b146105a4578063f178e47c146105c3578063f18d20be146105ee578063fc7e9c6f146105f6575f80fd5b8063c2eeeebd1461051d578063cd87a3b414610543578063e5285dcc14610557578063e829558814610585575f80fd5b80639fa12d0b116100cd5780639fa12d0b1461048b578063b214faa5146104b7578063ba70f757146104ca578063c2b40ae4146104f2575f80fd5b80638bca6d161461042f57806390eeb02b146104445780639ec4415414610460575f80fd5b80633ed4eae51161016857806350241a3f1161013857806350241a3f146103b05780635032d4f1146103c35780636d9833e3146103e2578063839df94514610401575f80fd5b80633ed4eae5146103485780634185f8eb146103675780634ecf518b146103695780634fe3fbf014610384575f80fd5b80632b7ac3f3116101a35780632b7ac3f31461026d5780632c0ee3c4146102a45780633591d78d146102c657806338bf282e146102f4575f80fd5b8063102b72e7146101c9578063164ddd01146101fe5780632997e86b1461022f575b5f80fd5b3480156101d4575f80fd5b506101e86101e3366004611767565b610619565b6040516101f591906117b3565b60405180910390f35b348015610209575f80fd5b50600c5461021a9063ffffffff1681565b60405163ffffffff90911681526020016101f5565b34801561023a575f80fd5b5061025d6102493660046117e5565b60086020525f908152604090205460ff1681565b60405190151581526020016101f5565b348015610278575f80fd5b5060075461028c906001600160a01b031681565b6040516001600160a01b0390911681526020016101f5565b3480156102af575f80fd5b506102b8610701565b6040516101f5929190611836565b3480156102d1575f80fd5b5061025d6102e03660046117e5565b600a6020525f908152604090205460ff1681565b3480156102ff575f80fd5b5061033a61030e366004611863565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6040519081526020016101f5565b348015610353575f80fd5b5061033a6103623660046117e5565b61084a565b005b348015610374575f80fd5b505f5461021a9063ffffffff1681565b34801561038f575f80fd5b506103a361039e366004611883565b6108b5565b6040516101f591906118b9565b6103676103be3660046118cb565b6109b0565b3480156103ce575f80fd5b5061033a6103dd3660046117e5565b610c4e565b3480156103ed575f80fd5b5061025d6103fc3660046117e5565b610c84565b34801561040c575f80fd5b5061025d61041b3660046117e5565b60096020525f908152604090205460ff1681565b34801561043a575f80fd5b5061033a60065481565b34801561044f575f80fd5b5060045461021a9063ffffffff1681565b34801561046b575f80fd5b5061033a61047a3660046117e5565b60016020525f908152604090205481565b348015610496575f80fd5b506104aa6104a5366004611964565b610cfd565b6040516101f591906119d3565b6103676104c53660046117e5565b610db7565b3480156104d5575f80fd5b5060045463ffffffff165f9081526003602052604090205461033a565b3480156104fd575f80fd5b5061033a61050c3660046117e5565b60036020525f908152604090205481565b348015610528575f80fd5b50600c5461028c90600160201b90046001600160a01b031681565b34801561054e575f80fd5b5061021a601e81565b348015610562575f80fd5b5061025d6105713660046117e5565b5f9081526008602052604090205460ff1690565b348015610590575f80fd5b5061033a61059f3660046117e5565b610ea1565b3480156105af575f80fd5b5061025d6105be3660046117e5565b6112ba565b3480156105ce575f80fd5b5061033a6105dd3660046117e5565b60026020525f908152604090205481565b61036761135d565b348015610601575f80fd5b5060045461021a90600160201b900463ffffffff1681565b604051606083811b6bffffffffffffffffffffffff1916602083015260348201839052905f9060540160405160208183030381529060405290505f60606101016001600160a01b0316836040516106709190611a18565b5f60405180830381855afa9150503d805f81146106a8576040519150601f19603f3d011682016040523d82523d5f602084013e6106ad565b606091505b509092509050816106f65760405162461bcd60e51b815260206004820152600e60248201526d130c54d313d0510819985a5b195960921b60448201526064015b60405180910390fd5b925050505b92915050565b604080516020808252610420820190925260609182915f908280820161040080368337019050506004549091505f90600160201b900463ffffffff1667ffffffffffffffff81111561075557610755611a33565b60405190808252806020026020018201604052801561077e578160200160208202803683370190505b5090505f5b60045463ffffffff600160201b909104811690821610156107da5763ffffffff81165f8181526001602052604090205483519091849181106107c7576107c7611a47565b6020908102919091010152600101610783565b505f5b8363ffffffff168163ffffffff16101561083f576108008163ffffffff1661084a565b1561083f576108148163ffffffff1661084a565b838263ffffffff168151811061082c5761082c611a47565b60209081029190910101526001016107dd565b509094909350915050565b600c54604080516020810184905260019181018290525f9261089991600160201b9091046001600160a01b0316906060015b604051602081830303815290604052805190602001205f1c610619565b8060200190518101906108ac9190611a5b565b9392505050565b565b60408051604180825261084082019092526060915f919060208201610820803683370190505090505f5b6020811015610925578581602081106108fa576108fa611a47565b835191901a9083908390811061091257610912611a47565b60209081029190910101526001016108df565b5060205b6040811015610979578461093e602083611a86565b6020811061094e5761094e611a47565b835191901a9083908390811061096657610966611a47565b6020908102919091010152600101610929565b5080516001600160a01b0384169081908390604090811061099c5761099c611a47565b602090810291909101015250949350505050565b6109b861141c565b4662aa36a703610a0a5760405162461bcd60e51b815260206004820152601d60248201527f7769746864726177616c206f6e6c7920616c6c6f776564206f6e204c3200000060448201526064016106ed565b5f8481526008602052604090205460ff1615610a685760405162461bcd60e51b815260206004820152601f60248201527f546865206e6f746520686173206265656e20616c7265616479207370656e740060448201526064016106ed565b610a7185610c84565b610abd5760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f742066696e6420796f7572206c32206d65726b6c6520726f6f740060448201526064016106ed565b610ac6866112ba565b610b125760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f742066696e6420796f7572206c31206d65726b6c6520726f6f740060448201526064016106ed565b604080516020808201899052818301889052825180830384018152606090920190925280519101205f610b468287876108b5565b600754604051633a94343960e21b81529192506001600160a01b03169063ea50d0e490610b7b90879087908690600401611a99565b602060405180830381865afa158015610b96573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bba9190611adf565b610bd75760405163439cc0cd60e01b815260040160405180910390fd5b5f868152600860205260409020805460ff19166001179055610bf885611446565b604080516001600160a01b0387168152602081018890527f0ce490531f6c8ae2f1ff174643bc8b7ed5e52987ab50dc1e8f33655d2cd8c90b910160405180910390a15050610c466001600555565b505050505050565b600c54604080516020810184905260039181018290525f9261089991600160201b9091046001600160a01b03169060600161087c565b5f818103610c9357505f919050565b60045463ffffffff16805b63ffffffff81165f908152600360205260409020548403610cc3575060019392505050565b8063ffffffff165f03610cd45750601e5b80610cde81611afe565b9150508163ffffffff168163ffffffff1603610c9e57505f9392505050565b60608167ffffffffffffffff811115610d1857610d18611a33565b604051908082528060200260200182016040528015610d41578160200160208202803683370190505b5090505f5b82811015610db057610d7e848483818110610d6357610d63611a47565b905060200201355f9081526008602052604090205460ff1690565b15610da8576001828281518110610d9757610d97611a47565b911515602092830291909101909101525b600101610d46565b5092915050565b610dbf61141c565b5f8181526009602052604090205460ff1615610e275760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b60648201526084016106ed565b5f610e31826114ea565b5f838152600960205260409020805460ff191660011790559050610e536116dc565b6040805163ffffffff8316815242602082015283917fa945e51eec50ab98c161376f0db4cf2aeba3ec92755fe2fcd388bdbbb80ff196910160405180910390a250610e9e6001600555565b50565b5f815f03610ed057507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b81600103610eff57507f4fc2fe9184a25f44ce8ddb5f32671fcae6d9c85ed710c199acef16ad16b29911919050565b81600203610f2e57507f0d826a474f851c563052d929ef0daa70f658aba9ba084f51f6e3483c13c0e59a919050565b81600303610f5d57507ff7761a16b5e4c0120e4c5704b910dbe18ff6162a9668ed1c2c4efde7c4f15806919050565b81600403610f8c57507fce9ce09a0ab259d6d14ca3dcd74e6c6b9e7d9074bff66973d4c57ccdffdb2a82919050565b81600503610fbb57507f02efd44c63015ff1385344e0624867775486d05e6eb1290a24976964a598003b919050565b81600603610fea57507fc4dec5845d407ce2ac2e6824bb7857c4b138f819e5789d5d11e812db10c846cd919050565b8160070361101957507f5fbe3f20c23f3bd6ac347917fb0903433e0b9a48373412348240a5f919bfde19919050565b8160080361104857507f92d1b07e56b3da96b7917778cb657f2c513eaeeb4d1579a73b5ea316f25b7289919050565b8160090361107757507fa08add5656d6d3d0827ef909f7647981eac42aa1f51970a752f130f718f6d76a919050565b81600a036110a657507f1704c5f297590d8ec62776b0714f4f3f2234bae0524035342b0da8b8988ebd79919050565b81600b036110d557507fc5ae2bd47379c2c6d1189cfc3d057948dc6054caf845fcacd8f7affe94b11944919050565b81600c0361110457507f12a161d6d5561062f387d91ad9f0f8966c0956afdb9e8325458b9e5057b82bdb919050565b81600d0361113357507f4ade524ba596de20bbe94507a761c45251ae7a27857ceb4287d9018525b99bc5919050565b81600e0361116257507f38287ad69151fa833bf4bf8b8eb6ffb39400a38f1a7e53b473f639c8c60fd5e4919050565b81600f0361119157507f57f2ade7d711707e785451f2aba6c95872c7fe03153a98b7327b4024e8068fa3919050565b816010036111c057507fb1982e0d1b0de46a88d8b17941472e41a86d3ff64571ed8e0ca72d58633547fc919050565b816011036111ef57507fb7c60f8670af15eb32b4ee36727179bc085a3dde03d5f9a1486664ba576b30a6919050565b8160120361121e57507f5ff905c5c659a926b132ef3665a3de5d5a859c1d479e68851085bfc0348c5331919050565b8160130361124d57507fb4dfa78b912e98c9f7eb42d71eb537a02bf3173d44a2eb887a48b3972072dd8e919050565b8160140361127c57507f60919a16a2eb8b91cfb8ba1e5b4c155a76a14c217b5403edbd563f34e508ecdc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064016106ed565b5f60038282036112cc57505f92915050565b600c545f906112eb90600160201b90046001600160a01b031683610619565b8060200190518101906112fe9190611b1c565b9050805b6113118163ffffffff16610c4e565b850361132257506001949350505050565b8063ffffffff165f036113335750601e5b8061133d81611afe565b9150508163ffffffff168163ffffffff160361130257505f949350505050565b61136561141c565b60405173be34cc4cebf526887ec2c0035463dd26b3e7fea4905f90829047908381818185875af1925050503d805f81146113ba576040519150601f19603f3d011682016040523d82523d5f602084013e6113bf565b606091505b50509050806114105760405162461bcd60e51b815260206004820181905260248201527f7061796d656e7420746f2061646d696e20646964206e6f7420676f207468727560448201526064016106ed565b50506108b36001600555565b60026005540361143f57604051633ee5aeb560e01b815260040160405180910390fd5b6002600555565b34156114b25760405162461bcd60e51b815260206004820152603560248201527f4d6573736167652076616c756520697320737570706f73656420746f206265206044820152747a65726f20666f722045544820696e7374616e636560581b60648201526084016106ed565b6006546040516001600160a01b0383169180156108fc02915f818181858888f193505050501580156114e6573d5f803e3d5ffd5b5050565b6004545f8054909163ffffffff600160201b90910481169161150e91166002611c4e565b63ffffffff168163ffffffff16036115815760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b60648201526084016106ed565b80835f80805b5f5463ffffffff908116908216101561163b576115a5600286611c7e565b63ffffffff165f036115e1578392506115c38163ffffffff16610ea1565b63ffffffff82165f90815260026020526040902085905591506115fc565b63ffffffff81165f9081526002602052604090205492508391505b604080516020808201869052818301859052825180830384018152606090920190925280519101209350611631600286611ca0565b9450600101611587565b506004545f90601e906116559063ffffffff166001611cc2565b61165f9190611c7e565b6004805463ffffffff191663ffffffff8381169182179092555f908152600360209081526040808320899055928a1682526001908190529190208a90559091506116aa908790611cc2565b6004805463ffffffff92909216600160201b0267ffffffff000000001990921691909117905550939695505050505050565b60065434146108b35760405162461bcd60e51b815260206004820152603860248201527f506c656173652073656e6420606d697844656e6f6d696e6174696f6e6020455460448201527f4820616c6f6e672077697468207472616e73616374696f6e000000000000000060648201526084016106ed565b6001600160a01b0381168114610e9e575f80fd5b5f8060408385031215611778575f80fd5b823561178381611753565b946020939093013593505050565b5f5b838110156117ab578181015183820152602001611793565b50505f910152565b602081525f82518060208401526117d1816040850160208701611791565b601f01601f19169190910160400192915050565b5f602082840312156117f5575f80fd5b5035919050565b5f815180845260208085019450602084015f5b8381101561182b5781518752958201959082019060010161180f565b509495945050505050565b604081525f61184860408301856117fc565b828103602084015261185a81856117fc565b95945050505050565b5f8060408385031215611874575f80fd5b50508035926020909101359150565b5f805f60608486031215611895575f80fd5b833592506020840135915060408401356118ae81611753565b809150509250925092565b602081525f6108ac60208301846117fc565b5f805f805f8060a087890312156118e0575f80fd5b863595506020870135945060408701359350606087013561190081611753565b9250608087013567ffffffffffffffff8082111561191c575f80fd5b818901915089601f83011261192f575f80fd5b81358181111561193d575f80fd5b8a602082850101111561194e575f80fd5b6020830194508093505050509295509295509295565b5f8060208385031215611975575f80fd5b823567ffffffffffffffff8082111561198c575f80fd5b818501915085601f83011261199f575f80fd5b8135818111156119ad575f80fd5b8660208260051b85010111156119c1575f80fd5b60209290920196919550909350505050565b602080825282518282018190525f9190848201906040850190845b81811015611a0c5783511515835292840192918401916001016119ee565b50909695505050505050565b5f8251611a29818460208701611791565b9190910192915050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215611a6b575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b818103818111156106fb576106fb611a72565b60408152826040820152828460608301375f606084830101525f601f19601f85011682016060838203016020840152611ad560608201856117fc565b9695505050505050565b5f60208284031215611aef575f80fd5b815180151581146108ac575f80fd5b5f63ffffffff821680611b1357611b13611a72565b5f190192915050565b5f60208284031215611b2c575f80fd5b815163ffffffff811681146108ac575f80fd5b600181815b80851115611b7c578163ffffffff04821115611b6257611b62611a72565b80851615611b6f57918102915b93841c9390800290611b44565b509250929050565b5f82611b92575060016106fb565b81611b9e57505f6106fb565b8160018114611bb45760028114611bbe57611bef565b60019150506106fb565b60ff841115611bcf57611bcf611a72565b6001841b915063ffffffff821115611be957611be9611a72565b506106fb565b5060208310610133831016604e8410600b8410161715611c26575081810a63ffffffff811115611c2157611c21611a72565b6106fb565b611c308383611b3f565b8063ffffffff04821115611c4657611c46611a72565b029392505050565b5f63ffffffff611c62818516828516611b84565b949350505050565b634e487b7160e01b5f52601260045260245ffd5b5f63ffffffff80841680611c9457611c94611c6a565b92169190910692915050565b5f63ffffffff80841680611cb657611cb6611c6a565b92169190910492915050565b63ffffffff818116838216019080821115610db057610db0611a7256fea2646970667358221220c63e35b7ee758a4d64e97898b462ff49de0f3911004c70006571b3759e44013164736f6c63430008170033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "getLastRoot()": {
        "details": "Returns the last root"
      },
      "hashLeftRight(bytes32,bytes32)": {
        "details": "Hash 2 tree leaves, returns keccak256(_left, _right)"
      },
      "isKnownRoot(bytes32)": {
        "details": "Whether the root is present in the root history"
      },
      "isSpent(bytes32)": {
        "details": "whether a note is already spent "
      },
      "isSpentArray(bytes32[])": {
        "details": "whether an array of notes is already spent "
      },
      "zeros(uint256)": {
        "details": "provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 72,
        "contract": "contracts/ToadnadoL2.sol:ToadnadoL2",
        "label": "levels",
        "offset": 0,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 76,
        "contract": "contracts/ToadnadoL2.sol:ToadnadoL2",
        "label": "commitmentLeafs",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 80,
        "contract": "contracts/ToadnadoL2.sol:ToadnadoL2",
        "label": "filledSubtrees",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 84,
        "contract": "contracts/ToadnadoL2.sol:ToadnadoL2",
        "label": "roots",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 90,
        "contract": "contracts/ToadnadoL2.sol:ToadnadoL2",
        "label": "currentRootIndex",
        "offset": 0,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 93,
        "contract": "contracts/ToadnadoL2.sol:ToadnadoL2",
        "label": "nextIndex",
        "offset": 4,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 10,
        "contract": "contracts/ToadnadoL2.sol:ToadnadoL2",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 581,
        "contract": "contracts/ToadnadoL2.sol:ToadnadoL2",
        "label": "denomination",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 611,
        "contract": "contracts/ToadnadoL2.sol:ToadnadoL2",
        "label": "verifier",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 615,
        "contract": "contracts/ToadnadoL2.sol:ToadnadoL2",
        "label": "nullifiers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 619,
        "contract": "contracts/ToadnadoL2.sol:ToadnadoL2",
        "label": "commitments",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 623,
        "contract": "contracts/ToadnadoL2.sol:ToadnadoL2",
        "label": "commitmentsTreeRoots",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 1106,
        "contract": "contracts/ToadnadoL2.sol:ToadnadoL2",
        "label": "l1Roots",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 1109,
        "contract": "contracts/ToadnadoL2.sol:ToadnadoL2",
        "label": "l1_currentRootIndex",
        "offset": 0,
        "slot": "12",
        "type": "t_uint32"
      },
      {
        "astId": 1111,
        "contract": "contracts/ToadnadoL2.sol:ToadnadoL2",
        "label": "l1Address",
        "offset": 4,
        "slot": "12",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}