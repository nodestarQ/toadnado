{
  "language": "Solidity",
  "sources": {
    "contracts/ToadnadoL2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\n\ncontract ToadnadoL2 {\n\nmapping (uint256=>bytes32) l1Roots;\nuint32 public constant ROOT_HISTORY_SIZE = 30;\nuint32 public currentRootIndex = 0;\n\nfunction isKnownL1Root(bytes32 _root) public view returns (bool) {\n    if (_root == 0) {\n      return false;\n    }\n    uint32 _currentRootIndex = currentRootIndex;\n    uint32 i = _currentRootIndex;\n    do {\n      if (_root == l1Roots[i]) {\n        return true;\n      }\n      if (i == 0) {\n        i = ROOT_HISTORY_SIZE;\n      }\n      i--;\n    } while (i != _currentRootIndex);\n    return false;\n  }\n\naddress constant L1_SLOAD_ADDRESS = 0x0000000000000000000000000000000000000101;\n\n    function readSingleSlot(address l1_contract, uint256 slot) public view returns (bytes memory) {\n\n        bytes memory input = abi.encodePacked(l1_contract, slot);\n\n        bool success;\n        bytes memory result;\n\n        (success, result) = L1_SLOAD_ADDRESS.staticcall(input);\n\n        if (!success) {\n            revert(\"L1SLOAD failed\");\n        }\n\n        return result;\n\n    }\n\n// Public functions\n    function getL1Root(address l1_contract, uint256 key) public view returns(bytes32) {\n        uint slotNumber = 3;\n        return abi.decode(readSingleSlot(\n            l1_contract,\n            uint(keccak256(\n                abi.encodePacked(key,slotNumber)\n                )\n            )\n            ), (bytes32));\n    }\n\n    // function readMapSlot(address l1_contract, uint256 slot) public {\n\n    //     bytes memory input = abi.encodePacked(l1_contract, slot);\n\n    //     //get max amount for the for loop \n\n    //     bool success;\n\n    //     (success, leafResult) = L1_SLOAD_ADDRESS.staticcall(input);\n\n    //     if (!success) {\n    //         revert(\"L1SLOAD failed\");\n    //     }\n\n    // }\n    \n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}